<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><atom:link href="http://zmwangx.github.io/rss.xml" rel="self" type="application/rss+xml"/><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><description>Zhiming Wang's personal blog</description><language>en-us</language><managingEditor>zmwangx@gmail.com (Zhiming Wang)</managingEditor><webMaster>zmwangx@gmail.com (Zhiming Wang)</webMaster><pubDate>Fri, 25 Sep 2015 19:30:32 GMT</pubDate><lastBuildDate>Fri, 25 Sep 2015 19:30:32 GMT</lastBuildDate><generator>pyblog (https://github.com/zmwangx/zmwangx.github.io)</generator><docs>https://validator.w3.org/feed/docs/rss2.html</docs><image><url>http://zmwangx.github.io/img/icon-100.png</url><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><width>100</width><height>100</height></image><item><title>Removing Google Analytics from this blog</title><link>http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html</link><description><![CDATA[

<p>There was a lengthy discussion about Peace and ad-blocking in <a href="http://atp.fm/episodes/136">Accidental Tech Podcast Episode 136</a>. There were many lessons to learn from the story; as a side effect, it also made me reconsider Google Analytics on this blog.</p>
<p>I've been a user of ad-blocking for years and have little to no moral burden.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html#fn1" id="fnref1"><sup>1</sup></a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html#fn2" id="fnref2"><sup>2</sup></a> I do hate being tracked online, even by Google (to whom I entrust so much my personal information), although it's certainly better (I believe) than the host of shadier ad networks out there. Given this, why should I force something even I hate down my visitors' throats? Google Analytics is nice at telling me how many page views I get and where they are coming from, and I don't earn any money so I shouldn't feel guilty about it, but (1) it does install a tracker, and (2) I care very little about traffic anyway.</p>
<p>At this point the decision is pretty clear. I'm simply removing Google Analytics from this blog. This makes the blog entirely cookie-free and JS-free (except the very occasional JS embed).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I do try to support websites I frequent, e.g., through <a href="https://arstechnica.com/subscriptions/">Ars Premier</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Although it's easy to be a user of ad-blocking, I fully understand the moral (or even legal) burden of being the developer of an ad-blocker, let alone being the "face" of the ad-blocking industry; therefore, I understand and respect Marco's decision of pulling Peace.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-09-25-removing-google-analytics-from-this-blog.html</guid><pubDate>Fri, 25 Sep 2015 19:30:25 GMT</pubDate></item><item><title>Apple Watch: Digital Crown tightness issue</title><link>http://zmwangx.github.io/blog/2015-09-24-apple-watch-digital-crown-tightness-issue.html</link><description><![CDATA[

<p>Quick tip: if the Digital Crown on your Apple Watch <em>all of a sudden</em><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-24-apple-watch-digital-crown-tightness-issue.html#fn1" id="fnref1"><sup>1</sup></a> feels too tight and doesn't turn smoothly, probably it was somehow over-turned (and probably because you played with watchOS 2 Time Travel, as I did). I don't know how that happened because it's clearly not supposed to happen, but turning it in the easy-to-turn direction for a few rounds fixed the tightness issue for me.</p>
<p>There's also an <a href="https://support.apple.com/en-us/HT204639">Apple Support document</a> on troubleshooting and cleaning the Digital Crown, if the above doesn't help.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Especially after upgrading to watchOS 2. Why in the hell could upgrading the software screw up the hardware? You'll see a possible cause if you read on.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-24-apple-watch-digital-crown-tightness-issue.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-09-24-apple-watch-digital-crown-tightness-issue.html</guid><pubDate>Thu, 24 Sep 2015 17:55:38 GMT</pubDate></item><item><title>Zsh 5.1 and bracketed paste</title><link>http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html</link><description><![CDATA[

<p><strong>TL;DR.</strong> Jump to <a href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#code">code</a>.</p>
<hr/>
<p>In short, Zsh 5.1 introduced bracketed paste mode<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fn1" id="fnref1"><sup>1</sup></a> and turned it on by default (as it seems to me<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fn2" id="fnref2"><sup>2</sup></a>). It is nice in certain ways &#8212; I appreciate the change, yet I was bitten nevertheless. In at least two ways:</p>
<ol style="list-style-type: decimal">
<li><p>Most annoyingly, <code>url-quote-magic</code> doesn't work anymore when pasting URLs, so for example if I paste</p>
<pre><code>https://www.google.com/search?q=zsh</code></pre>
<p>without typing in a single or double quote first, the <code>?</code> and <code>=</code> won't be backslash-quoted by default, which causes an error when passed unnoticed (out of habit).</p></li>
<li><p>The Emacs shell<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fn3" id="fnref3"><sup>3</sup></a> is littered with <code>^[[?2004h</code> and <code>^[[?2004l</code> around every prompt.</p></li>
</ol>
<p>The solution? Zsh now also ships with <a href="https://github.com/zsh-users/zsh/blob/master/Functions/Zle/bracketed-paste-magic"><code>bracketed-paste-magic</code></a> that resolves exactly breakage #1 (and a bit more); to quote comments from the linked source file:</p>
<blockquote>
<p>Starting with zsh-5.1, ZLE began to recognize the "bracketed paste" capability of terminal emulators, that is, the sequences <code>$'\e[200~'</code> to start a paste and <code>$'\e[201~'</code> to indicate the end of the pasted text. Pastes are handled by the bracketed-paste widget and insert literally into the editor buffer rather than being interpreted as keystrokes.</p>
<p>This disables some common usages where the self-insert widget has been replaced in order to accomplish some extra processing. An example is the contributed url-quote-magic widget. The bracketed-paste-magic widget replaces bracketed-paste with a wrapper that re-enables these self-insert actions, and other actions as selected by the zstyles described below.</p>
</blockquote>
<p>And to resolve breakage #2, just disable bracketed paste altogether for dumb terms.</p>
<p id="code">
Putting it together:
</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># turn off ZLE bracketed paste in dumb term</span>
<span class="co"># otherwise turn on ZLE bracketed-paste-magic</span>
<span class="kw">if [[</span> <span class="ot">$TERM</span> <span class="ot">==</span> dumb<span class="kw"> ]]</span>; <span class="kw">then</span>
    <span class="kw">unset</span> zle_bracketed_paste
<span class="kw">else</span>
    <span class="kw">autoload</span> -Uz bracketed-paste-magic
    <span class="kw">zle</span> -N bracketed-paste bracketed-paste-magic
<span class="kw">fi</span></code></pre></div>
<hr/>
<p><span id="update"><strong>09/22/2015 update.</strong></span> I only read <code>NEWS</code> and not <code>README</code>, so I missed out on a very clear announcement of the <a href="https://github.com/zsh-users/zsh/blob/68405f31a043bdd5bf338eb06688ed3e1f740937/README#L38-L45">bracketed paste incompatibitilies (between 5.0.8 and 5.1)</a>:</p>
<blockquote>
<p>The default behaviour when text is pasted into an X Windows terminal has changed significantly (unless you are using a very old terminal emulator that doesn't support this mode). Now, the new "bracketed paste mode" treats all the pasted text as literal characters. This means, in particular, that a newline is simply inserted as a visible newline; you need to hit Return on the keyboard to execute the pasted text in one go. See the description of <code>zle_bracketed_paste</code> in the <code>zshparams</code> manual for more. "<code>unset zle_bracketed_paste</code>" restores the previous behaviour.</p>
</blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Bracketed paste mode is a safeguard against inadvertent interpretation of pasted text, e.g., newline being treated at <code>accept-line</code> in Zsh. You may read more about it <a href="https://cirw.in/blog/bracketed-paste">in this blog post</a>, which is somewhat outdated yet still informational.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Indeed it is. See <a href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#update">update</a> with more accurate info from official source.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I seldom use this dumb (literally) thing, but when I do I expect it to work ungarbled, naturally.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html#fnref3">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-09-21-zsh-51-and-bracketed-paste.html</guid><pubDate>Mon, 21 Sep 2015 21:40:36 GMT</pubDate></item><item><title>After all these years, 10pt non-anti-aliased Monaco is still the best</title><link>http://zmwangx.github.io/blog/2015-08-31-after-all-these-years-10pt-non-anti-aliased-monaco-is-still-the-best.html</link><description><![CDATA[

<p>Ars Technica <a href="http://arstechnica.com/information-technology/2015/08/open-source-typeface-hack-brings-design-to-source-code/">just ran a piece</a> on the open source programming font <a href="https://github.com/chrissimpkins/Hack">Hack</a>. Now I don't really know why this is news-worthy (open source programming fonts aren't a new thing), but I thought I'd give it a try.</p>
<p>The result is unsurprising. I've loved my 10pt non-anti-aliased Monaco for years, beginning with the Pro profile of Terminal.app. In fact, I initially refused to use iTerm2 precisely because I can't reproduce my beloved typeface in it, until I found out the non anti-aliasing trick. This time again, Hack simply can't compete with my favorite font; see the screenshots below. Among other things, it is way too thick for my liking &#8212; the same problem that haunts a whole range of programming fonts. Note that Hack is <a href="https://github.com/chrissimpkins/Hack#about">supposed to</a> look good at 8px&#8211;12px according to its README, but I tested it at 9pt&#8211;12pt in iTerm2 (I know, pt is supposed to be larger than px, but I seriously doubt that anyone would want 8px or 6pt as their daily font size &#8212; and for that matter iTerm2 doesn't even allow me to go below 9pt, a pretty reasonable restriction, I'd say).</p>
<p>By the way, it is worth pointing out that the very same Monaco looks horrible at 9pt or 11pt, anti-aliased or not (same goes for 10pt anti-aliased). 10pt non-anti-aliased Monaco is simply a miracle.</p>
<p><strong>09/01/2015 update:</strong> Looks like I was quite confused about pt and px, and they are to be used interchangeably in the current context. I suggest that anyone interested in this subject also read John Gruber's two very informative pieces from 2003, <a href="http://daringfireball.net/2003/03/antialiasing.html"><em>Anti-Aliasing</em></a> and <a href="https://daringfireball.net/2003/03/anti-anti-aliasing"><em>Anti-Anti-Aliasing</em></a>.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150831-terminal-app-pro-profile.png" target="_blank"><img alt="Pro profile in Apple's Terminal.app, with 10pt non-anti-aliased Monaco. That says something about the font's quality, especially on a dark background." src="http://zmwangx.github.io/img/20150831-terminal-app-pro-profile.png"/></a>
<p class="caption">Pro profile in Apple's Terminal.app, with 10pt non-anti-aliased Monaco. That says something about the font's quality, especially on a dark background.</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150831-monaco-10pt-non-antialiased.png" target="_blank"><img alt="10pt non-anti-aliased Monaco is life." src="http://zmwangx.github.io/img/20150831-monaco-10pt-non-antialiased.png"/></a>
<p class="caption">10pt non-anti-aliased Monaco is life.</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150831-hack-8,9,10,11pt-antialiased-combined.png" target="_blank"><img alt="Hack, anti-aliased, at 9pt, 10pt, 11pt and 12pt, respectively. Click to enlarge." src="http://zmwangx.github.io/img/20150831-hack-8,9,10,11pt-antialiased-combined.png"/></a>
<p class="caption">Hack, anti-aliased, at 9pt, 10pt, 11pt and 12pt, respectively. Click to enlarge.</p>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-31-after-all-these-years-10pt-non-anti-aliased-monaco-is-still-the-best.html</guid><pubDate>Sun, 30 Aug 2015 22:31:03 GMT</pubDate></item><item><title>Automated OS X provisioning</title><link>http://zmwangx.github.io/blog/2015-08-25-automated-os-x-provisioning.html</link><description><![CDATA[

<p>After quite a bit of work, I finally have a decent OS X provisioning system, capable of provisioning a blank OS X install (with Xcode and CLT) for development and everyday life.</p>
<p>Here it is: <a href="https://github.com/zmwangx/dotfiles/blob/master/provision"><code>zmwangx/dotfiles/provision</code></a>. In case the path changes in the future and invalidates the aforementioned URL, <a href="https://github.com/zmwangx/dotfiles/blob/d8e20b731583d69b380d422c8788f61cd4a4e211/provision">here</a> is the archived provisioning script at the current master. Of course the provisioning system is not a single script; it reads and executes modules from a <a href="https://github.com/zmwangx/dotfiles/tree/master/provision.d"><code>provision.d</code></a> directory, which in turn links into other specialized parts of the system.</p>
<p>Selling points:</p>
<ul>
<li><p>Highly modular due to the <code>provision.d</code> structure. New provisioning scripts for specialized tools can be added at any time without complicating the rest of the system.</p></li>
<li><p>Graceful failure and easy error recovery. For most failures, running the provision once more fixes the issues. This is especially helpful when GitHub get DDoS'ed and loads of downloads fail, e.g., <a href="https://web.archive.org/web/20150825150044/https://status.github.com/messages">last night</a>, when I was sleeping with the provisioning system hard at work.</p></li>
<li><p>Very nice, colored console messages. Of course you'd expect that when half of the code is devoted to messaging...</p></li>
</ul>
<p>Thus far tested on OS X 10.10 and 10.11. Works pretty well. Of course OS X provisioning (with so many impossible-to-automate tasks) is still a hell lot harder than Linux provisioning, but hopefully this system will safe me a considerable amount of time and trouble during my at-least-twice-a-year clean OS installation and beta testing in VMs.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150825-osx-provisioning-system.png" target="_blank"><img alt="provision at work. Provisioning a blank machine is probably the only time I need Terminal.app." src="http://zmwangx.github.io/img/20150825-osx-provisioning-system.png"/></a>
<p class="caption"><code>provision</code> at work. Provisioning a blank machine is probably the only time I need Terminal.app.</p>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-25-automated-os-x-provisioning.html</guid><pubDate>Tue, 25 Aug 2015 15:16:44 GMT</pubDate></item><item><title>I installed BlockParty, and the only thing I can say is WOW</title><link>http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html</link><description><![CDATA[

<p><strong>09/18/2015 update.</strong> Okay, <a href="http://www.marco.org/2015/09/18/just-doesnt-feel-good">Peace has been pulled</a>. Guess I'll keep using it for a while, though.</p>
<hr/>
<p><strong>09/17/2015 update.</strong> I'm now running <a href="http://www.marco.org/2015/09/16/peace-content-blocker">Marco Arment's</a> <a href="https://itunes.apple.com/us/app/peace-block-ads-trackers-powered/id1031035630?mt=8">Peace</a>, powered by Ghostery.</p>
<hr/>
<p>I just let out <a href="http://zmwangx.github.io/blog/2015-08-20-ios-9-turn-off-wi-fi-assist.html">a load of complaints about iOS 9 beta</a> last night, but apparently forgot about one nice thing: <a href="https://developer.apple.com/videos/wwdc/2015/?id=511">Safari content blocking</a>.</p>
<p>In this day and age, not being iOS/OS X developers ourselves won't stop the rest of us from obtaining ObjC/Swift source code.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html#fn1" id="fnref1"><sup>1</sup></a> I simply typed "Safari content blocker" into GitHub's search box, and there it popped, the most starred repo relevant to my search, <a href="https://github.com/krishkumar/BlockParty">krishkumar/BlockParty</a>. Thanks to Apple's new sideloading policy in Xcode 7, I was able to immediately test it out on my phone.</p>
<p>The effect is just amazing. In my few minutes of browsing, I did not seem to encounter a single ad (on various consistently ad-laden news sites). You should definitely give it a shot. What's even more amazing is that BlockParty's <a href="https://github.com/krishkumar/BlockParty/blob/master/RediffBlock/blockerList.json"><code>blockList.json</code></a>, at the time of writing, is only 1578 lines long &#8212; a JSON array with 197 objects. <strong>Only 197 rules, blocking 197 domains.</strong> Compare that to <a href="https://easylist-downloads.adblockplus.org/easylist.txt">EasyList</a>, which at the moment is a <strong>48820 line monster</strong>. Of course, EasyList is much more fine-grained (<a href="https://adblockplus.org/blog/content-blocking-in-safari-9-and-ios-9-good-news-or-the-death-knell-of-ad-blocking-on-safari">as are AdBlockPlus's filtering mechanisms</a>); with BlockParty I can actually see some blank boxes that used to host ads. But still, very impressive. Many thanks to <a href="https://github.com/krishkumar">@krishkumar</a> for publishing BlockParty, and to <a href="https://medium.com/@searls/installing-a-content-blocker-on-ios-9-public-beta-a25b2b83848f">Justin Searls</a> for publishing a detailed tutorial.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html#fn2" id="fnref2"><sup>2</sup></a></p>
<p>197 domains made our online lives so miserable. Hmm.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Actually developing a Safari content blocker extension is as easy as writing a JSON blocker list, but I'm not sure if you need an app with a UI to support the extension. Anyway, there are professional iOS developers out there ready to share the code, so I'll just happily join for a ride.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Without which I would have been scratching my head, not knowing that I had to go to Settings-&gt;General-&gt;Profiles to trust my personal profile.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-20-i-installed-blockparty-and-the-only-thing-i-can-say-is-wow.html</guid><pubDate>Fri, 21 Aug 2015 03:58:55 GMT</pubDate></item><item><title>iOS 9: turn off Wi-Fi Assist!</title><link>http://zmwangx.github.io/blog/2015-08-20-ios-9-turn-off-wi-fi-assist.html</link><description><![CDATA[

<p>Seriously. Go to Settings-&gt;Cellular, and scroll all the way down to reveal the "Wi-Fi Assist" switch. See screenshot at the end of the post. You'll see a description:</p>
<blockquote>
<p>Automatically use cellular data when Wi-Fi connectivity is poor.</p>
</blockquote>
<p>Switch that off, if you occasionally have shitty Wi-Fi (that kinda works anyway) and at all care about your cellular data usage.</p>
<p>I'll tell my horror story now. Background info: I have unlimited voice and text plus 300 MB data per month, since I've got Wi-Fi almost everywhere I go. Granted, school Wi-Fi (especially dorm) is shitty and drops all the time, but I'm not a streaming-music-on-mobile person, so the Wi-Fi is mostly fine for checking emails, browsing the Web (yes, even <a href="http://murphyapps.co/blog/2015/6/24/an-hour-with-safari-content-blocker-in-ios-9">iMore</a> or <a href="http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/">The Verge</a> kind of Web), getting push notifications, or even downloading a few podcasts on the go. I usually end up using less than 200 MB of cellular data per month.</p>
<p>However, at the beginning of August (on iOS 9 Public Beta 2 at that time), I somehow managed to burn through 200 MB in four or five days, with consistent daily stats, <em>while I did nothing special, at least not actively</em>. The timing overlaps with when I got my Apple Watch; I don't know if that's a coincidence. Anyway, more than 90% of that usage was under System Services-&gt;Documents &amp; Sync, which I could do nothing about. I had to turn off cellular data until almost the end of my billing cycle, when I stumbled upon the "Wi-Fi Assist" setting. Since then, I only used 4.8 MB &#8212; with 1.5 MB for System Services &#8212; in four days. Hardly a coincidence, I'd say.</p>
<p>In fact, I was pretty delighted when I heard about the ability to auto fallback to LTE when one's on the fringe of Wi-Fi in <a href="https://developer.apple.com/videos/wwdc/2015/?id=719">WWDC '15 Session 719</a> ("Your App and the Next Generation Networks"). However, without another likely suspect, I guess what happened in reality was that when I was sitting in the center of a shitty Wi-Fi, with the system trying to do some background job involving a network connection, it just kept trying to connect via LTE, which probably beat the shitty Wi-Fi consistently. It would be nice if one day our phones would be aware of our data plans (realize that not every one is on a $100/mo 15 GB plan) and throttle its usage wisely.</p>
<p>Anyway, I simply can't understand why the "Wi-Fi Assist" switch, a general system-wide option, appears at the end of Cellular settings, after all the per-app nickel-and-dime settings and statistics. It's nearly impossible to find. Generic settings should be at the top, period.</p>
<p>By the way, I have a lot of gripes about iOS 9 Beta. Maybe I shouldn't whine about beta software &#8212; I never used another iOS beta before so maybe they were even worse &#8212; but I can't help it because this was supposed to be a stability release. Several things immediately jumped to my mind (all present in the latest Public Beta 3), without even trying:</p>
<ul>
<li><p><a href="http://zmwangx.github.io/blog/2015-06-26-ios-9-searchable-settings.html">Searchable settings</a> is a scam. Many items can't be found. For instance, good luck searching for "Wi-Fi Assist". I wonder if the search index is hand-crafted. Also, you can't pull down to search from any screen; you have to go back, back, back, back to the main settings screen, and even then it begins with your last search, even if you're done with it. Ewww.</p></li>
<li><p>Scrolling and switching screens feels janky (system-wide) even on iPhone 6 Plus, supposedly a powerhouse.</p></li>
<li><p>The Music app is indeed totally screwed up (this actually dates back to iOS 8.4). It's so much harder than previous versions.</p>
<p>Dude, give me my old UI with selectable categories on the bottom bar if I've turned off Apple Music, okay? Do I have to put up with the Radio and Connect tabs, completely useless for me? Switching categories &#8212; by which I mean artists, albums, songs genres, etc. &#8212; is infinitely harder now, because you have to scroll all the way up to the top of a category in order to reveal the category selector, which has a dropdown arrow outside but isn't really a dropdown.</p>
<p>And may I go straight to the artwork and playback control screen when I tap to play a song? Damn, when I select and play a song of course I want see the song front and center; don't treat me like an indecisive guy.</p>
<p>And may I kindly request that the artwork does not protrude to the status bar &#8212; you do realize some artworks have white or light backgrounds, rendering the status bar unreadable?</p>
<p>Recently I also noticed that all my old iTunes purchases are showing up and screwing my library. There used to be a switch in System Preferences, the right place for this kind of settings on iOS, but it's since be removed in favor of Apple Music stuff (not sure why they are mutually exclusive), and strangely put in the category switcher. Hell, this abomination is even documented in <a href="https://support.apple.com/en-us/HT204951">"Using the new Music app"</a>; here's <a href="https://i.imgur.com/RJKLqPo.jpg">Apple's official screenshot</a> showing off the stupid category switcher. For me without Apple Music, the switch says "Show iTunes Purchases" instead of "Show Music Available Offline". Pretty clear, huh, not bad. But don't bother, it does absolutely nothing for me.</p></li>
</ul>
<p>I could go on and on and on, but I don't want to waste more time on this crap. The gist is that I'm not impressed by iOS 9 at all at the moment (oh, one thing positive: San Francisco is nice). Hopefully the final release would be in much better shape; but I don't see any hope for the Music mess &#8212; it's not likely to be cleaned up any time soon. I mourn for the old Music app, which is likely gone forever.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150819-ios9-wifi-assist.png" target="_blank"><img alt='The "Wi-Fi Assist" switch, hidden below per-app settings.' src="http://zmwangx.github.io/img/20150819-ios9-wifi-assist.png"/></a>
<p class="caption">The "Wi-Fi Assist" switch, hidden below per-app settings.</p>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-20-ios-9-turn-off-wi-fi-assist.html</guid><pubDate>Thu, 20 Aug 2015 08:01:57 GMT</pubDate></item><item><title>Laymen</title><link>http://zmwangx.github.io/blog/2015-08-14-laymen.html</link><description><![CDATA[

<p>I always cringe when I see laymen discussing physics in comments sections of news websites. A typical situation: one commentator put together a sentence with all physics-sounding (kind of) terms he's ever heard of; the next commentator "agrees" with the previous one, adding something that sounds more reasonable (to folks who've never taken high school physics) but unfortunately violates the first law of thermodynamics; then yet another guy comes along and corrects both of the above in a pedagogic tone, with an argument that violates the second law of thermodymics...</p>
<p>I cringe even more when laymen discuss mathematics, but that's much rarer compared to physics.</p>
<p>Granted, mathematics (theoretical computer science included) and theoretical physics are probably the most abstract knowledge known to human beings, but I'm beginning to wonder if there are other professionals who would also cringe when I myself is discussing something outside my domain of expertise. Or when a better mathematician or physicist listens in on my baby talks with someone on the roughly same level.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-14-laymen.html</guid><pubDate>Sat, 15 Aug 2015 01:32:13 GMT</pubDate></item><item><title>Other people's ___</title><link>http://zmwangx.github.io/blog/2015-08-13-other-peoples-___.html</link><description><![CDATA[

<p>Often enough we look at other people's ___ (fill in the blank here) and say wow, but more often than not when we actually get to lay our hands on it, we find it less than impressive or even super annoying, and end up having nothing to say but meh. For Zsh geeks, examples include other people's Zsh prompts<a href="https://github.com/chauncey-garrett/zsh-prompt-garrett" style="text-decoration: none">,</a> zsh-syntax-highlighting, and zsh-autosuggestions.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-13-other-peoples-___.html</guid><pubDate>Thu, 13 Aug 2015 09:00:24 GMT</pubDate></item><item><title>Switching to capitalized commit messages</title><link>http://zmwangx.github.io/blog/2015-08-05-switching-to-capitalized-commit-messages.html</link><description><![CDATA[

<p>This post is a note to self.</p>
<p>As a long time git user, I've always used lowercase commit messages (in the subject line). I never quite liked the idea of capitalized commit messages, which are seldom complete sentences (and they are never period-terminated). Similarly, I avoid capilatization like hell in comments, unless when I write complete sentences. By the way, there's a technical advantage of writing lowercase commit messages: I can easily tell my human-made commits from auto commits like merge and revert commits, because they always begin with a capitalized "Merge", "Revert", etc.</p>
<p>However, most of the projects I've contributed to seem to prefer capitalized commit messages, and by following my own habit, quite often I would go through the "oh crap I messed up the contribution guidelines" realization and had to amend my commits after the fact. Also, when I open a single-commit pull request on GitHub, the subject line of the commit message automatically becomes the subject line of the pull request, and I want my pull requests to have capitalized subject lines. Perhaps I come off as self-contradictory here: lowercase commit message, but capitalized PR subject? I don't know. Maybe a PR subject is more like a real "title". Also, I blame the font: lowercase subject lines don't look remotely as good in, say, Helvetica (which GitHub currently uses for PR and commit message subject lines), as in a good fixed width font, which is what I get when I run any <code>git-log</code> variant in a terminal.</p>
<p>Anyway, lowercase commit messages isn't a particularly strong preference of mine, so I'm happy to change my habit from this day onward. Anyone can feel free to tease me if they see me write a lowercase commit message again (unless its in the format <code>component: changes</code>). In light of this, I've already <a href="https://github.com/zmwangx/zmwangx.github.io/commit/297225f2ab8a6db4fe75643f511f52499b052aa7">changed the message format</a> of <code>pyblog</code>'s auto commits, which is how I generate this blog.</p>
<p>P.S. To be fair to me, <em>Pro Git</em>, the official git tutorial, <a href="https://github.com/progit/progit2/blob/6d9867ff2394cb8a08fa3e013b082a7ae547b8af/book/02-git-basics/sections/viewing-history.asc#viewing-the-commit-history">uses lowercase commit messages</a> (I guess that's just the personal preference of Scott Chacon &#8212; not mandated by anyone). To be fair to the other side, <a href="https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290"><code>git.git</code> mostly uses capitalized commit messages</a>.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-05-switching-to-capitalized-commit-messages.html</guid><pubDate>Thu, 06 Aug 2015 02:38:37 GMT</pubDate></item><item><title>Should Apple split up iTunes on OS X?</title><link>http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html</link><description><![CDATA[

<p>These days everyone seems to be talking about how complicated iTunes is and how Apple should give it a clean-sheet rewrite. This is not new, but the argument has certainly intensified ever since the introduction of iCloud Photo Library and Apple Music. For one recent example, see <a href="http://www.marco.org/2015/07/26/dont-order-the-fish">Don't order the fish</a> by Marco Arment. I was listening to John Gruber's <a href="https://daringfireball.net/thetalkshow/2015/07/29/ep-127">The Talk Show episode 127</a> earlier today (a little bit late to the game, yeah), and the complexity argument was brought up yet again.</p>
<p>I just can't buy that argument. (Disclaimer: in this post I'm talking about UI/UX, not the backend.) Granted, there are many tabs in iTunes. There's one for music, one for movies, one for TV shows, one for podcasts, one for iOS apps, one for each iOS device currently connected via USB, and so on. You can hide some of them if you don't use them. And for each of these tabs there are probably subtabs, and occasionally a sidebar. This might sound rather intimidating to the faint-hearted, but if you really dive into iTunes, you'll find that 99% of the functionalities you'll ever need to find or organize your stuff are under four clicks away<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn1" id="fnref1"><sup>1</sup></a>, and editing metadata (including batch editing) is pretty easy too. All in all, iTunes as it currently stands is both powerful (too many things on the plate, in some people's words) and not badly complicated, in the sense that you can certainly find your way around if you try. Some would argue that some of iTunes' features get shuffled into different places from version to version; yeah that's annoying, but in reality it usually takes less than five minutes to find all I need in a new version.</p>
<p>For people who just buy their content from iTunes Store<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn2" id="fnref2"><sup>2</sup></a> and never organize again, there are probably too many unnecessary subtabs and sidebars, but hey, do they need to touch these controls at all? There's a search bar that works reasonably well accross the entire content library<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn3" id="fnref3"><sup>3</sup></a>. For people who do organize their stuff, or do routinely import music and videos from outside, or do sync their devices via USB, most of those controls are great and necessary.</p>
<p>One disclaimer, by the way: maybe Apple Music made things more confusing. I don't know because I didn't even sign up for the free trial.</p>
<p>Now think about splitting up iTunes. As on iOS, you get a Music app, a Videos app, a Podcast app, an iTunes U app, and a separate iTunes Store app. Probably yet another one for managing your iOS devices, since that belongs to none of the above. So, what do you save by having all those apps? You save one click when you switch focus to another area? Well, not even that at times: now you need to switch apps. Moreover, what if I use several of those routinely (I do)? Do I have to keep all of them on my dock? Even if I don't keep them in Dock, as long as they're open they'll show up anyway, and that would be beyond horrible for people who care about their docks. This is my current dock:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150805-my-current-dock.png" target="_blank"><img alt="My current Dock. Note that I have the old red iTunes icon from 12.1, because I really can't stand the white one from 12.2. I know that's the future in El Capitan and iOS 9 (it looks reasonable on iOS 9 by the way, I've been using public betas since day one), but I'll just be stubborn this time, without much real cost." src="http://zmwangx.github.io/img/20150805-my-current-dock.png"/></a>
<p class="caption">My current Dock. Note that I have the old red iTunes icon from 12.1, because I really can't stand the white one from 12.2. I know that's the future in El Capitan and iOS 9 (it looks reasonable on iOS 9 by the way, I've been using public betas since day one), but I'll just be stubborn this time, without much real cost.</p>
</div>
<p>iTunes, where I playback music and manage my entire content library<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn4" id="fnref4"><sup>4</sup></a>, nicely takes up only one slot, which is the most reasonable thing to have. On iOS where apps can't have too many tabs or subtabs, it certainly makes sense to split the functionalities; on OS X where you do have space to host those tabs or subtabs, I fail to see how complexity warrants refactoring, especially when refactoring would introduce other problems.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn5" id="fnref5"><sup>5</sup></a> <a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn6" id="fnref6"><sup>6</sup></a></p>
<p>Speaking of complexity, iTunes isn't even remotely as complex as, say, Microsoft Word or Adobe Photoshop. Those are of course nightmares to most people, but the point is that iTunes isn't a nightmare &#8212; it's pretty manageable, especially to power users and developers, who are the ones complaining most loudly. Also, nothing can beat the complexity of the web browser. We browse all kinds of web pages and use all kinds of web apps everyday, all inside the browser, which can hold arbitrarily many tabs with completely different UIs. We don't complain about the browser. Then why do we complain about iTunes, which is a consistent mix of essential functionalities across different areas of our multimedia experience?</p>
<p>It's true that everyone has their iTunes pet peeves. For instance, I hate the stupid new icon and the useless Apple Music related tabs that I can't turn off in 12.2. The biggest gripe I have with 12.2 is probably the small, hardly noticeable rotating circle at the far upper-right corner of the window,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn7" id="fnref7"><sup>7</sup></a> which now hosts the progress indicators of certain IO operations such as downloads and copying files to devices. To me it's a step backwards. Previously downloads was in a separate popup window and file copying had a place in the central area, visible whichever app you are in, but now I have to look for the visual indicator and all of a sudden remember that oh, it has been moved to that remote corner; even then I have to keep focus on iTunes, or the progress indicator dropdown would disappear. It seems all random that the progress of device syncing (and any copy operations initiated as part of the sync) should be front and center, while manually copying files to apps should retreat to the corner. Nevertheless, these minor or not-so-minor annoyances (honestly annoyances exist in almost every app) doesn't justify an iOS-like approach, which has its own drawbacks. I would be really mad if one day I need to run multiple apps just to manage the stuff on my phone.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Just a rough estimate off the top of my head; please don't challenge me or hold me responsible.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>I'm actually increasingly inclined to this approach. Having lossless music shipped on CDs (sometimes with extra goodies) is nice, but having age-old CDs and goodies lying around, taking up space and gathering dust is less enjoyable.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>"Reasonably well" at least on my not-so-large content library.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>I should probably say "my entire content library visible to iOS" instead, since my non-ITMS, DRM-free videos are mostly not in iTunes. It certainly can't keep my Matroska videos anyway.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>For instance, where should music videos live?<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref5">&#8617;&#65038;</a></p></li>
<li id="fn6"><p>By the way, Microsoft seems to have a split experience in Windows 10. Do people like it? The answer seems to be no.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref6">&#8617;&#65038;</a></p></li>
<li id="fn7"><p>Previously what would appear in that corner is the downloads icon, but anyone who has experienced both versions would tell you that the downloads icon is at least much more visible than the new rotating circle. The downloads icon was a dark gray blob, whereas the new thing is a few thin arcs.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref7">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html</guid><pubDate>Wed, 05 Aug 2015 21:09:51 GMT</pubDate></item><item><title>Sync Chrome bookmarks with Safari on OS X</title><link>http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html</link><description><![CDATA[

<p><strong>08/11/2015 Update:</strong> I have taken down the project from GitHub since it's way too flaky. Guess I'll stick with manually clicking around then...</p>
<hr/>
<p><strong>TL;DR</strong>: <a href="https://github.com/zmwangx/safari-sync-chrome-bookmarks">zmwangx/safari-sync-chrome-bookmarks</a> (now defunct; see update above).</p>
<hr/>
<p>I've been reading quite a bit of stuff on my iPhone 6 Plus these days, especially since I got my Apple Watch (not quite sure why these two things are correlated, but they are). I used to read subscribed content in Feedly, but abandoned that a while ago since Feedly does an unbearably bad job at updating my one-subscriber feeds,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn1" id="fnref1"><sup>1</sup></a> e.g., Ars Premier feed, GitHub release feeds, etc. Ever since then, I've been rocking a local Leaf engine on my Mac but lost access on my phone,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn2" id="fnref2"><sup>2</sup></a> and had to rely on bookmarks.</p>
<p>However, as a Chrome user on the desktop and only on the desktop (iOS Chrome sucks), I have trouble getting my Chrome bookmarks into mobile Safari. Apple developed an <a href="https://chrome.google.com/webstore/detail/icloud-bookmarks/fkepacicchenbjecpbpbclokcabebhah?hl=en">iCloud Bookmarks</a> extension for Chrome that allegedly syncs your bookmarks to iCloud<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn3" id="fnref3"><sup>3</sup></a>, but upon installing the extension for Mac Chrome, an error message pops up:</p>
<blockquote>
<p>The extension you are trying to install is designed to run on Windows 7 or 8. If you are using a Mac, your Safari bookmarks will automatically sync with your iPhone, iPad, and Mac when you sign in to iCloud on all your devices.</p>
</blockquote>
<p>The message is pretty clear: you have access to our browser, so you either use our browser or go fuck yourself.</p>
<p>So, what's next? Fortunately, recent versions of Safari (I'm currently running 8.0.7) has an import feature that comes in handy and does a pretty good job: "File -&gt; Import From -&gt; Google Chrome..." which lets you import either history or bookmarks or both. Once they are imported into desktop Safari, iCloud is pretty good at pushing it to mobile. I have no problem importing both, but the idea that I'll have to launch Safari and click click click click just to sync my bookmarks is beyond horrible.</p>
<p>Okay, remember we have another nightmare called AppleScript? And remember we have another nightmare within nightmare called GUI scripting? Yes, here's what we could do:</p>
<pre class="applescript"><code>#!/usr/bin/osascript
tell application "Safari" to activate
delay 1
tell application "System Events"
    tell process "Safari"
        tell menu bar 1
            tell menu bar item "File"
                tell menu "File"
                    tell menu item "Import From"
                        tell menu "Import From"
                            click menu item "Google Chrome&#8230;"
                            delay 1
                            keystroke return
                        end tell
                    end tell
                end tell
            end tell
        end tell
    end tell
end tell
delay 1
tell application "Safari" to quit</code></pre>
<p>Holy crap, look at that cascade.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn4" id="fnref4"><sup>4</sup></a> Anyway, in principle, this piece of crap works. In reality, well, it <em>sometimes</em> works. Because you know the nightmare called "assistive access", among other unreliabilities of poking around with system events:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150802-assistive-access-nightmare.png" target="_blank"><img alt="Familiar?" src="http://zmwangx.github.io/img/20150802-assistive-access-nightmare.png"/></a>
<p class="caption">Familiar?</p>
</div>
<p>On Yosemite at least, the pane to grant assistive access in System Preferences is three levels deep ("Security &amp; Privacy -&gt; Privacy -&gt; Accessibility"), behind an admin password, and most unfortunately, there's no way to grant access to individual executables through that pane, unless you are explicitly prompted about one, which may not happen when it should.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn5" id="fnref5"><sup>5</sup></a> <a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn6" id="fnref6"><sup>6</sup></a> There's nothing I could do apart from granting access to both Terminal.app and iTerm.app and hope for the best. Not so surprisingly, just as demonstrated in my past encounters with GUI scripting, with access granted to the terminals, whether I'll get an "assitive access" error when running the script is completely hit-or-miss. This time it works, the next time it just stalls, and yet another time it emits the error... Oh god.</p>
<p>In order to raise the rate of success, there's one other trick we could try: package the script into an Automator app. This way we can grant access to the standalone app, and that helps a bit. That's what I did in <a href="https://github.com/zmwangx/safari-sync-chrome-bookmarks">zmwangx/safari-sync-chrome-bookmarks</a>. It still occasionally get stuck, probably because I have a freaking slow spinning HDD and Safari would sometimes take forever to launch; but the accessibility problem does seem to go away (provided that you re-grant access every time you make the tiniest modification to the app).</p>
<p>Now I can throw that into my crontab (launching Safari beforehand to avoid freezing up):</p>
<pre class="crontab"><code>55 04 * * * open -g -a safari &amp;&amp; sleep 30 &amp;&amp; open -g -a safari-sync-chrome-bookmarks</code></pre>
<p>or invoke on demand.</p>
<p>Horrible solution, yes. Anything better? I would love to hear about it, but I highly doubt there's any, unless we directly work with <code>~/Library/Application Support/Google/Chrome/Default/Bookmarks</code> and <code>~/Library/Safari/Bookmarks.plist</code>. Probably a good problem to tackle though, provided that someone would sit down and understand the formats of the two files.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I can understand that to reduce server load, they can't refresh the one-subscriber feeds at a rate, say, once per minute, but not being able to manually update, especially when you have a so-called "refresh" feature? Not cool. (What the manual "refresh" seems to do is to fetch Feedly's cached content.) Anyway, it's a freemium service with me running the free tier, so I can't really blame them.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Which RSS reader/service I'll use next on iOS is a question; I haven't got time to compare the various options yet. So many readers, so many aggregation services!<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>And also one for Firefox, it seems<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>There's another annoyance: <code>"Google Chrome&#8230;"</code> cannot be replaced with <code>"Google Chrome..."</code>, or you won't ever find that menu item.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>There might be a way round through poking with the system accessibility database as root; see <a href="https://github.com/jacobsalmela/tccutil">jacobsalmela/tccutil</a>. However, until I have time to carefully evaluate the code, I'll have to stay with System Preferences.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref5">&#8617;&#65038;</a></p></li>
<li id="fn6"><p>Yes, I can understand the security concerns, but having to jump through so many hoops just to get some damned GUI scripting to work is awfully frustrating &#8212; and that's when you assume that the damned thing would just work after you jump through the hoops.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref6">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html</guid><pubDate>Mon, 03 Aug 2015 05:11:56 GMT</pubDate></item><item><title>The sad state of Finder on El Capitan</title><link>http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html</link><description><![CDATA[

<p>I was listening to <a href="http://atp.fm/episodes/128">Accidental Tech Podcast E128</a> today, which discussed the implications of Rootless (i.e. System Integrity Protection) at quite some length.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn1" id="fnref1"><sup>1</sup></a> Which stirred up my old worries about the Finder &#8212; I was briefly concerned about TotalFinder immediately after Rootless was announced in WWDC, but was quickly reassured and forgot that concern after learning that Homebrew (i.e. <code>/usr/local</code>) isn't affected, which attracted more of my attention.</p>
<p>Unfortunately, the concern is real. TotalFinder is dead on El Capitan: it has been monkey patching Finder.app all along, and that strategy apparently is killed by Rootless. BinaryAge has <a href="http://blog.binaryage.com/el-capitan-update/">announced</a> that TotalFinder won't be ported to El Capitan. It's a done deal.</p>
<p>This is actually not the first time I felt threatened as a TotalFinder fan<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn2" id="fnref2"><sup>2</sup></a>. Back in 2013, when Finder tabs was announced for Mavericks, there were <a href="http://discuss.binaryage.com/t/call-for-ideas-what-should-be-the-next-binaryage-product/243">hints from BinaryAge</a> that TotalFinder might be discontinued one day, because apparently Finder tabs is a "serious hit for our [BinaryAge's] business". However, it still survived all the way up till Yosemite. I had the hope that TotalFinder could die a peaceful, glorious death when Apple finally improved the stock Finder to a certain point; I didn't quite expect TotalFinder to die an abrupt death like this.</p>
<p>Now that I think about it, my expectations for Finder isn't very high. Just provide the following and I'll be pretty happy:</p>
<ol style="list-style-type: decimal">
<li>Auto-resize each column (one can already "Right Size All Columns Individually" through the right-click context menu from the column dividers &#8212; is it that hard or unreasonable to make that automatic?);</li>
<li>A way to quickly show and hide hidden files without leaving Finder;</li>
<li>Folders on top (when not sorting by kind) is a nice addition, but not a must;</li>
<li>Chrome-styled tab (instead of Safari-styled) would be a plus.</li>
</ol>
<p>Pretty simple, aren't they (except point 4, which won't happen in stock Finder for the forseeable future)? Especially point 1, which should be desirable for all users, power users and dummies alike. If TotalFinder (and the free alternative XtraFinder, for that matter) can do these just by monkey patching, then Apple with all the control and infinite resources definitely could do these.</p>
<p>Anyway, complaints aren't going to get me anywhere. What's next?</p>
<p>TotalFinder is dead.</p>
<p>XtraFinder<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn3" id="fnref3"><sup>3</sup></a> similarly monkey patches Finder, so it also won't work with Rootless enabled. The developer has no plan to drop its support though, and I've confirmed that so far the lastest version works well on El Capitan PB3 without Rootless, save for the auto-resize columns feature, which somehow has no effect. Hopefully it will be fixed.</p>
<p>The only other well-known Finder alternative is probably Path Finder, but being a standalone program<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn4" id="fnref4"><sup>4</sup></a> priced at $39.95, it seems both too full-blown and too expensive. Also, the "Path Finder 7" and "Upgrade &#8212; $19.95" on <a href="http://www.cocoatech.com/pathfinder/">the project's home page</a> aren't reassuring; it's probably a $20 per year program.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn5" id="fnref5"><sup>5</sup></a> Moreover, even if I end up paying the money, I'm not even sure if it is going to be able to fully replace the experience around Finder. For instance, does the <code>open</code> command open directories in PathFinder? I highly doubt that. Not to mention my AppleScripts surrounding Finder. Heck, I just want a nicer Finder; why am I forced to a full (and probably not fully integrated) replacement.</p>
<p>Besides, Path Finder's roadmap is pretty ridiculous. A guy asked "<a href="http://support.cocoatech.com/discussions/problems/33611-will-path-finder-work-with-el-capitan">Will Path Finder work with El Capitan?</a>" on the support forum, and the reply was</p>
<blockquote>
<p>Unfortunately, I cannot provide you with any information regarding this at the moment. We will let you know once there will be an official release of Mac OS X El Capitan.</p>
</blockquote>
<p>Seriously? That sounds so last decade. Which developer is so tight-lipped today? And who waits for the final OS release only to announce the support schedule? If they can't keep up with the schedule (or haven't evaluated the situation yet), at least they can communicate honestly with customers. This kind of uncertainty will only drive people away. Hard to believe this is the support you get for $40 plus upgrade fees.</p>
<p>I don't know what I'll do in the end. Path Finder is probably not what I'm looking for, but maybe I'll give it a spin if they release an El Capitan ready version in time. Most likely though, I'll stick to stock Finder for a while, and if it turns out too painful, I'll just disable Rootless and sport a copy of XtraFinder. I don't think Rootless will be that useful for me anyway; I still believe it's game over once malware sneaks into my system, whatever privilege it claims. Whether Apple will further lock down the system in a future version is another story.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>It's interesting to listen to John Siracusa's take on the issue, by the way. I completely agree with him.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Well this time we're not really threatened; TotalFinder is just plain dead. Those "I run Snow Leopard and I won't upgrade" dudes are delusional, as I've pointed out more than once.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p><a href="http://www.trankynam.com/xtrafinder/">XtraFinder</a> is free, and it comes from the developer of <a href="https://www.trankynam.com/atext/">aText</a>, so I have good feelings about it. However, its annoucements and discussions take place on <a href="https://www.facebook.com/XtraFinder">Facebook</a>, which makes it awfully unprofessional...<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>From what I've heard.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>Mind you, TotalFinder charges nothing except the initial $18 investment, despite a lot of rewrite for each major version of OS X.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref5">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html</guid><pubDate>Fri, 31 Jul 2015 06:59:09 GMT</pubDate></item><item><title>dl? cmplnts?'s web doesn't suck</title><link>http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html</link><description><![CDATA[

<p>I was reading <a href="http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/">Les Orchard's <em>The Verge's web sucks</em></a> just now, and inspired by his dignostics of his various daily reads, I also ran the performance meter on my very own blog. Fortunately, it doesn't suck<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html#fn1" id="fnref1"><sup>1</sup></a>:</p>
<blockquote>
<p>13 requests, 77.88 KB, 0.84s.</p>
</blockquote>
<p>Moreover, apart from a Google Analytics snippet and the occasional embedding with a <code>&lt;script&gt;</code> tag, this site is entirely static.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150725-performance-of-my-blog-requests.png" target="_blank"><img alt="HTTP requests upon visiting https://zmwangx.github.io/ (commit 3af1eaf)." src="http://zmwangx.github.io/img/20150725-performance-of-my-blog-requests.png"/></a>
<p class="caption">HTTP requests upon visiting <a class="uri" href="https://zmwangx.github.io/">https://zmwangx.github.io/</a> (commit <a href="https://github.com/zmwangx/zmwangx.github.io/tree/3af1eafde5afa9fbb4255135191d6d232cf81cee">3af1eaf</a>).</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150725-performance-of-my-blog-breakdown.png" target="_blank"><img alt="The breakdown." src="http://zmwangx.github.io/img/20150725-performance-of-my-blog-breakdown.png"/></a>
<p class="caption">The breakdown.</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Diagnostics generated on Firefox Developer Edition 41.0a2.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html</guid><pubDate>Sat, 25 Jul 2015 18:31:54 GMT</pubDate></item><item><title>GitHub experimental attachment formats: PDF, DOCX and PPTX!?!</title><link>http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html</link><description><![CDATA[

<p>I was browsing <a href="https://github.com/github/hub">github/hub</a>, and noticed something funny in the issue tracker:</p>
<blockquote>
<p>Attach more than just images: Now you can attach PDF, <strong>Word</strong>, and <strong>PowerPoint</strong> files to your comments on Issues and Pull Requests. This experimental feature is only available to some repositories.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn1" id="fnref1"><sup>1</sup></a></p>
</blockquote>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150719-github-attachment-new-formats.png" target="_blank"><img alt='"Attach more than just images: Now you can attach PDF, Word, and PowerPoint files to your comments on Issues and Pull Requests." WOW, JUST WOW.' src="http://zmwangx.github.io/img/20150719-github-attachment-new-formats.png"/></a>
<p class="caption">"Attach more than just images: Now you can attach PDF, Word, and PowerPoint files to your comments on Issues and Pull Requests." WOW, JUST WOW.</p>
</div>
<p>For a moment I wondered if today's April Fools', but apparently it isn't. Which makes me wonder: is GitHub expanding its customer base to grandparents? Or is this a heavily demanded feature on GitHub Enterprise by nontechnical managers and sales personnel? Attaching PDF to issues and PRs is already laughable enough; I just can't imagine any developer asking for Microsoft Office support. I mean, what should we do with those? Download those crap, wait ten minutes for Microsoft applications to launch, just to read a few pages of text? I know GitHub is expanding to designers by rolling out features like PSD diffing<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn2" id="fnref2"><sup>2</sup></a> and Large File Storage (<a href="https://git-lfs.github.com/"><code>git-lfs</code></a>) for assets, so is this feature also targeting nontechnical designers? Not sure. <strong>At any rate, this "feature" is simply ridiculous.</strong></p>
<p>GitHub has long been lacking good attachment support. Granted, one can dump files to gists and then link to them from issues, but that's a pain for most people (and not all people are aware of that). The lack of attachment support (other than images) is keeping some projects from hosting their issue trackers on GitHub, whose issue tracking system is otherwise extraodinary.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn3" id="fnref3"><sup>3</sup></a> One notable example that I care about is <a href="https://gitlab.com/gnachman/iterm2/issues">iTerm2</a>, which asks users to attach the user preference plist and a gzipped debug log when opening a new bug. <strong>Therefore, GitHub should improve their attachment support by accepting plain text files<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn4" id="fnref4"><sup>4</sup></a>, small gzips, common binary config file formats like binary Plist XML and so on that developers care about. But instead, they are working on... Microsoft Office???</strong></p>
<p>My attitude towards Microsoft Office (mostly Word) is best described in a gist/tutorial that I wrote more than a year ago: <a href="https://gist.github.com/zmwangx/9987772"><em>Markdown, LaTeX, etc.</em></a>. The <a href="https://gist.github.com/zmwangx/9987772#tips-for-microsoft-office-users">"Tips for Microsoft Office users"</a> section is quoted out in full at the end of this post. My feelings toward Microsoft, and by extension, Office, has softened quite a bit since I wrote that tutorial (in particular, unlimited OneDrive storage for Office 365 subscribers was a pretty good bribe), but every word in that section still applies to Microsoft Word. <strong>It is just sad that so many people all around the globe are still stuck in this Microsoft hell, not knowing that they have been liberated, and that they could have been free all along. And this move by GitHub is definitely not helping.</strong></p>
<hr/>
<p><strong>Appendix.</strong> From my tutorial <a href="https://gist.github.com/zmwangx/9987772"><em>Markdown, LaTeX, etc.</em></a>:</p>
<blockquote>
<h2 id="tips-for-microsoft-office-users">Tips for Microsoft Office users</h2>
<ol style="list-style-type: decimal">
<li>Stop using Microsoft Office, <strong>RIGHT NOW</strong>;</li>
<li>Do 1;</li>
<li>Do 2;</li>
<li>......</li>
</ol>
<h3>
Why I hate Microsoft Office
</h3>
<ol style="list-style-type: decimal">
<li><p>Microsoft Office is non-free, free both as in "free speech" and "free beer."</p></li>
<li><p>Microsoft Office is not only non-free, but also expensive.</p></li>
<li><p><code>.docx</code> is proprietary format. Microsoft has full control over it (correct me if I'm wrong). Hopefully they at least released it as a standard, so vendor lock-in won't happen. However, Microsoft could change mind any time.</p></li>
<li><p>Most Microsoft Word documents are text documents. But they are not readable and editable at all with text editors (in principle you could read and edit XML, but seriously, who would bother to do that). <strong>So why Microsoft Office when plain text is nice, elegant, efficient, fast, and free?</strong> Even when you need some formatting, there are Markdown and other plain text, human readble, and open source formats. I really hate it when people send me docx or ask me to send docx. Why assume I have the crap proprietary software installed? You could at least save as PDF before sending to me.</p>
<p>(PDF is another story. It started as proprietary, but was released free of charge a long time ago, and has since been made an open standard. There are a good number of great open source PDF generators, PDFLaTeX being one notable example. And after all, PDF and PostScript are intended for printers &#8212; they are not so easily made human readable without an interpreter, so using a proprietary format in this setting is reasonable.)</p>
<p>You might argue that docx can be edited with LibreOffice, OpenOffice, etc. However, first of all, documents created by Microsoft Office are not always (always not) rendered the same in these Offices; 100% compatibility has never been achieved. If you choose to work with Microsoft Office documents, you either be cheap and worry about lock-out/lock-in/damage/permanent damage (people who love Microsoft Office are often not competent enough to do back-up right), or throw your money at Microsoft. And point is: <strong>plain text is both free and reliable in the first place.</strong></p></li>
<li><p>Microsoft could change their pricing model at any time, just as Adobe did to their Creative Suite. They've already been exploring the subscription model via Office 365 for a while, which is $99.99 a year (home). In the future, Office might turn to subscription only, meaning that you would never have a full copy of your (already crappy) software that is guaranteed to work regardless of time, and that they could raise the subcription price at any time and drive you nuts instantly. (Microsoft recently released Office on iPad, which is already subscription only. Watch out for the trend.)</p></li>
<li><p>Forgot to highlight one major annoyance. As you already know, I hate Microsoft Office; however, as mentioned in 4, I'm forced to keep the crap installed and occasionally launch it (which takes something around ten minutes just to launch) thanks to other people who insist on Microsoft Office. Every single launch deepens the hatred.</p></li>
<li><p>(<em>05/04/2014</em> update) Apart from storage, transmission, and distribution, Microsoft Office &#8212; and word processors in general &#8212; are also bad for <em>writing</em>. To quote the <a href="http://asciidoctor.org/docs/what-is-asciidoc/">AsciiDoc official introduction</a>, the "Word processors, the real writer&#8217;s block" section,</p>
<blockquote>
<p>When you are in the writing (i.e., <a href="http://blog.stoyanstefanov.com/writing-vs-typing/">typing</a>) phase, you want the words to flow onto the screen with minimal distractions and interruptions. Flow, not just time, is essential.</p>
<p>Most word processor excel at distracting you from writing. The result: <em>you write less</em> (ironic, huh?).</p>
<p>In a word processor, before you can type the first word on a blank screen, you're forced to think about what font family you want, what font size you want, what lines spacing you want and so on. Once you do get going, auto-correct, spelling and grammar suggestions entice you to backtrack and lose your next thought. "Smart" quotes and auto-linking messes with the text as fast as you can enter it. If you paste text, it likely gets added to the document with a different font family, size and even color.</p>
<p><strong>Undo. Undo. Undo!</strong></p>
<p>Let's not even talk about inserting source code. The designers of word processors clearly did not.</p>
<p><strong>Format. Format. Format!</strong></p>
<p>After burning time fighting with its interface, you rightfully conclude that the word processor is trying to <em>sabotage</em> your writing process.</p>
<p><strong>We <em>need</em> an easier way to write!</strong></p>
<p>But how?</p>
</blockquote>
<p>It's kind of ironic to quote AsciiDoc in a document promoting Markdown, but at the very least, we are all against Word. This section is so well written that I can't resist the temptation to quote it out in full. Moreover, I actually typed it in myself to enjoy it to the fullest.</p></li>
<li><p>(<em>05/04/2014</em> update) By the way, there is more to quote against docx (and XML in general), this time from Linus Torvalds, in a <a href="https://plus.google.com/+LinusTorvalds/posts/X2XVf9Q7MfV">Google+ comment</a>:</p>
<blockquote>
<p>no [sic], XML isn't even good for document markup.</p>
<p>Use 'asciidoc' for document markup. Really. It's actually <strong>readable</strong> by humans, and easier to parse and way more flexible than XML.</p>
<p>XML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it's a disaster to parse even for computers. There's just no reason for that horrible crap to exist.</p>
</blockquote>
<p>If you don't believe in me, you certainly believe in Linus don't you, who is much better at this art than you and me. If you don't even believe in Linus, you are not my reader in mind anyway.</p></li>
<li><p>There are infinitely many other reasons to hate Microsoft Office, <strong>which grabs money from the most basic workflow &#8212; text editing</strong>. The reasons to hate Microsoft Office occur infinitely often in the decimal expansion of &#960;.</p></li>
</ol>
</blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Bold by me.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>That's not even new; PSD viewing and diffing support has been around <a href="https://github.com/blog/1845-psd-viewing-diffing">for a year</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>At least compared to Bugzilla, Trac, (the user-facing part of) Jira and FogBugz, SourceForge, Google Code (now closed), BitBucket, Savannah, GitLab, etc.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>Whether a file is plain text or binary is usually easy to check. Just look for the <code>NUL</code> character (<code>\000</code>).<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref4">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html</guid><pubDate>Mon, 20 Jul 2015 04:58:01 GMT</pubDate></item><item><title>Zsh: save stdout, stderr, and return value of command to different variables (without temp file)</title><link>http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html</link><description><![CDATA[

<p>This is something worth sharing. The idea was based on <a href="http://stackoverflow.com/a/18086548/1944784">this SO answer</a>, and I cooked up this particular implementation to remove potential race conditions, with input from Mathias Fredriksson<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html#fn1" id="fnref1"><sup>1</sup></a>. See <a href="https://github.com/mafredri/zsh-async/issues/1">mafredri/zsh-async#1</a>, and in particular <a href="https://github.com/mafredri/zsh-async/issues/1#issuecomment-121468958">this comment</a> for explanation.</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># The following construct evaluates "$@" and saves output on stdout in the</span>
<span class="co"># parameter stdout, output on stderr in the parameter stderr, and return value</span>
<span class="co"># in the parameter return.</span>
<span class="co">#</span>
<span class="co"># The idea was based on http://stackoverflow.com/a/18086548/1944784, but this</span>
<span class="co"># implementation is completely race-condition-free. The implementation was</span>
<span class="co"># refined during my exchange with Mathias Fredriksson @mafredri, in</span>
<span class="co"># https://github.com/mafredri/zsh-async/issues/1. See mainly</span>
<span class="co"># https://github.com/mafredri/zsh-async/issues/1#issuecomment-121468958, where</span>
<span class="co"># the advantage of this implementation is explained.</span>

<span class="kw">unset</span> stdout stderr ret
<span class="kw">eval</span> <span class="st">"</span>
<span class="ot">$(</span>
    <span class="kw">{</span>
        <span class="ot">stdout=$(</span><span class="kw">eval</span> <span class="st">"</span><span class="ot">$@</span><span class="st">"</span><span class="ot">)</span>
        <span class="ot">ret=$?</span>
        <span class="kw">typeset</span> -p <span class="ot">stdout</span> <span class="ot">ret</span>
    <span class="kw">}</span> <span class="kw">2&gt;</span> <span class="kw">&gt;(</span><span class="ot">stderr=$(</span><span class="kw">cat</span><span class="ot">)</span>; <span class="kw">typeset</span> -p <span class="ot">stderr</span><span class="kw">)</span>
<span class="ot">)</span><span class="st">"</span></code></pre></div>
<p>Also available as <a href="https://gist.github.com/zmwangx/efababea6258cedea07a">a gist</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Mathias (<a href="https://github.com/mafredri">@mafredri</a>) is the author of the lovely <a href="https://github.com/mafredri/zsh-async">zsh-async</a> library, and a maintainer of <a href="https://github.com/sindresorhus/pure">sindresorhus/pure</a>. He forever revolutionalized <a href="https://github.com/zmwangx/prezto/blob/master/modules/prompt/functions/prompt_zmwangx_setup">my prompt</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html</guid><pubDate>Wed, 15 Jul 2015 16:21:47 GMT</pubDate></item><item><title>dl? cmplnts? in Apple News</title><link>http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html</link><description><![CDATA[

<p>I submitted this blog to Apple via <a href="https://developer.apple.com/news-publisher/">News Publisher</a> a few days after the WWDC keynote, just to get a feel for the submission process. It was easy; basically I just needed to provide an <a href="http://zmwangx.github.io/atom.xml">Atom 1.0</a> or <a href="http://zmwangx.github.io/rss.xml">RSS 2.0</a> feed, both of which I already have anyway.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fn1" id="fnref1"><sup>1</sup></a> I was told at the end of the submission process that my submission would be reviewed.</p>
<p>Just now, quite surprisingly, I got the acceptance email from News Publisher:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150629-news-publisher-acceptance-email.png" target="_blank"><img alt="Acceptance email from News Publisher." src="http://zmwangx.github.io/img/20150629-news-publisher-acceptance-email.png"/></a>
<p class="caption">Acceptance email from News Publisher.</p>
</div>
<p>The link to my channel appears to be</p>
<blockquote>
<p><a class="uri" href="https://news.apple.com/TdEf82WUNSQeNOsvYyyu48Q">https://news.apple.com/TdEf82WUNSQeNOsvYyyu48Q</a></p>
</blockquote>
<p>But at the time of writing, trying to open this page just turns up a "sorry, this item isn't available in Apple News". Not sure if the page hasn't been updated, or if I really need an iOS 9 device to access. My current guess is the former &#8212; there's no reason Apple won't provide a channel preview in good ol' HTML.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fn2" id="fnref2"><sup>2</sup></a> I don't have an iOS 9 device yet, so I don't know how well my content, especially preformatted code blocks, will fare in News. Either way I won't adjust my content, but it would be fun to see the capabilities of Apple's official "RSS reader".</p>
<hr/>
<p><em>June 30, 2015 update:</em> The page has been updated, and now the message makes much more sense:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150630-dl-cmplnts-on-apple-news.png" target="_blank"><img alt="Apple News is coming soon. This channel or topic is only available in Apple News." src="http://zmwangx.github.io/img/20150630-dl-cmplnts-on-apple-news.png"/></a>
<p class="caption">Apple News is coming soon. This channel or topic is only available in Apple News.</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Of course my content isn't really optimized for the Apple News format, but why would I care.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Or maybe they will only open up regular browser traffic after iOS 9 stable is released.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html</guid><pubDate>Tue, 30 Jun 2015 06:14:42 GMT</pubDate></item><item><title>Automatically clean up "Previous Mobile Applications"</title><link>http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html</link><description><![CDATA[

<p>iTunes keeps a "Previous Mobile Applications" folder of questionable value, which always annoys me. It eats into disk space and wastes syncing/backup cycles and bandwidth; you can easily find horror stories online about <a href="http://forums.macrumors.com/threads/5-years-of-deleted-iphone-apps-accumulated-in-my-itunes-library.1781676/#post-19749496">100GB+ PMA folders</a>. The value? You might be able to roll back to an earlier version, or restore an app pulled from the App Store. Really? I never had that need in my life<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html#fn1" id="fnref1"><sup>1</sup></a>; have you? Worst of all, there should be a periodic clean up option &#8212; just like how deleted mail are automatically purged after one month, but the option is missing.</p>
<p>Therefore, I wrote a trivial Python script to do the periodic cleanup. Feel free to grab my script below (also available at <a class="uri" href="http://git.io/previous-mobile-applications">http://git.io/previous-mobile-applications</a>) to save a few minutes of hacking. It should be plugged into a daily or weekly or monthly cron job (or the equivalent), and it writes data to <code>~/.local/share/itunes/previous-mobile-applications.json</code> by default. To customize, just modify the global constants.</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="co">"""Periodically clean up "Previous Mobile Applications" of iTunes."""</span>

<span class="im">import</span> arrow
<span class="im">import</span> datetime
<span class="im">import</span> json
<span class="im">import</span> os
<span class="im">import</span> sys

OFFENDING_DIR <span class="op">=</span> os.path.expanduser(<span class="st">"~/Music/iTunes/iTunes Media/Mobile Applications/Previous Mobile Applications"</span>)
STORAGE_DIR <span class="op">=</span> os.path.expanduser(<span class="st">"~/.local/share/itunes"</span>)
STORAGE_FILE <span class="op">=</span> os.path.join(STORAGE_DIR, <span class="st">"previous-mobile-applications.json"</span>)

DELETE_AFTER <span class="op">=</span> datetime.timedelta(days<span class="op">=</span><span class="dv">7</span>)

<span class="kw">def</span> load_storage():
    <span class="co">"""Load stored dictionary of seen apps from STORAGE_FILE.</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    seen_app_dict : dict</span>
<span class="co">        Dictionary of (app_filename, first_seen_date) key-value pairs,</span>
<span class="co">        where app_filename is str, and last_seen_date is datetime.date.</span>

<span class="co">    """</span>
    os.makedirs(STORAGE_DIR, mode<span class="op">=</span><span class="bn">0o700</span>, exist_ok<span class="op">=</span><span class="va">True</span>)
    <span class="cf">try</span>:
        <span class="cf">with</span> <span class="bu">open</span>(STORAGE_FILE, encoding<span class="op">=</span><span class="st">"utf-8"</span>) <span class="im">as</span> fp:
            serializable_seen_app_dict <span class="op">=</span> json.load(fp)
            <span class="cf">return</span> {app_filename: arrow.get(serialized_first_seen_date).date()
                    <span class="cf">for</span> app_filename, serialized_first_seen_date <span class="op">in</span> serializable_seen_app_dict.items()}
    <span class="cf">except</span> <span class="pp">OSError</span>:
        <span class="cf">return</span> {}

<span class="kw">def</span> write_storage(seen_app_dict):
    <span class="co">"""Write the dictionary of seen apps to STORAGE_FILE.</span>

<span class="co">    Parameters</span>
<span class="co">    ----------</span>
<span class="co">    seen_app_dict : dict</span>
<span class="co">        See the return format of load_storage().</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    0 or 1</span>
<span class="co">        Return code indicating success or failure.</span>

<span class="co">    """</span>
    <span class="co"># convert datetime.time to str (ISO 8601)</span>
    serializable_seen_app_dict <span class="op">=</span> {app_filename: first_seen_date.isoformat()
                                  <span class="cf">for</span> app_filename, first_seen_date <span class="op">in</span> seen_app_dict.items()}
    os.makedirs(STORAGE_DIR, mode<span class="op">=</span><span class="bn">0o700</span>, exist_ok<span class="op">=</span><span class="va">True</span>)
    <span class="cf">try</span>:
        <span class="cf">with</span> <span class="bu">open</span>(STORAGE_FILE, mode<span class="op">=</span><span class="st">"w"</span>, encoding<span class="op">=</span><span class="st">"utf-8"</span>) <span class="im">as</span> fp:
            json.dump(serializable_seen_app_dict, fp, indent<span class="op">=</span><span class="dv">2</span>, sort_keys<span class="op">=</span><span class="va">True</span>)
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> <span class="pp">OSError</span> <span class="im">as</span> err:
        sys.stderr.write(<span class="st">"error: failed to write to '</span><span class="sc">%s</span><span class="st">': </span><span class="sc">%s</span><span class="st">"</span> <span class="op">%</span> (STORAGE_FILE, <span class="bu">str</span>(err)))
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> main():
    <span class="co">"""Main.</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    0 or 1</span>
<span class="co">        Return code indicating success or failure.</span>

<span class="co">    """</span>
    <span class="cf">if</span> <span class="op">not</span> os.path.isdir(OFFENDING_DIR):
        <span class="co"># good, you don't have that junk</span>
        <span class="cf">return</span> <span class="dv">0</span>

    today <span class="op">=</span> datetime.date.today()
    seen_app_dict <span class="op">=</span> load_storage()
    current_app_list <span class="op">=</span> os.listdir(OFFENDING_DIR)

    <span class="co"># boot already disappeared apps</span>
    <span class="cf">for</span> app <span class="op">in</span> [app <span class="cf">for</span> app <span class="op">in</span> seen_app_dict <span class="cf">if</span> app <span class="op">not</span> <span class="op">in</span> current_app_list]:
        seen_app_dict.pop(app)

    <span class="co"># add newly appeared apps</span>
    <span class="cf">for</span> app <span class="op">in</span> [app <span class="cf">for</span> app <span class="op">in</span> current_app_list <span class="cf">if</span> app <span class="op">not</span> <span class="op">in</span> seen_app_dict]:
        seen_app_dict[app] <span class="op">=</span> today

    <span class="co"># delete expired apps</span>
    returncode <span class="op">=</span> <span class="dv">0</span>
    newly_deleted_apps <span class="op">=</span> []
    <span class="cf">for</span> app <span class="op">in</span> seen_app_dict:
        <span class="cf">if</span> today <span class="op">&gt;=</span> seen_app_dict[app] <span class="op">+</span> DELETE_AFTER:
            app_path <span class="op">=</span> os.path.join(OFFENDING_DIR, app)
            <span class="cf">try</span>:
                os.remove(app_path)
                newly_deleted_apps.append(app)
            <span class="cf">except</span> <span class="pp">OSError</span> <span class="im">as</span> err:
                sys.stderr.write(<span class="st">"error: failed to remove '</span><span class="sc">%s</span><span class="st">': </span><span class="sc">%s</span><span class="st">"</span> <span class="op">%</span> (app_path, <span class="bu">str</span>(err)))
                returncode <span class="op">=</span> <span class="dv">1</span>

    <span class="cf">for</span> app <span class="op">in</span> newly_deleted_apps:
        seen_app_dict.pop(app)

    <span class="co"># write data to disk</span>
    returncode <span class="op">|=</span> write_storage(seen_app_dict)

    <span class="cf">return</span> returncode

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:
    exit(main())</code></pre></div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Full disclosure: unlike many people, I'm not very obsessed with my phone, and I only have about two dozen third-party apps.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html</guid><pubDate>Sun, 28 Jun 2015 04:19:59 GMT</pubDate></item><item><title>iOS 9: searchable Settings</title><link>http://zmwangx.github.io/blog/2015-06-26-ios-9-searchable-settings.html</link><description><![CDATA[

<p>Finally it's here. According to <a href="http://www.macrumors.com/2015/06/26/hidden-features-in-ios-9-and-os-x-el-capitan/">MacRumors</a>:</p>
<blockquote>
<p>Apple's introduced a wide range of feature additions and minor tweaks in iOS 9 that make some very useful improvements to iOS. For example, there's now a Notification Center widget that displays the battery life of connected devices like the Apple Watch, and <strong>there's a search bar in the Settings app that lets you find a specific setting very quickly.</strong></p>
</blockquote>
<p>Good to see <a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html">my wish</a> granted.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150627-macrumors-demo-ios9-searchable-settings.png" target="_blank"><img alt="A screenshot of iOS 9 Settings in action." src="http://zmwangx.github.io/img/20150627-macrumors-demo-ios9-searchable-settings.png"/></a>
<p class="caption">A screenshot of iOS 9 Settings in action.</p>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-26-ios-9-searchable-settings.html</guid><pubDate>Sat, 27 Jun 2015 06:59:28 GMT</pubDate></item><item><title>All problems solved!?</title><link>http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html</link><description><![CDATA[

<p>The project I've been working on intermittently over the past month, <a href="https://github.com/zmwangx/pyonedrive"><code>pyonedrive</code></a>, a OneDrive API v1.0 API/CLI client, is now quite satisfactory in terms of its feature set<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn1" id="fnref1"><sup>1</sup></a>, so today I'm thinking about what I should work on next. Of course there's <a href="https://github.com/zmwangx/pyonedrive/labels/enhancement">a lot more I can do</a>, but what is done already encapsulates 95%+ of my daily usage; moreover, as everyone knows, refining an existing project is not as exciting as starting a new one and making something happen that is previously tedious or impossible.</p>
<p>To my surprise, <em>I can't think of anything</em>. I now realized that I don't have many peculiar computing needs. I needed a storyboard generator which I couldn't find anywhere, <a href="https://github.com/zmwangx/storyboard">so I wrote one</a>, and got an <a href="https://storyboard.readthedocs.org/en/latest/metadata-cli.html">elegant FFprobe wrapper</a> for free. I hated the crappy CLI shipped with <a href="https://github.com/mk-fg/python-onedrive"><code>python-onedrive</code></a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn2" id="fnref2"><sup>2</sup></a> that constantly fails and dumps, so I <a href="https://github.com/zmwangx/pyonedrive">rolled my own</a> around the new API. In the process of coding up these two things, I learned quite a bit of Python &#8212; the kind of things I would never learn by reading tutorials or references alone. Other than these two, I need to interact with a few Web services and scrape a few Web sites, which are easily taken care of in bash/zsh/python (node might better serve some, but they ain't broke, so why rewrite). I also need some other CLI tools but those have been solved by existing projects, probably started by people with similar needs. Some of them need some clean-up and feature boost, e.g., <a href="https://github.com/soimort/you-get"><code>you-get</code></a>, but I'm not inclined to refactor or submit substantial PRs to other people's projects, so I usually just write my own wrappers to bypass their limitations.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn3" id="fnref3"><sup>3</sup></a> What else? Basically nothing.</p>
<p>So I'm in a strange situation that I feel like writing software for fun and profit, but don't have anything exciting to lay my hands upon (other than improving existing things). Of course I could learn my next language, but language learning without real world usage is likely to be futile. For instance, I would like to learn some Go or Rust, but why do I need a compiled, C/C++ replacement these days, when scripting takes care of all my personal needs? Not clear. Maybe it's a good time to concentrate on the real important things in my career.</p>
<hr/>
<p>Update: Whilst writing this post, I came up with a project after all. I always had the idea of keeping an encrypted journal &#8212; real encryption, not the fake "password protection" of DayOne.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn4" id="fnref4"><sup>4</sup></a> The journal should be decrypted &#8212; probably only into memory &#8212; upon entry (after securely typing in password), and each text/image object should be encrypted separately to ease syncing (so using an encrypted sparseimage won't work).</p>
<p>In principle an Emacs package should be able to do this, but going forward Elisp is a pretty horrible choice of language for anything substantial (think of, for example, threading, which there is none). Therefore, I'm inclined to write this in ObjC/Swift with Cocoa. This will be my first attempt at Cocoa programming, and my first serious involvement with Xcode (other than CLT, of course) after quite a few years<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn5" id="fnref5"><sup>5</sup></a>. Actually I've always been looking for an excuse to learn some Swift.</p>
<p>Oops, am I falling into <a href="https://sivers.org/zipit">prematurely announcing my plans</a>? Hopefully not.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In fact it already exceeded my original expectations &#8212; <code>pyonedrive</code> started out as a <a href="https://github.com/zmwangx/pyonedrive/blob/4d21308545ec1462c3892b9ca25300042f1ccb81/README.rst">bare bones batch uploader</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>I never bothered to look at the API.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>E.g., for <code>you-get</code>, I wrote a wrapper with concurrency support and much more surrounding <code>you-get</code>'s <code>--url</code> option. (But honestly, for whatever reason, links provided by <code>flvcd.com</code> for Chinese video streaming sites are much better than those parsed by <code>you-get</code> in terms of download speed, so these days I almost use <code>flvcd.com</code>'s <code>BigRats</code> exclusively, except when it similarly can't pick up a reasonable speed, in which case I would grind with my <code>you-get</code> wrapper, which was designed exactly for grinding.)<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>And DayOne's Markdown engine sucks, among other limitations, like the ridiculous one-image-per-entry.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>I used to use Xcode as a C++ IDE before I was introduced to the brave new world of command line wizardry.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref5">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html</guid><pubDate>Wed, 24 Jun 2015 04:47:07 GMT</pubDate></item></channel></rss>
