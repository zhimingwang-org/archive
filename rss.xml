<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><atom:link href="http://zmwangx.github.io/rss.xml" rel="self" type="application/rss+xml"/><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><description>Zhiming Wang's personal blog</description><language>en-us</language><managingEditor>zmwangx@gmail.com (Zhiming Wang)</managingEditor><webMaster>zmwangx@gmail.com (Zhiming Wang)</webMaster><pubDate>Thu, 14 Jan 2016 09:27:03 GMT</pubDate><lastBuildDate>Thu, 14 Jan 2016 09:27:03 GMT</lastBuildDate><generator>pyblog (https://github.com/zmwangx/zmwangx.github.io)</generator><docs>https://validator.w3.org/feed/docs/rss2.html</docs><image><url>http://zmwangx.github.io/img/icon-100.png</url><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><width>100</width><height>100</height></image><item><title>The dirtiest mistakes of OS X</title><link>http://zmwangx.github.io/blog/2016-01-14-the-dirtiest-mistakes-of-os-x.html</link><description><![CDATA[

<p>I must have written about this elsewhere, but here are my top three:</p>
<ol style="list-style-type: decimal">
<li><p><code>.DS_Store</code>. Finder litters faster than one could clean up.</p></li>
<li><p>HFS+ NFD*.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2016-01-14-the-dirtiest-mistakes-of-os-x.html#fn1" id="fnref1"><sup>1</sup></a> Heard of the cursed encoding <code>UTF8-MAC</code>? Pure Evil. Culprit of tons of garbled text issues (especially cross platform ones) and probably most length miscalculation issues. Even Apple's Terminal.app can't do NFD right. I wonder how Korean users navigate their filesystems in terminal.</p></li>
<li><p>Plist XML. It's XML, but even worse.</p></li>
</ol>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>NFD with an asterisk, i.e., not even NFD. According to Apple in <a href="https://developer.apple.com/library/mac/qa/qa1173/_index.html">an old Technical Q&amp;A</a>,</p>
<blockquote>
<p>The terms used in this Q&amp;A, precomposed and decomposed, roughly correspond to Unicode Normal Forms C and D, respectively. However, most volume formats do not follow the exact specification for these normal forms. For example, HFS Plus (Mac OS Extended) uses a variant of Normal Form D in which U+2000 through U+2FFF, U+F900 through U+FAFF, and U+2F800 through U+2FAFF are not decomposed (this avoids problems with round trip conversions from old Mac text encodings). It's likely that your volume format has similar oddities.</p>
</blockquote>
<p>They are conscious enough to call these oddities.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2016-01-14-the-dirtiest-mistakes-of-os-x.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2016-01-14-the-dirtiest-mistakes-of-os-x.html</guid><pubDate>Thu, 14 Jan 2016 09:02:52 GMT</pubDate></item><item><title>Virtualenvs for everyone</title><link>http://zmwangx.github.io/blog/2016-01-01-virtualenvs-for-everyone.html</link><description><![CDATA[

<p>Python distutils for the most part is rather pleasant to work with. That is, pleasant until you've accumulated so many packages that you eventually run into a clash of namespace, or a dependency conflict (or dependency hell as most would affectionately call it).<a class="footnoteRef" href="http://zmwangx.github.io/blog/2016-01-01-virtualenvs-for-everyone.html#fn1" id="fnref1"><sup>1</sup></a> In contrast, npm's approach to dependencies shuts out dependency hell completely, but it is so paranoid and costs so much duplication that I find it hard to appreciate unless necessary. Somewhere in between there's the virtualenv approach which I find most appealing for smallish projects &#8212; keep a single copy of each package in the dependency tree in a contained environment specific to the project at hand. This is how we debug Python projects, and it certainly also should be <em>the</em> way we run command line tools written in Python.</p>
<p>There's another reason I like virtualenvs. There are tons of problems associated with choosing between Python 2 and 3 &#8212; some projects are Python 2 only, some are instead Python 3, some claim to be compatible with both but actually present subtle problems when you use one instead of the other. However, without virtualenvs, there's only one <code>bin</code> &#8212; <code>/usr/local/bin</code> &#8212; and everything's competing for it. Most programs (especially ones with a typical <code>setup.py</code>) don't install a soft/hardlink with a helpful <code>2</code> or <code>3</code> suffix when installing executables, let alone detailed suffixes like <code>2.7</code> or <code>3.5</code>, so without probing into the shebangs you're never sure which version of Python you're running your program with, and as a result Python 2/3 (or even a point release)-specific bugs occur randomly. Virtualenvs solve the problem by allowing you to have as many bins (and includes, and libs) as you like.</p>
<p>Hence the title "virtualenvs for everyone". I would like to install each command line program written in Python into a separate virtualenv. The only issue is that apparently I don't want too many bins in my <code>$PATH</code>; to solve this issue, the executable bits of each project should be linked to a central place, for which I choose <code>$HOME/bin</code>. There could be as many symlinks as we like, so now we can have multiple links with increasing detailed version suffixes, e.g., <code>3</code>, <code>3.5</code>, <code>3.5.1</code>. Very nice.</p>
<p>This task could clearly be automated; the only slightly tricky bit is to programmatically figure out which scripts a project installs to <code>bin</code>. Luckily, for projects using <code>setuptools.setup</code>, we can simply spoof that function. Here's my <code>setuptools/__init__.py</code>:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="co">"""setuptools stubs.</span>

<span class="co">Here we only stubbed the symbols in setuptools.__all__. Hopefully that's</span>
<span class="co">enough (actually I can't remember seeing any setup.py using more than</span>
<span class="co">setup and find_packages).</span>

<span class="co">setup has been spoofed to print the names of scripts, console_scripts</span>
<span class="co">and gui_scripts defined in the arguments to setup. Some user-friendly</span>
<span class="co">messages are also printed to stderr.</span>

<span class="co">"""</span>

<span class="im">from</span> __future__ <span class="im">import</span> print_function

<span class="im">import</span> re
<span class="im">import</span> sys
<span class="im">import</span> os

__all__ <span class="op">=</span> [
    <span class="st">'setup'</span>, <span class="st">'Distribution'</span>, <span class="st">'Feature'</span>, <span class="st">'Command'</span>, <span class="st">'Extension'</span>, <span class="st">'Require'</span>,
    <span class="co">'find_packages'</span>
]

<span class="kw">def</span> setup(<span class="op">**</span>kwargs):
    scripts <span class="op">=</span> [os.path.basename(script_path)
               <span class="cf">for</span> script_path <span class="op">in</span> kwargs.pop(<span class="st">'scripts'</span>, [])]
    <span class="cf">if</span> scripts:
        <span class="bu">print</span>(<span class="st">'scripts:</span><span class="ch">\n</span><span class="st">  - </span><span class="sc">%s</span><span class="st">'</span> <span class="op">%</span> <span class="st">'</span><span class="ch">\n</span><span class="st">  - '</span>.join(scripts), <span class="bu">file</span><span class="op">=</span>sys.stderr)
    entry_points <span class="op">=</span> kwargs.pop(<span class="st">'entry_points'</span>, {})
    <span class="cf">for</span> entry_point <span class="op">in</span> [<span class="st">'console_scripts'</span>, <span class="st">'gui_scripts'</span>]:
        extra_scripts <span class="op">=</span> [re.split(<span class="st">'(\s|=)'</span>, spec.strip())[<span class="dv">0</span>]
                         <span class="cf">for</span> spec <span class="op">in</span> entry_points.pop(entry_point, [])]
        <span class="cf">if</span> extra_scripts:
            <span class="bu">print</span>(<span class="st">'</span><span class="sc">%s</span><span class="st">:</span><span class="ch">\n</span><span class="st">  - </span><span class="sc">%s</span><span class="st">'</span> <span class="op">%</span> (entry_point, <span class="st">'</span><span class="ch">\n</span><span class="st">  - '</span>.join(extra_scripts)),
                  <span class="bu">file</span><span class="op">=</span>sys.stderr)
        scripts.extend(extra_scripts)
    <span class="bu">print</span>(<span class="st">'</span><span class="ch">\n</span><span class="st">'</span>.join(<span class="bu">sorted</span>(scripts)))

<span class="kw">class</span> Distribution(<span class="bu">object</span>): <span class="cf">pass</span>
<span class="kw">class</span> Feature(<span class="bu">object</span>): <span class="cf">pass</span>
<span class="kw">class</span> Command(<span class="bu">object</span>): <span class="cf">pass</span>
<span class="kw">class</span> Extension(<span class="bu">object</span>): <span class="cf">pass</span>
<span class="kw">class</span> Require(<span class="bu">object</span>): <span class="cf">pass</span>
<span class="kw">def</span> find_packages(<span class="op">**</span>kwargs): <span class="cf">pass</span></code></pre></div>
<p>Now, let <code>$HERE</code> be the directory containing our fake <code>setuptools/</code>, and <code>$PROJECT_ROOT</code> be the project root directory containing <code>setup.py</code>. Run</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="ot">PYTHONPATH=$HERE</span>:<span class="ot">$PYTHONPATH</span> python <span class="ot">$PROJECT_ROOT</span>/setup.py</code></pre></div>
<p>and bam! We get the names of all scripts on stdout.</p>
<p>My full automation scripts, including the Zsh main function <code>virtual-install</code>, can be found in <a href="https://github.com/zmwangx/prezto/tree/master/modules/python/functions"><code>modules/python/functions</code> in zmwangx/prezto</a>. I'm not including it here because it uses some custom helper, and it's just too long (200+ lines, but not very sophisticated). Happy virtualenving!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In rare cases, even installing a single package could land you in trouble. The classical example is installing the <code>readme</code> package on a case-insensitive filesystem (e.g., the default mode of HFS+). "Unfortunately" <a href="https://bugs.python.org/issue24633">this</a> has been fixed.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2016-01-01-virtualenvs-for-everyone.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2016-01-01-virtualenvs-for-everyone.html</guid><pubDate>Sat, 02 Jan 2016 06:21:14 GMT</pubDate></item><item><title>Catches when installing Windows 7 with Boot Camp</title><link>http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html</link><description><![CDATA[

<p>I was looking for a use for my retired Mid-2012 Non-Retina MacBook Pro 13''<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fn1" id="fnref1"><sup>1</sup></a>, and unsurprisingly I figured that I would turn it into a OS X-Windows dual boot for some occasional gaming. I'm a CnC fan (not hardcore, but still), mainly for RA2/YR and TW/KW, and playing these inside Fusion is really a subsubpar experience. Due to the age of these games and their compatibility problems on Windows 8 and higher<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fn2" id="fnref2"><sup>2</sup></a>, I chose to shoot for a Windows 7 install.</p>
<p>Apple has a pretty thorough walkthrough in the support article <a href="https://support.apple.com/en-us/HT205016">Install Windows 7 and earlier on your Mac using Boot Camp</a>. There are, however, some catches that I would like to collect and share in this post.</p>
<ol style="list-style-type: decimal">
<li><p>Win 7 ISO isn't available for download in the appropriate language (given your product key). This one sounds incredibly stupid... But it is a real problem at least for me and several others (just Google). I have a valid Win 7 Ultimate license from my institution, so I went to <a class="uri" href="https://www.microsoft.com/en-us/software-download/windows7">https://www.microsoft.com/en-us/software-download/windows7</a> to grab my ISO (just for fun; I already have the image). However, after verifying my product key, here's the list of languages that I'm asked to choose from, where English is apparently missing (!!!):</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151229-win7-iso-language-choice.png" target="_blank"><img alt="da !@#$?" src="http://zmwangx.github.io/img/20151229-win7-iso-language-choice.png" width="394"/></a>
<p class="caption">da !@#$?</p>
</div>
<p>I don't know the solution to this problem. In my case I've archived English Win 7 Ultimate SP1 images (both x86 and x64) before, so I just proceeded with my old image.</p></li>
<li><p>FileVault. It is my belief that FileVault needs to turned off before partitioning the drive with Boot Camp.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fn3" id="fnref3"><sup>3</sup></a></p></li>
<li><p><em>An error occured while partitioning the disk.</em> That's the unhelpful message from Boot Camp. If you try to manually partition the drive with Disk Utility, you'll probably get a much more helpful message like <em>Partition failed with the error: couldn't modify partition map because file system verification failed</em>. Now the problem is obvious, and the solution is simple. Boot to single user mode and repair the filesystem with <code>/sbin/fsck -fy</code>, or safer, <code>/sbin/fsck -f</code> which might require interaction.</p></li>
<li><p>During Windows installation you'll obviously be prompted to choose a system partition at some point, and due to Boot Camp only formatting to FAT32, you'll get the message <em>Windows cannot be installed to this hard disk space. Windows must be installed to a partition formatted as NTFS.</em> This one is easy, just click "Drive options (advanced)" then "Format", which automatically formats the partition to NTFS. This is actually documented in Apple's walkthrough, but mortals do panic in face of error messages, so let's also note it here.</p></li>
<li><p>Even after formatting the Boot Camp partition, it is still possible to get the error <em>Setup was unable to create a new system partition or locate an existing system partition</em>. It this happens, check if you have any USB drives (other than the installation media) plugged in. In my case my Time Capsule was plugged in, and rebooting with it unplugged fixed the problem. The exact cause of the problem is unclear to me. Some say it's due to Master Boot Record limiting the number of partitions to four, but why the heck is my external drive counted towards that limitation? I'd go for Win 7 installer is just confused. Anyway, just unplug anything that's not needed during Windows installation.</p></li>
</ol>
<p>Hopefully you're good after solving the aforementioned problems. If you followed Apple's walkthrough correctly, Boot Camp's setup.exe will be invoked automatically immediately after Windows finishes installation, and after a certain number of reboots your drivers will be up and running. Now you're ready to take control of your Windows. Install Chrome<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fn4" id="fnref4"><sup>4</sup></a> and Microsoft Security Essentials immediately, then hop right into the Windows Update hell to patch your four-year-old system. Of course, Windows Update being Windows Update won't be smooth &#8212; servers will be crowded as ever and just checking for updates will likely take forever, let alone downloads. After a semi-infinite amount of time you'll get your estimates (I got 212 updates). Click update and let Windows Update grind for hours. And wish yourself a good luck (that no update errors will occur &#8212; luckily I didn't get any).</p>
<p>By the way, the otherwise great Apple trackpad is almost unusable on Boot Camp Windows under any setting. I'm forced to use a mouse.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>2.9 GHz i7 + Intel HD Graphics 4000 + 16 GB RAM + frigging slow 750 GB 5400-rpm spinning disk I've yet to replace.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>RA2/YR used to have problems even on Windows 7, at least inside Fusion, so I used to play them in XP SP3 VMs; I've yet to try them with Windows 7 running on bare metal.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I'm not completely sure that this is necessary. I was greeted with partitioning errors initially which I thought was due to FileVault, so I switched it off (the actual process is much longer than "switching it off", since the whole disk has to be decrypted and rewritten), but as you'll see later, the partitioning errors were at least partly due to a slightly corrupt filesystem.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>You can't even browse Microsoft's own websites with stock IE8. And IE11 is locked behind a hell lot of Windows Updates (even then it is crap). Doing Windows Update is like building up a tech tree.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html#fnref4">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-29-catches-when-installing-windows-7-with-boot-camp.html</guid><pubDate>Tue, 29 Dec 2015 23:09:16 GMT</pubDate></item><item><title>Why I want lossless music on iTunes Music Store</title><link>http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html</link><description><![CDATA[

<p>This is an impulse post after reading <a href="https://marco.org/2015/12/27/apple-hd-audio-again">"Apple again rumored to be working on high-resolution audio"</a>.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fn1" id="fnref1"><sup>1</sup></a></p>
<p>To be clear, I'm no audiophile. I can't tell the difference between 256kbps AAC and lossless (maybe not even the difference between 128k and 256k), and my midrange to lower midrange equipments probably won't let me tell anyway. I'm certainly not a consumer of snake oil.</p>
<p>However, I still prefer to get everything in lossless, simply because <strong>"good enough" today is almost never good enough tomorrow</strong>. Fifty years later I'm most likely still wandering this planet, I and my music collection. I would be extremely regretful if I didn't archive the highest quality versions of my favorite tracks today, only to find them inferior-sounding fifty years later, which is a pretty realistic possibility given how fast technology advances.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fn2" id="fnref2"><sup>2</sup></a> Even today's lossless could be inferior-sounding in the future, but there would be no regret.</p>
<p>To be extra clear, I'm talking about lossless for archival purposes, so what I want to see is a lossless download option in ITMS.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fn3" id="fnref3"><sup>3</sup></a> Streaming can be done in whatever good enough&#174; sampling frequency and bitrate that's currently in use, since it's a one-off thing with no effects on tomorrow (and I don't give a shit about streaming and subscription anyway). Offering lossless downloads likely won't put much burden on Apple's infrastructure, since they already deliver much more bandwidth-demanding movies on the same channel. Moreover, albums on ITMS aren't much cheaper than physical CDs, while the cost is apparently lower than CD production, the audience apparently wider, and the chances of impulse purchases (especially of single tracks) much higher, so I would suppose such a move (delivering lossless on ITMS) won't considerably hurt record labels' profits either. After all, if they don't make it easy for consumers, many consumers will just pirate &#8212; it's way too easy to pirate music.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>And I did see the <a href="http://www.macrumors.com/2015/12/20/apple-high-resolution-audio/">MacRumors article</a> a week ago. I even registered a MacRumors account, which I never bothered to do, just to comment on that article... It just didn't occur to me to write a blog post at that time.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>You might be skeptical of my hearing when I'm in my seventies... But I could well be showing my favorites to someone with perfect hearing, say my grandchildren.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I know there are many online music stores that sell lossless music, but ITMS has the largest catalog in the world, and for many titles I care about, ITMS is still the only place in this country where I can make legal digital purchases.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html#fnref3">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-28-why-i-want-lossless-music-on-itunes-music-store.html</guid><pubDate>Mon, 28 Dec 2015 11:15:45 GMT</pubDate></item><item><title>Lesson on magic method access of Python new-style classes (from my failed Python3 port of Tomorrow)</title><link>http://zmwangx.github.io/blog/2015-12-27-lesson-on-magic-method-access-of-python-new-style-classes-from-my-failed-python3-port-of-tomorrow.html</link><description><![CDATA[

<p>I know the title is formidably long, but I can't find something more accurate (and my homegrown mini CMS doesn't support subtitle), so please bear with me.</p>
<p>So, I have <a href="https://github.com/madisonmay/Tomorrow">madisonmay/Tomorrow</a> &#8212; "magic decorator syntax for asynchronous code in Python 2.7" &#8212; bookmarked for a long time<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-27-lesson-on-magic-method-access-of-python-new-style-classes-from-my-failed-python3-port-of-tomorrow.html#fn1" id="fnref1"><sup>1</sup></a> without ever trying it, because I simply don't write Python 2 code any more (except when I try to maintain compatibililty). I felt kind of strange that a ~50-line project with ~1000 stars on GitHub hasn't been ported to Python 3 already, so I gave it a shot just now.</p>
<p>I thought it would be easy:</p>
<ol style="list-style-type: decimal">
<li>Modernize the old-style class <code>Tomorrow</code>;</li>
<li>Replace <code>__getattr__</code> with <code>__getattribute__</code> for unconditional attribute routing, then make a few exceptions to prevent infinite recursion;</li>
<li><code>2to3</code> test cases;</li>
<li>Make meta changes, like removing the <code>futures</code> dependency.</li>
</ol>
<p>However, after doing 1&#8211;3, I ran the tests, and out of the five test cases, three failed and one errored. I tried to isolate the problem, and ended up with the following piece of proof-of-concept:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">class</span> PassThrough(<span class="bu">object</span>):

    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, obj):
        <span class="va">self</span>._obj <span class="op">=</span> obj

    <span class="kw">def</span> <span class="fu">__getattribute__</span>(<span class="va">self</span>, name):
        <span class="cf">if</span> name <span class="op">==</span> <span class="st">"_obj"</span>:
            <span class="cf">return</span> <span class="bu">object</span>.<span class="fu">__getattribute__</span>(<span class="va">self</span>, name)
        <span class="bu">print</span>(<span class="st">"Accessing '</span><span class="sc">%s</span><span class="st">'"</span> <span class="op">%</span> name)
        <span class="cf">return</span> <span class="va">self</span>._obj.<span class="fu">__getattribute__</span>(name)</code></pre></div>
<p>This snippet is valid in both Python 2.7 and Python 3, but here's the surprise:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="op">&gt;&gt;&gt;</span> g <span class="op">=</span> PassThrough(<span class="dv">0</span>)
<span class="op">&gt;&gt;&gt;</span> <span class="bu">print</span>(g)
<span class="op">&lt;</span>__main__.PassThrough <span class="bu">object</span> at <span class="bn">0x10c662e48</span><span class="op">&gt;</span>
<span class="op">&gt;&gt;&gt;</span> <span class="bu">str</span>(g)
<span class="co">'&lt;__main__.PassThrough object at 0x10c662e48&gt;'</span>
<span class="op">&gt;&gt;&gt;</span> <span class="bu">hasattr</span>(g, <span class="st">'__str__'</span>)
Accessing <span class="st">'__str__'</span>
<span class="va">True</span>
<span class="op">&gt;&gt;&gt;</span> g.<span class="fu">__str__</span>()
Accessing <span class="st">'__str__'</span>
<span class="co">'0'</span></code></pre></div>
<p>In addition, here's what happens if you try to "pass through" a function:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> f(): <span class="cf">return</span> <span class="va">True</span>
<span class="op">&gt;&gt;&gt;</span> g <span class="op">=</span> PassThrough(f)
<span class="op">&gt;&gt;&gt;</span> g()
Accessing <span class="st">'__class__'</span>
Accessing <span class="st">'__class__'</span>
Traceback (most recent call last):
  File <span class="st">"&lt;ipython-input-6-d65ffd94a45c&gt;"</span>, line <span class="dv">1</span>, <span class="op">in</span> <span class="op">&lt;</span>module<span class="op">&gt;</span>
    g()
<span class="pp">TypeError</span>: <span class="st">'PassThrough'</span> <span class="bu">object</span> <span class="op">is</span> <span class="op">not</span> <span class="bu">callable</span>

<span class="op">&gt;&gt;&gt;</span> <span class="bu">callable</span>(g)
<span class="va">False</span>
<span class="op">&gt;&gt;&gt;</span> <span class="bu">hasattr</span>(g, <span class="st">'__call__'</span>)
Accessing <span class="st">'__call__'</span>
<span class="va">True</span>
<span class="op">&gt;&gt;&gt;</span> g.<span class="fu">__call__</span>()
Accessing <span class="st">'__call__'</span>
<span class="va">True</span></code></pre></div>
<p>As you can tell, although <code>__str__</code> or <code>__call__</code> may have been implemented through <code>__getattribute__</code>, and <code>hasattr</code> (which in turn depends on <code>getattr</code>) has no trouble finding them, they are not picked up by <code>str</code> or function call <code>(...)</code>. At this point, one would suspect that this is due to <code>str</code> or function call only looking at the class instance's <code>__dict__</code>. Compare this to the behavior of an old-style class:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="kw">class</span> PassThrough():

    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, obj):
        <span class="va">self</span>._obj <span class="op">=</span> obj

    <span class="kw">def</span> <span class="fu">__getattr__</span>(<span class="va">self</span>, name):
        <span class="bu">print</span>(<span class="st">"Acessing '</span><span class="sc">%s</span><span class="st">'"</span> <span class="op">%</span> name)
        <span class="cf">return</span> <span class="va">self</span>._obj.<span class="fu">__getattribute__</span>(name)</code></pre></div>
<p>Now:</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="op">&gt;&gt;&gt;</span> g <span class="op">=</span> PassThrough(<span class="dv">0</span>)
<span class="op">&gt;&gt;&gt;</span> <span class="bu">print</span>(g)
Acessing <span class="st">'__str__'</span>
<span class="dv">0</span>
<span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> f(): <span class="cf">return</span> <span class="va">True</span>
<span class="op">&gt;&gt;&gt;</span> g <span class="op">=</span> PassThrough(f)
<span class="op">&gt;&gt;&gt;</span> g()
Acessing <span class="st">'__call__'</span>
<span class="va">True</span></code></pre></div>
<p>Note that magic method access is always routed through <code>__getattr__</code>.</p>
<p>After some digging, my suspicion was confirmed: indeed, for new-style classes, rather than invoking <code>__getattribute__</code>, the Python interpreter only looks for magic methods in <code>__dict__</code>. But is there a workaround for implementing something like the <code>PassThrough</code> class above? There's a <a href="http://stackoverflow.com/a/9059858/">nice answer</a> on StackOverflow that uses a metaclass to "automatically add proxies for magic methods at the time of class creation", to quote the author. However, the thing about Tomorrow is that <em>we don't have the result and don't know whatever magic methods it might have at class creation</em> &#8212; after all, Python isn't a statically typed language. It is possible for programmers to offer hints, but then Tomorrow won't be as elegant and magical anymore. Therefore, unfortunately enough, Tomorrow isn't portable to Python 3 &#8212; at least not without a substantial hack that's beyond my knowledge, or a complete overhaul of its logic (haven't thought about that).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Pretty much since the beginning, I believe (the <a href="https://github.com/madisonmay/Tomorrow/commit/22a53dfbcf9b516ecd1770eeca9fcf1720271240">initial commit</a> was from July 24 of this year). I don't remember how I came accross it though.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-27-lesson-on-magic-method-access-of-python-new-style-classes-from-my-failed-python3-port-of-tomorrow.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-27-lesson-on-magic-method-access-of-python-new-style-classes-from-my-failed-python3-port-of-tomorrow.html</guid><pubDate>Mon, 28 Dec 2015 00:47:05 GMT</pubDate></item><item><title>autoenv with auto cleanup</title><link>http://zmwangx.github.io/blog/2015-12-26-autoenv-with-auto-cleanup.html</link><description><![CDATA[

<p>I heard about <a href="https://github.com/kennethreitz/autoenv">kennethreitz/autoenv</a> a long time ago. The idea of autoloading project-specific environment modifications is nice, but no auto cleanup after leaving a project was a showstopper for me.</p>
<p>Today, I took matters into my own hands and wrote a fresh Zsh implementation<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-26-autoenv-with-auto-cleanup.html#fn1" id="fnref1"><sup>1</sup></a> with auto cleanup support. Check it out: <a class="uri" href="https://github.com/zmwangx/prezto/tree/master/modules/autoenv">https://github.com/zmwangx/prezto/tree/master/modules/autoenv</a>.</p>
<p>As a quick promotion, let me show you two common examples.</p>
<p>First, inserting some local bin directory into the search path. This is easily done by a one-line <code>.env</code>, say,</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh">autoenv-insert-paths bin libexec</code></pre></div>
<p>This way <code>$PWD/bin</code> and <code>$PWD/libexec</code> are inserted to the beginning of the search path, which will persist until you leave the directory tree. That is to say, the inserted paths will still be available when you descend into subdirectories (and more specific <code>.env</code>'s can even be stacked as you descend), but they will be purged as soon as you leave the tree. Clever, isn't it?</p>
<p>Secondly, exporting project-specific environment variables. The <code>.env</code> would look like</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">export</span> <span class="ot">HOMEBREW_DEVELOPER=</span>not-for-the-faint-hearted

<span class="fu">autoenv-purge ()</span> <span class="kw">unset</span> HOMEBREW_DEVELOPER</code></pre></div>
<p>where the body of <code>autoenv-purge</code> will be executed when you leave the directory tree. No more junk floating around.</p>
<p>Again, for more info, including detailed usage and customization instructions, please visit <a href="https://github.com/zmwangx/prezto/tree/master/modules/autoenv"><code>modules/autoenv</code></a> in zmwangx/prezto.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>This is not a re-implementation in the common sense. My little Zsh module is inspired by kennethreitz/autoenv and reminiscent of that older project, but I took nothing from there (in fact I didn't even read their source code). I also don't claim to support their entire feature set. For instance, kennethreitz/autoenv claims to be Foreman compatible, which includes turning on <code>ALL_EXPORT</code>. However, I don't think <code>ALL_EXPORT</code> by default is a good idea, so with my <code>autoenv</code>, if you want <code>ALL_EXPORT</code> you have to set it explicitly.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-26-autoenv-with-auto-cleanup.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-26-autoenv-with-auto-cleanup.html</guid><pubDate>Sat, 26 Dec 2015 08:15:48 GMT</pubDate></item><item><title>Regex flavor hell</title><link>http://zmwangx.github.io/blog/2015-12-20-regex-flavor-hell.html</link><description><![CDATA[

<p>I write a lot of shell scripts, which means dealing with common *ix utilities a lot. I typically want my scripts to work on both OS X and Linux (or OS X + GNU utilities, which is my personal setup), which means writing commands that are understood in both GNU/Linux and BSD worlds. Unfortunately that's not so simple, because to do that I usually have to give up readily available functionalities (especially the vast collection of useful options typical of GNU utilities) and am constantly thrown back to the stone age that is POSIX, or a little bit more than POSIX.</p>
<p>Working with regular expressions is especially painful. Almost every implementation of every utility (with regex support) has its own flavor of regex. Most notably the big three: <code>grep</code>, <code>sed</code> and <code>awk</code>. GNU utilities of course come with GNU extensions, but they are nothing when aiming for compatibility. Ignoring GNU extensions, there's a way to turn on standard POSIX extensions (ERE) on <code>sed</code>, but unfortunately GNU and BSD use different flags: <code>-r</code> for GNU sed and <code>-E</code> for BSD sed. The two implementations of <code>grep</code> thankfully use the same flag <code>-E</code> to turn on ERE, but GNU grep, being a GNU utility and having to distinguish itself from its mundane counterpart, further implements <code>-P,--perl-regexp</code> &#8212; regexers' dream. It's there but I can't use it, except in an interactive shell. <code>awk</code> has more than two implementations and will be left out of this discussion.</p>
<p>Anyway, despite all these flavor issues, I can usually get away with BRE, although it's verbose and unreadable as hell (quantifiers in particular) and doesn't support alternation. I would be thankful if BRE is the end of the story, but it is not. There are more tools lurking around trying to sabotage scripters. <code>find</code> is a perfect example. BSD <code>find</code>, unsurprisingly, uses BRE by default with <code>-regex</code> and <code>-iregex</code>, and ERE may be turned on with the <code>-E</code> flag. GNU findutils <code>find</code>, however, tries to be helpful and future-proof by having a <code>-regextype</code> option:</p>
<blockquote>
<p>Changes the regular expression syntax understood by <code>-regex</code> and <code>-iregex</code> tests which occur later on the command line. Currently-implemented types are <code>emacs</code> (this is the default), <code>posix-awk</code>, <code>posix-basic</code>, <code>posix-egrep</code> and <code>posix-extended</code>.</p>
</blockquote>
<p>The Emacs flavor? You mean Elisp regexp? Okay fine, <a href="http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html">BRE</a> &#8212; with few features other than grouping (<code>\(...\)</code>), quantifiers (<code>*</code> or <code>\{n,m\}</code>), bracket expressions and character classes &#8212; should still be pretty much compatible with Elisp regexp. However, the "Emacs flavor" isn't even the Elisp flavor. It's a <a href="https://www.gnu.org/software/findutils/manual/html_node/find_html/emacs-regular-expression-syntax.html">stripped version</a> specifically for findutils. In particular, there are <code>*</code>, <code>+</code> and <code>?</code> but no curly braces quantifiers, so gone is the dream of writing even just mildly complex regexps that are compatible with both BSD <code>find</code> and GNU findutils <code>find</code>. By the way, in case you wonder, the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/find.html">POSIX <code>find</code></a> doesn't even have a <code>-regex</code> primary/operator...</p>
<p>What a cruelly realistic world we live in.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-20-regex-flavor-hell.html</guid><pubDate>Mon, 21 Dec 2015 00:03:03 GMT</pubDate></item><item><title>Spoiled by Retina, in less than a day</title><link>http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html</link><description><![CDATA[

<p>I finally got a 15'' Retina MacBook Pro this morning to replace my 13'' mid-2012 non-Retina MacBook Pro, whose spinning disk has been getting increasingly slower (or so I felt).<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fn1" id="fnref1"><sup>1</sup></a> Apparently this is a pretty significant landmark in my personal computing history, since I'm saying goodbye to both spinning disk and non-Retina display on my primary computing device.</p>
<p>The transition was initially smooth except for a few things. First, as a tap-to-click wizard I immediately turned on tap-to-click, but I had a hard time dragging things because it was too easy to trigger a force touch instead on the medium setting, and under the firm setting I could hardly force touch at all; in the end I just turned off force touch altogether, and haven't had any problem since. By the way, I was initially worried about the keyboard too but it worked surprisingly well for me, so no complaints there. Secondly, <a href="http://zmwangx.github.io/blog/2015-08-31-after-all-these-years-10pt-non-anti-aliased-monaco-is-still-the-best.html">10pt non-anti-aliased Monaco</a> looks weird on Retina since it's no longer the beloved bitmap version. I turned on antialiasing and now it's no longer weird, but it felt totally different and I'm not sure if I like it (definitely not as much as the 10pt bitmap Monaco anyway). It's okay right now but I'll probably need to spend some time trying out different fonts. Obviously there are <a href="https://news.ycombinator.com/item?id=10140728">like-minded folks</a> out there. Sad story.</p>
<p>So much for first impressions. Apart from Monaco, everything felt great, until I returned home (I was doing setup away from home to get a less shitty connection) and connected my 27'' external monitor. Holy crap, I couldn't believe my eyes. The dock icons &#8212; the first things I saw before launching anything &#8212; looked <em>so blurry I couldn't stare at them for more than a few seconds</em>. That was after staring at the Retina display for less than five hours. Not to mention PDFs; they look ultra crisp on the Retina display and ultra crappy on non-Retina &#8212; especially in Preview, which is a problem I've been aware of since Yosemite.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fn2" id="fnref2"><sup>2</sup></a> Moreover, the terminal font is more problematic than initially estimated &#8212; <em>now I have a retina display and a non-retina one side-by-side, yet I can only set one font for my default profile, which will never satisfy both</em>!<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fn3" id="fnref3"><sup>3</sup></a> This is so awkward I can't think of a solution. One obvious approach is to ditch the blurry 27'' and only work from the Retina 15'', but should I really let the large canvas sit idle? No idea. Or should I get a 4K external display? First, a 4K display at 27'' still can't rival the pixel density of 2880x1800 at 15.4'' (Apple ships 5K at 27'' for a reason). Secondly and more importantly, I don't have the budget for such a thing after throwing money at an expensive 15'' rMBP (with 512 GB SSD)...</p>
<p>Transition periods are always awkward, I guess.</p>
<hr/>
<p><strong>12/17/2015 Update.</strong> After more than a full day's use, I actually quite love 10pt Monaco on a Retina display. I tried various fonts, including Menlo, Consolas and so on, but none of them has that whimsical feeling of Monaco. Hopefully the font is stuck now.</p>
<hr/>
<p><strong>12/28/2015 Update.</strong> A dozen days later, I can hardly look at 10pt Monaco on a non-Retina screen anymore, antialiased or not, especially not in bold. Mind blown.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I haven't got the nerve to replace the hard drive myself, since it looks so much more complicated than upgrading the memory.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>PDFs looked so horrible in Preview (and TeXShop, my LaTeX previewer, which only serves a niche) that I often viewed them in browsers (!!), where text at least looks reasonable (on par with slightly blurry text elsewhere). PDF Expert came along and kind of made the situation better for non-Retina.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>Provided that I'll religiously stick to 10pt non-anti-aliased Monaco on non-Retina.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html#fnref3">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-16-spoiled-by-retina-in-less-than-a-day.html</guid><pubDate>Thu, 17 Dec 2015 05:10:08 GMT</pubDate></item><item><title>Safeguarding git repos against accidental rm</title><link>http://zmwangx.github.io/blog/2015-12-08-safeguarding-git-repos-against-accidental-rm.html</link><description><![CDATA[

<p>Everyone who has spent a sizable portion of their life in terminals has experienced that "oh shit" moment: you realize what you've done immediately after you've hit enter, but it's already too late. And needlessly to say, many of those are associated to accidental <code>rm</code>s.</p>
<p>I just had one of those moments. I was going to delete a subdirectory of <code>~/.config</code>, but hit return prematurely, and the command line ended up being <code>rm -r ~/.config</code>. Imagine the horror one second later. Fortunately I was saved by the read-only objects in <code>.git</code>, which triggered prompts; however, damage was already done, to some extent. I had to reinit the repo and do a hard reset, and a corrupted submodule was in my way (it blocked my attempt of <code>git reset --hard</code>) which I eventually had to completely remove and re-add. In the end everything was recovered (hopefully) and back to normal, but this episode was definitely not great for heart health, which led me to rethink <code>rm</code>.</p>
<p>I've tried several safer <code>rm</code> solutions before. The first and obvious is to alias <code>rm</code> to <code>rm -i</code>, but having to answer dozens of prompts a day (or more) is agonizing and unproductive. I've also tried trashing, but a nonempty trash can makes me sick, so not for me either. I also used <code>safe-rm</code> for a couple of months, but without supplying my own blacklist (I have none to be blacklisted), I've never hit the default blacklist; apparently I'm not stupid enough to mess in system locations, so this won't really help much. Fortunately though, this time I might have found a very good solution for myself.</p>
<p>The idea is to protect all git repos. Git repos<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-12-08-safeguarding-git-repos-against-accidental-rm.html#fn1" id="fnref1"><sup>1</sup></a> are among the most valuable assets of programmers, and they have the nice property of not being completely removable without <code>-f</code> or <code>--force</code> (the work tree of a submodule, where <code>.git</code> is a regular file containing the relative path of the git dir, can be removed without <code>--force</code>, but we don't want to damage submodules anyway, so let's not single them out). It's unlikely that we would intend to remove a repo directory without specifying <code>-f</code> or <code>--force</code>, so let's just reject all such <code>rm</code> calls.</p>
<p>The wrapper is very easy to write. Here's one implementation for Zsh with support for both GNU coreutils and BSD <code>rm</code>.</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">rm</span> <span class="kw">()</span> <span class="kw">{</span>
    <span class="kw">setopt</span> localoptions noshwordsplit noksharrays
    <span class="kw">local</span> <span class="ot">args_backup</span> <span class="ot">force</span> <span class="ot">node</span>
    <span class="kw">set</span> -A args_backup <span class="ot">$@</span>
    <span class="kw">while</span> <span class="kw">:</span>; <span class="kw">do</span>
        <span class="kw">case</span> <span class="ot">$1</span><span class="kw"> in</span>
            --force<span class="kw">|</span>-*f*<span class="kw">)</span> <span class="ot">force=</span>1 <span class="kw">&amp;&amp;</span> <span class="kw">shift;;</span>
            --<span class="kw">)</span> <span class="kw">shift</span> <span class="kw">&amp;&amp;</span> <span class="kw">break;;</span>
            -*<span class="kw">)</span> <span class="kw">shift;;</span>
            *<span class="kw">)</span> <span class="kw">break;;</span>
        <span class="kw">esac</span>
    <span class="kw">done</span>
    <span class="kw">for</span> node; <span class="kw">do</span>
        <span class="co"># -f, --force hasn't been specified &amp;&amp; node is a git repo</span>
       <span class="kw"> [[</span> <span class="ot">-z</span> <span class="ot">$force</span> &amp;&amp; <span class="ot">-e</span> <span class="ot">$node</span>/.git<span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">{</span>
            <span class="kw">printf</span> <span class="st">"\e[31m'%s' is a git repo -- won't remove without the -f or --force option\e[0m\n"</span> <span class="ot">$node</span>
            <span class="kw">return</span> 1
        <span class="kw">}</span>
    <span class="kw">done</span>
    <span class="kw">command</span> <span class="kw">rm</span> <span class="ot">$args_backup</span>
<span class="kw">}</span></code></pre></div>
<p>Personally, I stick it into a <a href="https://github.com/zmwangx/prezto/tree/master/modules/rm_guard">Prezto module</a> available from my fork. Hopefully it will serve me well this time round.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In this article, "repo" stands for the work tree of a repo, unless otherwise noted; the actual repo with git objects is referred to as "git dir".<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-12-08-safeguarding-git-repos-against-accidental-rm.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-12-08-safeguarding-git-repos-against-accidental-rm.html</guid><pubDate>Tue, 08 Dec 2015 08:17:39 GMT</pubDate></item><item><title>Bash function exporting fiasco</title><link>http://zmwangx.github.io/blog/2015-11-25-bash-function-exporting-fiasco.html</link><description><![CDATA[

<p>Bash is the only major shell (and the only shell that I know of) that implements function exporting. By now everyone should have heard of this feature, I suppose, after the publicity of Shellshock last year. I was personally introduced to it while writing parallel processing scripts <a href="https://www.gnu.org/software/parallel/parallel_tutorial.html#Transfer-environment-variables-and-functions">with GNU Parallel</a> (long before Shellshock), and it seemed useful and clever at that time. Back then I often wondered why it didn't make its way into Z shell. However, now that I'm much more seasoned in shell scripting, I can see why and how this feature is troubled and of debatable value.</p>
<p>Two problems lie at the heart of function exporting:</p>
<ol style="list-style-type: decimal">
<li>As always, everything clever comes at a cost;</li>
<li>Code execution from untrusted source.</li>
</ol>
<p>Regarding the first problem, the cost of function exporting is to mess with the environment, in a very hackish way. The environment was designed to hold data, not code, and we're not in the utopia of Lisp; but bash forced its way through. Pre-shellshock, exported <code>func</code> was stored as <code>func=() {...</code> in env; post-shellshock, it was first <code>BASH_FUNC_func()=() {...</code> (which didn't entirely fix the issue), and then <code>BASH_FUNC_func%%=() {...</code>.</p>
<p>The second problem doesn't need much explanation &#8212; <em>shellshock it was</em>. It has been extensively documented elsewhere, so I'll just succinctly comment that to load exported functions into a subshell, function definitions have to be retrieved from the environment and executed (again because we're not in the utopia of Lisp<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-11-25-bash-function-exporting-fiasco.html#fn1" id="fnref1"><sup>1</sup></a>), and loading is done passively from the subshell user's point of view, hence the code execution bug(s). The bug(s) has(have) allegedly been fixed, but code execution (presumably with the appropriate safeguards now) still can't be avoided altogether, so just like a sanitized <code>eval</code>, it would still wake you up at night.</p>
<p>Well, if that's all I have to say, I wouldn't have started this post today. The thing that's bugging me is another issue I've found recently that's entirely avoidable, yet upon which we'll probably never see light ever after due to a combination of factors.</p>
<p>It started with <a href="http://stackoverflow.com/q/33819243/19447840">this question on SO</a>. While troubleshooting I quickly noticed that a Bash-emulated <code>sh</code> imports those <code>BASH_FUNC</code>s from the environment:</p>
<pre><code>&gt; bash -c 'func () { echo "exported function loaded"; } &amp;&amp; export -f func &amp;&amp; ln -sf /bin/bash sh &amp;&amp; ./sh -c func'
exported function loaded</code></pre>
<p>It gets worse when the function isn't Bourne shell compatible (e.g., when it uses process substitution):</p>
<pre><code>&gt; bash -c 'func () { cat &lt;(echo hello); } &amp;&amp; export -f func &amp;&amp; ln -sf /bin/bash sh &amp;&amp; ./sh -c func'
cat: &lt;(echo hello): No such file or directory</code></pre>
<p>That's surprising but not scary enough, because if you're not a fool you won't call <code>func</code> in <code>sh</code> anyway. However, if you're unfortunate enough to be dealing with <code>/bin/sh</code> on OS X (bash 3.2 under the hood, modified by Apple or not I'm not sure), then all hell break loose:</p>
<pre><code>&gt; bash -c 'func () { cat &lt;(echo hello); } &amp;&amp; export -f func &amp;&amp; /bin/sh -c :'  # OS X only
/bin/sh: func: line 0: syntax error near unexpected token `('
/bin/sh: func: line 0: `func () {  cat &lt;(echo hello)'
/bin/sh: error importing function definition for `func'</code></pre>
<p>Note that we're actively doing nothing in <code>sh</code>, yet we get all these syntax errors from loading <code>func</code>. This happens to every invocation of <code>sh</code>, and as you might expect, there are no shortage of programs that are either <code>sh</code> scripts (e.g., fasd) or have internal <code>sh</code> calls (e.g., GNU Parallel). A single export of a Bourn shell incompatible function will haunt you through the entire session. Oops.</p>
<p>As I said, I don't know if the displayed error messages are due to Apple's modifications (anyone willing to look at the <a href="https://opensource.apple.com/source/bash/bash-97/">source code</a>?), since a symlink named <code>sh</code> to <code>/bin/bash</code> doesn't print error messages, but instead load the wrong function, which is almost as bad but less annoying to innocent users. At any rate, it's not even worth reporting, either to GNU or Apple, because we're stuck with bash 3.2 for <code>/bin/sh</code> forever (thank you GPLv3), and it takes hell of an exploit like shellshock to get a small update out of Apple's hands. We can install newer shells to <code>/usr/local</code> as much as we'd like to, but <code>/bin/sh</code> is simply the final word for many tasks involving the shell. Yet it's stained by this troubled bash-specific feature, and it's not going anywhere. So sad.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I'm not commenting on the security of Lisp.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-11-25-bash-function-exporting-fiasco.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-11-25-bash-function-exporting-fiasco.html</guid><pubDate>Wed, 25 Nov 2015 23:38:13 GMT</pubDate></item><item><title>We need a programming keyboard on iOS</title><link>http://zmwangx.github.io/blog/2015-11-15-we-need-a-programming-keyboard-on-ios.html</link><description><![CDATA[

<p>We do. If you ever tried to say something on GitHub (web) or StackOverflow (web or app) on iOS, you'll probably agree with me. The stock keyboard (or any third party keyboard that I've heard of) is simply awful at this. Typing on iOS software keyboard is unpleasant enough to begin with, but behold:</p>
<ul>
<li>Auto"correct" messes up everything as fast as you can type, which isn't really fast anyway; might as well call it autorot.</li>
<li>The backtick is a click plus a loooong click (on the single quote key) plus another click away. Good luck typing code in Markdown,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-11-15-we-need-a-programming-keyboard-on-ios.html#fn1" id="fnref1"><sup>1</sup></a> especially if you use GFM fenced code block like all of us do.</li>
<li>Brackets, curly braces, the underscore, the pound, etc. are all three clicks away.</li>
</ul>
<p>The solution is pretty obvious actually. I don't know about smaller phones, but the software keyboard on a landscape iPhone 6 Plus has four rows, which takes up about 40% of vertical screen estate, and it has fourteen keys in the top row. With a little bit of effort it can be made into a five-row, full-sized keyboard (without arrow keys perhaps) without taking up a ridiculous amount of space. Since the horizontal 6 Plus could handle it, any iPad should be able to handle it too; definitely shouldn't be an iPad Pro-only luxury. Turn off autocorrect on top of that, and you get a decent programming (or better put, programmer-oriented) keyboard.</p>
<p>This is merely a rant, but it would awesome if anyone sets out to make one.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>To be fair, typing BBCode is even worse. Unfortunately that's what Ars Technica use, and I've given up on commenting there.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-11-15-we-need-a-programming-keyboard-on-ios.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-11-15-we-need-a-programming-keyboard-on-ios.html</guid><pubDate>Sun, 15 Nov 2015 10:17:05 GMT</pubDate></item><item><title>Microsoft drops unlimited OneDrive storage after people use it for unlimited storage</title><link>http://zmwangx.github.io/blog/2015-11-06-microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage.html</link><description><![CDATA[

<p><a href="http://arstechnica.com/information-technology/2015/11/microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage/">Story on Ars Technica</a>. <a href="https://blog.onedrive.com/onedrive_changes/">Official announcement</a>. I was playing catch up on this week's RSS when this one punched in my face.</p>
<p>I currently have 5 TB of data in OneDrive. I was once worried about lock-in when I eventually have 20 or 100 TB there, but now that they have shown their true colors, the worries are all gone. They are not even offering anything past 1 TB. We have seen this too many times &#8212; shit happens when people actually use unlimited for unlimited. Usually unlimited quickly becomes qualified, but in this case, unlimited simply becomes limited. What irony when one looks back at their announcement from <a href="http://localhost:8000/blog/2014-10-27-onedrive-goes-unlimited.html">a year ago</a>:</p>
<blockquote>
<p>Today, storage limits just became a thing of the past with Office 365.</p>
</blockquote>
<p>Why even promise when they can't keep it for more than a year.</p>
<p>Okay, Microsoft just reclaimed the top spot of my most-hated-companies list, and my <a href="http://zmwangx.github.io/blog/2015-11-06-microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage.html">ongoing efforts on making a usable OneDrive CLI</a> have been wasted. I just pushed the final commit and closed all issues. Maybe it's a blessing that I'll no longer need to deal with that slow and glitchy API; I'll see after experimenting with APIs of other cloud storage providers.</p>
<p>Guess my next stop is either Amazon Cloud Drive or S3, probably the former so that I don't need to calculate.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-11-06-microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage.html#fn1" id="fnref1"><sup>1</sup></a> And a quick search yields an actively-maintained CLI client <a href="https://github.com/yadayada/acd_cli">yadavada/acd_cli</a>, so I may not need to roll my own this time (it depends on usability).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Yeah I'm a mathematician, but I hate most calculations that involve $$. &#128514;<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-11-06-microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-11-06-microsoft-drops-unlimited-onedrive-storage-after-people-use-it-for-unlimited-storage.html</guid><pubDate>Fri, 06 Nov 2015 18:49:51 GMT</pubDate></item><item><title>AT&amp;T to Pure TalkUSA, one month later</title><link>http://zmwangx.github.io/blog/2015-10-26-att-to-pure-talkusa-one-month-later.html</link><description><![CDATA[

<p><strong>TL;DR</strong>: If you have questions about Pure TalkUSA unanswered by the <a href="https://www.puretalkusa.com/cell-phones-sim-cards.php">official FAQ</a>, I have some information for you starting from the section "<a href="http://zmwangx.github.io/blog/2015-10-26-att-to-pure-talkusa-one-month-later.html#migration-experience">migration experience</a>".</p>
<hr/>
<p>I became an AT&amp;T customer days after arriving in the U.S., and stayed one for three years. The service was okay (I'm not a picky customer), but the pricing was ridiculous. I was paying somewhere between $50 and $60 per month for an AT&amp;T Next plan, with unlimited talk and text and a mere 300 MB of data, phone installments <em>not</em> included (which I was paying the full price anyway). That's actually below average; see <a href="https://zmwangx.github.io/blog/2014-11-10-average-phone-plan-in-the-u-dot-s-costs-ten-time-as-much-as-that-in-the-u-dot-k.html">average phone plan in the U.S. costs ten time as much as that in the U.K.</a>. I could save a bit by joining a family plan (or more precisely, "data share plan"), but then I would lose control over my line and account, which have proven to be very annoying when I needed to upgrade, or otherwise be serviced.</p>
<p>The biggest concern was that I didn't really need unlimited talk and text, so I wasn't using what I was paying for. These days we have too many channels of communications, most of them free. My monthly talk usage was usually around a hundred minutes or less, so I was basically paying a few <em>dimes</em> per minute. Which was like being robbed.</p>
<p>Then I heard about <a href="https://www.puretalkusa.com/">Pure TalkUSA</a> &#8212; an AT&amp;T <a href="https://en.wikipedia.org/wiki/Mobile_virtual_network_operator">MVNO</a> &#8212; from one of my friends. Pure Talk offers <a href="https://www.puretalkusa.com/cell-plans.php">cheap limited plans</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-26-att-to-pure-talkusa-one-month-later.html#fn1" id="fnref1"><sup>1</sup></a> that looked appealing to me. It uses AT&amp;T's network, so for me, the only thing I would lose by switching was part of my monthly expenses, to which I wouldn't object. So I switched last month. Now that I've been on Pure Talk's network for a month, I'll try to talk about the good and bad, as well as some migration caveats, since information is sparse on the Internet. Note: I'm not comparing Pure TalkUSA to other AT&amp;T MVNOs, since I know nothing about any of them.</p>
<p><em>Disclaimer before I start: I can't guarantee that information provided here is accurate (I only speak from the experience of a single customer, that is myself, although I'll try not to make unfounded claims), and I didn't consult Pure TalkUSA before publishing this post, so please don't hold me accountable for anything.</em></p>
<h2 id="migration-experience">
Migration experience
</h2>
<p>A few tips about migration from AT&amp;T:</p>
<ul>
<li><p>About unlocking: After allegedly unlocking your AT&amp;T phone, naturally you would want to make sure it is actually unlocked before ordering a Pure Talk SIM. And you'll find a lot of guides when you google "check if iPhone is unlocked". I'll just tell you this: don't trust those guides. iOS is constantly changing, and the only guaranteed check is to plug in your new SIM. To this day my General-&gt;About-&gt;Carrier shows AT&amp;T, although I'm happily using Pure Talk's network.</p></li>
<li><p>Pure Talk ships your SIM card using USPS (they don't have physical stores), which is slow and expensive. However, I got my SIM much earlier than the estimated delivery date. Not sure if it's a coincidence. Probably location-dependent.</p></li>
<li><p>Porting number: You can choose to port your number during activation, whether you're calling or doing it online (filling out a few webforms). Beware that you must not have cancelled your AT&amp;T service at the time of porting. The porting system was actually down for two days (customer support was very polite and kept apologizing although I said it didn't matter), and on the third day I used the webform but got an error in the end due to the wrong AT&amp;T account number (there's an account number associated to each account &#8212; different from the phone number &#8212; that I've never heard of or used, and I had to call AT&amp;T to extract that info). After acquiring the account number, I called Pure again and the porting process finished almost in an instant. I swapped in the new SIM card (the phone has been unlocked) and was able to make calls after a few seconds.</p></li>
<li><p>About AT&amp;T cancellation: Porting the number will automatically cancel your service with AT&amp;T, so you don't need to call them for cancellation.</p>
<p>An anecdote here: I initially feared the usual customer retention bullshit when I tried to cancel my AT&amp;T service through online chat (I didn't know about automatic cancellation at that time), but there was none. Representative was very polite, and I only got a "sorry to see you go" at the end. So kudos to them.</p></li>
</ul>
<h2 id="pros-and-cons">
Pros and cons
</h2>
<p>Here is a short list of pros and cons of Pure Talk compared to AT&amp;T, in my opinion:</p>
<p>Good:</p>
<ul>
<li><p>Cheap. Obviously. I am currently paying $22.90 ($12.95 + $9.95) for 500 minutes and 400 MB of data, and I'm switching to 250 minutes next month, which would make it $19.95. Note that as advertised, there are no taxes and hidden fees. I always hated the before-tax price tags in the U.S. Just tell me how much I need to pay!</p></li>
<li><p>Network quality (both talk and LTE) is good. Switching from AT&amp;T, I didn't notice a difference. I don't know if this is true nationwide (I live in the Bay Area), but they say it's true on their FAQ.</p>
<p>By the way, shortly after activating the service, I got a text message pointing me to download a profile to my phone in order to use LTE. It's titled "PureLTE" by "Giesecke and Devrient AB Nordic", and I verified with customer support that it is legit.</p></li>
<li><p>You may change your plan at any time with a few clicks, and only need to make up for the price difference. Note that downgrading doesn't grant you a refund.</p></li>
<li><p>Customer service (U.S. based) is mostly very polite and helpful (I did encounter a guy who sounded very tired with his job though), and wait time is generally very short.</p>
<p>Tip: For customer support, <em>call 611 from a Pure Talk line</em> (instead of the usual ten digit customer service number listed on their website) to avoid being charged.</p></li>
</ul>
<p>Bad:</p>
<ul>
<li><p>There's no visual voicemail, only old-schooled voicemail which you need to dial a number to listen to, in the order they were received; moreover, dialing and listening to voicemail counts toward your minute balance. I hardly missed that. I never grew accustomed to voicemail anyway; now I have an excuse to forget about it completely.</p></li>
<li><p>All incoming phone calls and text messages count towards your minute balance (I don't know about what's most common in the U.S., but as far as I know this is rarely the case in China &#8212; you usually only pay for active usage, although you do need an active service to receive calls and messages). Calling toll free numbers counts, too, so now you'll be even more angry when you're put on hold for an hour.</p></li>
<li><p>For iPhone users, or Android users who otherwise bring in their own phones: since they don't sell you your iPhone, they also don't offer insurance plans. So be extra careful with your phone! Paying $100 for a replacement (from AT&amp;T's insurance program) is no more.</p></li>
</ul>
<p>That's basically all I want to say. Hope this post helps someone who's researching Pure Talk.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Pure Talk also offers an unlimited talk &amp; text plan for $24, excluding data. According to <a href="https://www.puretalkusa.com/mobile-unlimited-plan.php">the "unlimited plus plan" page</a>:</p>
<blockquote>
<p>Compare our Unlimited Plus plans to similar unlimited cell phone plans on the market and you'll see the savings you can receive! While others may pad their higher priced plans with "free" international minutes, we're focused on giving you the best rate for unlimited talk and text, plus data used within the United States.</p>
</blockquote>
<p>I honestly don't know which competitions they are referring to here. If it's AT&amp;T, I'll share an anecdote about international roaming: I went back to China, and got a text message from AT&amp;T saying that I could use data for TWENTY DOLLARS PER MEGABYTE. I would have had to pay $200 to visit The Verge once on 4G.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-26-att-to-pure-talkusa-one-month-later.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-26-att-to-pure-talkusa-one-month-later.html</guid><pubDate>Mon, 26 Oct 2015 07:00:30 GMT</pubDate></item><item><title>SIP &#8212; For the Greater Good</title><link>http://zmwangx.github.io/blog/2015-10-14-sip-for-the-greater-good.html</link><description><![CDATA[

<p>In recent months I wrote a few thousand words lamenting Finder and <a href="https://en.wikipedia.org/wiki/System_Integrity_Protection">SIP</a> on El Capitan. See <a href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html">The sad state of Finder on El Capitan</a> and <a href="http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html">its follow-up</a>.</p>
<p>For the record, I'm not blaming SIP. It does deal a serious blow to people who in-memory patch stock applications (and there's a good discussion about the creativity aspect on <a href="http://atp.fm/episodes/128">ATP episode 128</a>), but the general public &#8212; at least more than 95% of users &#8212; should not be negatively affected, at least not in the short term. And I can understand why SIP protection comes at this time. Macs used to be safe, but in recent years we are seeing real world exploits increasingly more often. History has shown that technically-challenged users simply can't be entrusted with admin accounts, they are too willing to give their passwords to shady software downloaded from shady corners of the web (and sometimes even renowned corners get hacked). But they are given admin accounts anyway (there has to be someone knowing the admin password), so Apple has to come up with ways to protect them. SIP is a pretty good response.</p>
<p>SIP is also good for new tinkerers. When I first started to tinker with the command line, I wasn't aware of package managers and I wasn't messing inside virtual machines, so I would download packages from official websites, then manually compile and install them to my daily system. Some packages didn't respect the <code>/usr/local/bin</code> (and <code>include</code>, <code>lib</code>, <code>libexec</code>, <code>share</code>, etc.) convention and insisted on <code>/usr/bin</code>; some others used funny locations like a standalone subdirectory of <code>/usr/local</code>; and when things don't work (e.g., can't find libraries when building &#8212; at that time I'm not familiar with <code>CFLAGS=-I</code> yet), I would explictly change <code>PREFIX</code> (probably to <code>/usr</code>) and try again. That way, over a period of a few months, I ended up with a genuinely messed up <code>/usr</code>, with all kinds of stuff everywhere. I probably overwrote quite some binaries shipped with the system. The configuration kind of worked but was pretty fragile. In the end I reinstalled the system, and started to (loosely) follow FHS (<a href="http://www.pathname.com/fhs/">Filesystem Hierarchy Standard</a>) and use package managers (first MacPorts, then Homebrew). Good times. If I were to start tinkering today, I would certainly meet some barriers early on, but I would probably also learn the good practices earlier.</p>
<p>SIP is clearly the future, and I don't blame it. I just hope we don't see a vulnerability in the implementation soon.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-14-sip-for-the-greater-good.html</guid><pubDate>Thu, 15 Oct 2015 00:07:24 GMT</pubDate></item><item><title>Follow-up: The sad state of Finder on El Capitan</title><link>http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html</link><description><![CDATA[

<p><strong>10/14/2015 update</strong> (updated even before I published the article). Just as I was finishing this post, an update to TotalFinder came. <a href="http://totalfinder.binaryage.com/beta-changes">1.7.8</a>. And holy cow, it fixed automatic column resizing! The fix isn't perfect &#8212; there's actually a visible delay before resizing, but I'm happy again. Long live TotalFinder!</p>
<hr/>
<p>As expected, it's hard to get Finder to work the way I want it to on El Capitan. The unexpected part is that even after disabling the Debugging Restrictions part of SIP (<code>csrutil enable --without debug</code>), XtraFinder and TotalFinder<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html#fn1" id="fnref1"><sup>1</sup></a> both can't auto resize columns. Seems that a hole they are both utilizing has been closed. Just like <code>QLEnableTextSelection</code> in <code>com.apple.finder</code>, I guess. Apple gives, Apple takes. XtraFinder has additional problems like folder-on-top not working, window config occasionally forgotten, and the long-standing issue of shitty Chrome-style tab implementation (basically stacking a separate layer on top of each window) that shows a visible white divider, so I'm running TotalFinder right now, not sure about whether it would be abandoned completely next year. Anyway, even after running TotalFinder, it's still that damn old stupid Finder, the columns of which I have to manually resize all the time; just a little bit nicer.</p>
<p>So I went out to look for full Finder replacements. I tried everything listed in the <a href="http://discuss.binaryage.com/t/totalfinder-alternatives/4124">TotalFinder alternatives</a> post on TotalFinder forums. None worked for me. Here's a very brief (batch) review.</p>
<ul>
<li><p><a href="http://likemac.ru/english/">Disk Order</a>, <a href="http://mac.eltima.com/file-manager.html">Commander&#160;</a><a href="http://mac.eltima.com/totalfinder-promo.html">One</a>, <a href="http://www.devstorm-apps.com/dc/">DCommander</a>, and <a href="http://crax.soft4u2.com/">CRAX Commander</a>: No column view. All of them are dual-pane though. What's the advantage of being dual-pane? I can't fathom. Easier to copy/cut and paste? What a joke &#8212; how often do you do that to justify having two panes in your face at all times? Might as well spend the time to do a column view. Column view enables fast navigation and provides a full picture of a directory tree, which is one of the two reasons I use Finder (i.e., a file manager), the other being Quick Look. If I just want to stay in a single directory, and painstakingly navigate in and out, I'll just do everything in the terminal, thank you. By the way, Command One and DCommander are suprisingly similar, both appearance-wise and functionality-wise. Not sure if one rips off the other (looks like DCommander is older). Also, why do most of them call themselves commanders? Another thing that I can't fathom.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html#fn2" id="fnref2"><sup>2</sup></a></p></li>
<li><p><a href="http://www.binarynights.com/forklift/">ForkLift</a>: Again, dual-pane, and doesn't seem to offer a single-pane mode, but you can drag the pane divider all the way to the right to hide the second one (including the divider). It has a column view, but doesn't seem to offer column auto resizing. Also, it doesn't hide items with the <code>hidden</code> flag, which is kind of insane. Even more shockingly, it offers no option to show file extensions! Tell me again that this is a power user tool. (Yeah, I know its myriad power user features, but I need the basic ones, and I don't see them. More discussions about "features" at the end.)</p></li>
<li><p><a href="http://www.cocoatech.com/pathfinder/">Path Finder</a>. It actually kind of works. It offers column auto resizing, hidden in the view options of the column view (accessible via &#8984;J). Even "<code>open ~</code>" could open in Path Finder, if you let it be the default file manager; that was a nice surprise, and I'm not sure about the mechanism (maybe <a href="https://apple.stackexchange.com/questions/73529/how-to-change-the-default-file-manager-for-osx">this</a>? Doesn't sound right though). However, it has a horrible default appearance, and even after substantial customizations, it still looks kind of crappy. Also, the auto resizing implementation is incomplete, in that it doesn't offer min and max column size settings, so when auto resizing is enabled, many columns look awfully narrow. I'm also suspicious about its tech support. When I was investigating some issues about it on Google, I found some relevant tickets on its <a href="http://support.cocoatech.com/">support site</a>, but <em>none</em> of the tickets have any replies. I didn't bother to look around, but that was definitely a bad impression.</p>
<p>By the way, I mentioned concerns about Path Finder's pricing in the <a href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html">sad state</a> post. At $40 it's definitely not cheap, but judging from the <a href="http://support.cocoatech.com/kb/installation-and-compatibility/path-finder-version-history">release history</a>, it's more like pay-to-upgrade every other year, rather than every year.</p>
<p>Conclusion: not impressed.</p></li>
</ul>
<p>Finally, a few words about "pro features". Many of these file managers offer a huge bundle of pro features, but quite of a few of them are completely useless. Useless features include builtin text editor, hex editor, terminal, archiver and unarchiver, blah blah blah. Why would anyone use those watered-down builtins? I use the right tool, the dedicated tool, for the right job. (To give one example, Commander One includes a command line that you can type commands to execute &#8212; without command or filename completion, naturally; and it also ships with a builtin terminal accessible via &#8963;O. Apart from horrendous typography, the builtin terminal is also barely better than a dumb term, incapable of handling my prompt theme. Meanwhile, iTerm2 is accessible via a system-wide shortcut &#8997;Space to me &#8212; extremely convenient.) Support for other filesystems, including remote filesystems and in-place archive browsing, could be welcome though, although I seldom need them.</p>
<hr/>
<p>P.S. Here are the version numbers, at the time of writing, of the mentioned software packages (apparently, things might change in later versions):</p>
<ul>
<li>TotalFinder 1.7.6 (beta);</li>
<li>XtraFinder 0.25.5;</li>
<li>Disk Order 3.2.5;</li>
<li>Commander One 1.1.1346;</li>
<li>DCommander 2.7.2;</li>
<li>CRAX Commander 1.10.4 (demo);</li>
<li>ForkLift 2.6.6;</li>
<li>Path Finder 7.2.</li>
</ul>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>TotalFinder 1.7.8+ now supports column auto resizing on El Cap. See update at the top.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>If you Google <a href="https://www.google.com/search?q=file+manager+commander">"file manager commander"</a>, you'll find a hell lot of "commanders". Reminds me of C&amp;C... Oh well.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-14-follow-up-the-sad-state-of-finder-on-el-capitan.html</guid><pubDate>Wed, 14 Oct 2015 19:30:32 GMT</pubDate></item><item><title>The importance of dated, detailed release notes</title><link>http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html</link><description><![CDATA[

<p>I can't stress how much I value release notes, especially for closed source, commercial software. None of us want to invest on a piece of abandonware (unless it is ageless, which is quite unlikely for anything with a GUI), or a piece of software that is not completely abandoned, but takes a full year to adapt to the latest OS, campatibility-wise or UI-wise; and release notes, especially with dates, serve as almost the single metric for gauging developer commitment. In fact, whenever I try to learn about a piece of software that I heard about, one of the first things I do, usually after browsing through features and screenshots and before I even download the software to try out, is to look for its release notes and skim through it if available, and the outcome largely determines whether I'll even bother to download the installer.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html#fn1" id="fnref1"><sup>1</sup></a> A prominent, dedicated page with dated, detailed release notes immediately leaves a good impression on me.</p>
<p>Unfortunately, many developers or publishers don't value release notes as much as I do. Several problems, in ascending order of seriousness:</p>
<ul>
<li><p>Most release notes are not linked to from the home page or at least the download page, which kind of makes sense when the audience is generally non-technical, but there's little excuse when the software's targeted audience are pro-level or power users. This is not a big problem now because Google is very good at turning up release notes as long as they exist.</p></li>
<li><p>Quite some release notes are not dated, which I can't understand &#8212; it's so easy to date each entry, and it adds so much context, especially for gauging commitment (I guess developers who are less commited might not want to insert dates precisely for this reason).</p></li>
<li><p>For some software, releases notes are downright nonexistent, at least not on the web. Interestingly, occasionally they are available from an in-app menu or distributed document; the publishers just don't bother to put it on a web page. Not surprisingly, I might as well not bother to download this kind of software.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html#fn2" id="fnref2"><sup>2</sup></a></p></li>
</ul>
<p>If I were ever to publish closed source software, I'll definitely have dated, detailed release notes, linked to from the home page.</p>
<hr/>
<p>P.S. Speaking of release notes, it's hard not to complain about MAS, as if there are not enough complaints about this horrible platform. You can only view the most recent release with its release notes (and some publishers stack "bug fixes" notes of minor/patch releases on top of the real notes of the last major release, making it ever more confusing), whereas in the iOS App Store you have the "Version History" page that shows you a dated list of releases with release notes &#8212; what I would expect from everywhere. Basically, Apple has all this data and they can show it to you in a satisfactory way it they want to, but they blew it by not bothering to implement it. Note that I'm much more likely to care about the release notes of an OS X application than an iOS app, and I daresay most power users will agree with me.</p>
<p>Of course there are much more serious problems with MAS like the lack of trials, so the release notes problem is nothing but an insult over injury. In short, MAS is not a good distribution channel; it's only a lazy one, a compromise for small publishers.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Nowadays, with homebrew-cask, I'm much more likely to give things a spin, but still, I take an especially defensive stance against anything that doesn't have release notes.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Yes, I won't deny that downloaded some of them nevertheless &#8212; that's how I found out.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-12-the-importance-of-dated-detailed-release-notes.html</guid><pubDate>Mon, 12 Oct 2015 21:29:42 GMT</pubDate></item><item><title>Printing long, 80-character-per-line plain text document in two columns</title><link>http://zmwangx.github.io/blog/2015-10-10-printing-long-80-character-per-line-plain-text-document-in-two-columns.html</link><description><![CDATA[

<p><strong>TL; DR</strong>. Jump to <a href="http://zmwangx.github.io/blog/2015-10-10-printing-long-80-character-per-line-plain-text-document-in-two-columns.html#code">code</a>.</p>
<hr/>
<p>Printing is hard. Everyone who has ever tried to set up a printer (especially a multifunction unit) will probably agree with me. There are also a million ways to be sabotaged by your printer, e.g., connection failure (over Wi-Fi), toner running low, manual duplex eating two sheets at once when printing the second side. (Do you believe I encountered all three tonight?) Anyway, let's just assume that you have a perfectly connected, perfectly functional printer, and talk about something even harder.</p>
<p>We nerds read 80-character-per-line (or 72, but it's safer to assume longer) plain text documents all the time, or at least occasionally if we exclude source code. A plain text document is extremely versatile; it looks awesome in a text editor or in a browser window &#8212; with monospace typeface of your choice and infinite scrolling or arbitrary pagination. However, the problem is, sometimes we want to put things into print for easier reference, and we do <em>not</em> have infinite scrolling or arbitrary pagination in print. We want to divide things up into pieces that fit nicely onto 8.5'' by 11'' sheets, without ruining the original formatting of the plain text document. Therefore, some program has to decide the page layout and translate the plain text document into something a printer understands, e.g., PostScript. But since plain text is so versatile, there are a million ways to lay it out on paper.</p>
<p>You would assume that this is a solved problem, since the digital publishing industry has been around for 40 years; and you would assume that this should be easy on a Mac because it is a great platform for "creative professionals". And indeed it's not hard if you just want to print one column of 80 characters. You can even do that in TextEdit, where you pick a plain text font and font size so that lines don't wrap, and there you go. If you are using a more capable GUI text editor like TextWrangler (I use Emacs all the time but I don't know about printing from Emacs), you are given more customization options like header and line numbers. However, 80 character lines look awful on a 8.5'' wide page. Characters are HUGE (to me anyway). Note that monospaced fonts usually look better when they are smaller (I'm a <a href="http://zmwangx.github.io/blog/2015-08-31-after-all-these-years-10pt-non-anti-aliased-monaco-is-still-the-best.html">10pt bitmap Monaco fan</a>), and do keep in mind that we are usually farther away from a computer screen than a piece of paper held in hand, so even "10pt" could look pretty big in print. Moreover, you most likely get the outlined version of your font in print rather than the bitmap version, which depending on your font of choice might not be a good thing, and the difference is amplified when characters are big. And above all, you waste a lot of paper this way, and create stapling problems for yourself when the document is long. In short, I don't find it a good solution.</p>
<p>It would be much nicer if we could print in two columns. The characters will be pretty small so it's probably not very good for older people (or they could try two columns in landscape), but I'm still pretty young and have fairly good eyesight, so I like this idea. But turns out this is nontrivial with existing GUI programs, at least the ones that I know of. You could emulate the two-column layout by having four pages on one sheet, but it's really awkward because you get a page divider in each single column (waste of space), and page numbering would be all messed up. Other than that there's little you could do. I guess there's just not enough market for this particular need. Luckily we have a large selection of modular command line utilities that we can stitch together for great results. I'll cut the bullshit here and just show you the <span id="code">code</span> (for US letter):</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">curl</span> https://www.gnu.org/software/bash/manual/bash.txt \
    <span class="kw">|</span> <span class="kw">pr</span> --columns=2 --width=168 --length=120 --form-feed --date-format=%Y-%m-%d --header=<span class="st">"Bash Reference Manual"</span> - \
    <span class="kw">|</span> <span class="kw">enscript</span> --media=Letter --header= --font=Courier5.5 --margins=18:18:0:18 --output - \
    <span class="kw">|</span> <span class="kw">ps2pdf</span> - bash-print.pdf</code></pre></div>
<p>Here, as an example, I'm printing the ASCII text version of the Bash Reference Manual. <code>pr</code> ships with <code>coreutils</code> (OS X also ships with the BSD version of <code>pr</code>, but geez, I'm a <code>coreutils</code> fan), so if you just <code>brew install coreutils</code> then you should use <code>gpr</code> instead. <code>enscript</code> here is <a href="https://www.gnu.org/software/enscript/">GNU Enscript</a>, which could be installed with <code>brew install enscript</code> (credit to <a href="https://askubuntu.com/questions/27097/">Ask Ubuntu</a> for pointing me to this utility). <code>ps2pdf</code> ships with GhostScript, so you could do <code>brew install gs</code>, but you should already have it if you've got the MacTeX or TeXLive distribution installed. The options I'm using should be pretty self-explanatory and tweakable, but in case you don't understand something, just RTFM (that way you could also find more options). Anyway, a page of <code>bash-print.pdf</code> from the above looks like this (this one happen to be a 72-char-per-line document, whereas my numbers are tailored for 80; the image is at 300 ppi):</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151010-bash-print-sample-page.png" target="_blank"><img alt="Sample page from bash-print.pdf generated above. I drew a black, one-pixel border so you could tell the page from the background." src="http://zmwangx.github.io/img/20151010-bash-print-sample-page.png"/></a>
<p class="caption">Sample page from <code>bash-print.pdf</code> generated above. I drew a black, one-pixel border so you could tell the page from the background.</p>
</div>
<p>P.S. Preview.app on El Capitan just caught me by surprise. If memory serves, exporting PDF to PNG in Preview.app used to produce only one image for the current page, but now apparently you get a single, gigantic <a href="https://en.wikipedia.org/wiki/APNG">APNG</a> with each page in a frame. It's not very useful at 10 fps, though. Also, exporting to JPEG doesn't give you an MJPEG.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-10-printing-long-80-character-per-line-plain-text-document-in-two-columns.html</guid><pubDate>Sun, 11 Oct 2015 05:35:15 GMT</pubDate></item><item><title>We need an OS X security white paper</title><link>http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html</link><description><![CDATA[

<p>Apple has been offering an excellent <a href="https://www.apple.com/privacy/docs/iOS_Security_Guide.pdf">iOS Security White Paper</a> since at least 2012, and it's very informative. I highly encourage everyone to read it. It even explains some annoyances of iOS; for instance, <a href="http://www.relay.fm/upgrade/56">this week's Upgrade episode</a> discussed, <a href="https://daringfireball.net/linked/2015/10/01/upgrade-56">in Gruber's words</a>, "the lousy, painstaking, and at times downright confusing experience of migrating to a new iOS device", and once you read the white paper you'll realize that many things just can't be migrated due to iOS's hardware security model &#8212; basically, certain classes of data are encrypted with crypto keys baked into the silicon (see the section "Hardware security features"). I'm not saying the migration experience should be this painful (I would love to see it fixed or improved), but at least there's an explanation.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html#fn1" id="fnref1"><sup>1</sup></a></p>
<p>But I digress. This post is about OS X. I've been hunting for an OS X equivalent for a while now, but I don't think it exists. And recently people are talking about Apple's <a href="https://www.apple.com/privacy/">updated Privacy website</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html#fn2" id="fnref2"><sup>2</sup></a>, so I went there with a glimmer of hope. End result: no luck. In fact, Apple links to its iOS Security White Paper at the bottom of "<a href="https://www.apple.com/privacy/approach-to-privacy">Our Approach to Privacy</a>":</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151003-ios-security-white-paper-but-no-osx.png" target="_blank"><img alt="iOS Security White Paper linked, but no OS X." src="http://zmwangx.github.io/img/20151003-ios-security-white-paper-but-no-osx.png"/></a>
<p class="caption">iOS Security White Paper linked, but no OS X.</p>
</div>
<p>But there's little to no mention of OS X (the words "Mac" and "OS X" each appears only once on the page). This is not surprising; OS X as the second class citizen is nothing new, and iPhones and Apple Watches are arguably more intimate, and hence more private devices &#8212; at least for most people. It is somewhat disappointing though.</p>
<p>I forgot to mention why I would like to see an OS X security white paper. The reason is simple: a lot of security features are under-explained. For instance, I might want to learn more about FileVault: why am I given the choice of decrypting my drive with iCloud &#8212; I believe it's not the case on iOS? How does iCloud handle my disk encryption key, if I allow it access (I don't)? Or I might want to learn more about System Integrity Protection: does it auto revert (or repair, in their eyes) some permissions (e.g., that of <code>/usr/local</code>), as I heard people talking about? Or maybe more about code signing and the inner workings of Gatekeeper: there's <a href="http://arstechnica.com/security/2015/09/drop-dead-simple-exploit-completely-bypasses-macs-malware-gatekeeper/">recent news</a> of Gatekeeper workarounds. I guess some of these stuff can be found in Apple's support documents or developer documentation if you look hard enough, but it would be nice if the major security features and their implementations are presented coherently in a single document. Maybe the OS X security model is too complex and diverse to fit into a single document? I don't know. Anyway, I'll keep waiting.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Loss of certain classes of protected data (due to hardward crypto keys) during migration should in principle only apply to migration by "restoration". What about providing a direct phone-to-phone migration, where data could be decrypted and transferred on the fly? But that would at least require a lightning male to lightning male cable (or you would have to entrust your most sensitive data, which shouldn't even leave the phone under normal conditions, to your Wi-Fi, something Apple probably wouldn't do), and having to use a different, and actually unheard-of cable isn't very realistic, so it won't be happening any time soon.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>I haven't read through everything, but the idea of a <a href="https://www.apple.com/privacy/privacy-policy/">non-law-practicing-human readable privacy policy</a> is great.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-03-we-need-an-os-x-security-white-paper.html</guid><pubDate>Sat, 03 Oct 2015 10:34:24 GMT</pubDate></item><item><title>Auto hidden menu bar &amp; dock + maximized window is the new full screen mode</title><link>http://zmwangx.github.io/blog/2015-10-01-auto-hidden-menu-bar-dock-maximized-window-is-the-new-full-screen-mode.html</link><description><![CDATA[

<p>One nice feature of OS X El Capitan is that the menu bar can be auto hidden. Combined an auto hidden dock, we can now emulate the full screen experience with a maximized window while still enjoying overlayed windows, e.g., transparent terminal windows or "Picture in Picture" style small floating player. To see how closely a full screen experience is emulated this way, see the side-by-side screenshots below.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151001-maximized-window-vs-full-screen.png" target="_blank"><img alt="Maximized and full screen windows of Google Chrome side by side. Can you tell any difference apart from the color of the title bar and a bit of black bottom margin on the left?" src="http://zmwangx.github.io/img/20151001-maximized-window-vs-full-screen.png"/></a>
<p class="caption">Maximized and full screen windows of Google Chrome side by side. Can you tell any difference apart from the color of the title bar and a bit of black bottom margin on the left?</p>
</div>
<p>I've always liked maximized windows much better than full screen windows. (Maybe this is part of the legacy from my early Windows days? Anyway, to Microsoft's credit, Windows <em>is</em> better in certain aspects, e.g., File Explorer. You see, I'm still fighting Finder to this day. Window maximization is also something that Windows does better, although I do like OS X's universal menu bar and hate the Windows menus that could appear in all kinds of surprising places.) There are legit reasons to perfer maximized windows over full screen. One obvious advantage is persistent window stacking, which has already been mentioned. Moreover, sometimes I need to temporarily bring up another app for a quick task, which is to say I need something like iOS 9's Slide Over &#8212; but on the desktop slide-over already comes for free with window overlay. In full screen mode, however, the second app will be opened in another desktop space with lavish animation of switching, and when I'm done I need to swipe back to the original space, again with lavish animation, instead of just &#8984;H to hide. Do it several times in quick succession and it's a pretty nauseous experience (of course I'm exaggerating, but it's certainly neither comfortable nor productive).</p>
<p>In short, maximized windows have always been great, and now they are getting even better.</p>
<p>P.S. I personally don't have many informational moving parts in the menu bar. There's date time down to seconds, but I have an Apple Watch on my wrist, and I don't mind raising my wrist for a few seconds when I need the time. There's a battery icon which I certainly won't look at constantly &#8212; my MBP is plugged in most of the time. There's a Dropbox icon that would animate when it is syncing, which I don't care. Other than that, all icons are still. Therefore, I can totally do away with the menu bar until I really need it.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-01-auto-hidden-menu-bar-dock-maximized-window-is-the-new-full-screen-mode.html</guid><pubDate>Thu, 01 Oct 2015 22:48:59 GMT</pubDate></item><item><title>Upgrading to El Capitan</title><link>http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html</link><description><![CDATA[

<p>I upgraded to El Capitan last night, and the experience is pretty painless. To be accurate, I'm not really upgrading in place &#8212; I always perform a clean install for each major OS upgrade to avoid subtle breakage later on. Therefore, what I did instead was to <code>rsync</code> out all my valuable data and state information<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fn1" id="fnref1"><sup>1</sup></a> to an external drive, wipe the internal drive clean, install new OS from scratch, then <code>rsync</code> everything back in. <code>rsync</code> is really good at this stuff (I affectionately alias <code>rsync -avP</code> to <code>r</code> during transfers in and out), and it is simply amazing at dropping the right stuff at the right place, including data deep down <code>~/Library/Containers</code>, without interfering with the existing structures<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fn2" id="fnref2"><sup>2</sup></a>. With data and state info ready, reinstalling programs is also easy, thanks to my recently finished <a href="http://zmwangx.github.io/blog/2015-08-25-automated-os-x-provisioning.html">automated provisioning system</a>. It was the first time I used it outside a VM to provision an OS from almost scratch, and I'm really happy with it.</p>
<p>Thus far, most of my programs and applications seem to work just fine on El Capitan. I needed to <code>brew reinstall pyenv --HEAD</code> because an OpenSSL fix for El Capitan hasn't made into a release yet. Some of XtraFinder's features<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fn3" id="fnref3"><sup>3</sup></a>, including my most needed auto resizing columns, don't seem to work on El Capitan yet, and I'll have to contact the developer soon. The only distratrous incompatibility I've seen lies with Mathematica 9; <code>codesign -vvvv Mathematica.app</code> on the v9.0.1 app bundle says <code>resource envelope is obsolete (version 1 signature)</code>, and OS X downright refused to open the app, offering me no option other than trashing the app, even when I temporarily set Gatekeeper to "Any". Anyway, I quickly paid to upgrade to v10.2.0 (cost of free OS upgrade, geez), and it ran happily afterwards. Those were basically all I had to deal with. I haven't set up my mail accounts<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fn4" id="fnref4"><sup>4</sup></a> and printer yet, but hopefully they will work, and just hopefully Apple Mail finally got it right this time&#8482; and won't ask me to reauthenticate with Gmail all the time.</p>
<p>Overall it was pretty good experience. Nevertheless, I was caught by surprise at least twice, due to subtle user-facing changes in the OS. Actually these surprises motivated me to write this post.</p>
<p>First, <u>the OS seems to default to using the iCloud password (i.e., the Apple ID password) as the local account password now.</u> Maybe I missed a checkbox during setup (unlikely), and maybe it was nothing new (I don't think so), but I only realized this when I needed to <code>sudo</code> on the new OS for the first time. I typed my usual local password thrice, no luck. Did I accidentally gave my 1Password master password? Thrice, no luck. Did I accidentally used Vagrant's default password (i.e., <code>vagrant</code>, however unlikely)? This one is short enough and I didn't need to type it thrice to realize it was wrong &#8212; I knew that all along anyway. Did I... No, I couldn't have used anything else (literally ten minutes ago) without remembering it. I was completely horror-struck at that point, but speaking of remembering, I didn't even remember giving a password hint! So could it be... Yes, I typed in my 32 character long iCloud password, and this time it was right. I quickly realized after the fact that this setting could be toggled in the standard System Preferences -&gt; Users &amp; Groups -&gt; Change Password... (see screenshot below), so if you are in this situation, don't panic. I don't like this move though. Hopefully Apple won't degrade to Microsoft's level at some future point, where you either sign in with a Microsoft account (and have to type your Microsoft password to log in) or miss out on cloud features with a local account.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151001-osx-el-capitan-icloud-password-to-log-in.png" target="_blank"><img alt="Screenshot taken after I've changed to a local password. After initial setup, it would be the reverse." src="http://zmwangx.github.io/img/20151001-osx-el-capitan-icloud-password-to-log-in.png"/></a>
<p class="caption">Screenshot taken after I've changed to a local password. After initial setup, it would be the reverse.</p>
</div>
<p>Secondly, <u>three finger drag, a multitouch gesture that I use all the time to move windows on screen, is now mysteriously gone from System Preferences -&gt; Trackpad</u> (it used to be in "Touch &amp; Click"):</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151001-osx-el-capitan-wheres-my-three-finger-drag.png" target="_blank"><img alt="Where's my beloved three finger drag? By the way, since it is shown in this screenshot, I'll officially declare here that I'm a tap-to-click wizard." src="http://zmwangx.github.io/img/20151001-osx-el-capitan-wheres-my-three-finger-drag.png"/></a>
<p class="caption">Where's my beloved three finger drag? By the way, since it is shown in this screenshot, I'll officially declare here that I'm a tap-to-click wizard.</p>
</div>
<p>Maybe Apple found it somewhat confusing with the three finger tap/click, which is clearly a different gesture. I found the solution in an Apple Support document, <a href="https://support.apple.com/en-us/HT204609">Turn on "three finger drag" for your Force Touch trackpad</a>, while my trackpad is clearly not Force Touch (the document was written for Yosemite, so clearly the reorganized settings started out on the MacBook One and newer Retina MacBook Pros in Yosemite and spreaded to all Macs in El Capitan). Anyway, the gesture could be turned on in System Preferences -&gt; Accessibility -&gt; Mouse &amp; Trackpad Options... -&gt; Enable dragging. That was godawful, no one could possibly find it, but hopefully it's hidden there because of the confusion rather than Apple intentionally phasing it out.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20151001-osx-el-capitan-three-finger-drag-there-it-is.png" target="_blank"><img alt="Oh, there it is!" src="http://zmwangx.github.io/img/20151001-osx-el-capitan-three-finger-drag-there-it-is.png"/></a>
<p class="caption">Oh, there it is!</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>State information includes <code>~/.config</code> and <code>~/.local</code>, Google Chrome and Firefox profiles, Messages archive, Mathematica customizations, Unclutter notes, VMware Fusion inventory, various important plists, and so on and so forth.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Unless you are stupid enough to specify the <code>--delete</code> flag when you transfer in.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>As mentioned in <a href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html">The sad state of Finder on El Capitan</a>, I've disabled SIP and am running XtraFinder. I simply can't live with the stock Finder, that is, without code injection.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>Setting up mail accounts is the most painful thing in the world, especially if you have a dozen of them for different tasks.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html#fnref4">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-10-01-upgrading-to-el-capitan.html</guid><pubDate>Thu, 01 Oct 2015 18:46:44 GMT</pubDate></item></channel></rss>
