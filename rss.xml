<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><atom:link href="http://zmwangx.github.io/rss.xml" rel="self" type="application/rss+xml"/><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><description>Zhiming Wang's personal blog</description><language>en-us</language><managingEditor>zmwangx@gmail.com (Zhiming Wang)</managingEditor><webMaster>zmwangx@gmail.com (Zhiming Wang)</webMaster><pubDate>Sat, 08 Aug 2015 21:05:44 GMT</pubDate><lastBuildDate>Sat, 08 Aug 2015 21:05:44 GMT</lastBuildDate><generator>pyblog (https://github.com/zmwangx/zmwangx.github.io)</generator><docs>https://validator.w3.org/feed/docs/rss2.html</docs><image><url>http://zmwangx.github.io/img/icon-100.png</url><title>dl? cmplnts?</title><link>http://zmwangx.github.io/</link><width>100</width><height>100</height></image><item><title>Switching to capitalized commit messages</title><link>http://zmwangx.github.io/blog/2015-08-05-switching-to-capitalized-commit-messages.html</link><description><![CDATA[

<p>This post is a note to self.</p>
<p>As a long time git user, I've always used lowercase commit messages (in the subject line). I never quite liked the idea of capitalized commit messages, which are seldom complete sentences (and they are never period-terminated). Similarly, I avoid capilatization like hell in comments, unless when I write complete sentences. By the way, there's a technical advantage of writing lowercase commit messages: I can easily tell my human-made commits from auto commits like merge and revert commits, because they always begin with a capitalized "Merge", "Revert", etc.</p>
<p>However, most of the projects I've contributed to seem to prefer capitalized commit messages, and by following my own habit, quite often I would go through the "oh crap I messed up the contribution guidelines" realization and had to amend my commits after the fact. Also, when I open a single-commit pull request on GitHub, the subject line of the commit message automatically becomes the subject line of the pull request, and I want my pull requests to have capitalized subject lines. Perhaps I come off as self-contradictory here: lowercase commit message, but capitalized PR subject? I don't know. Maybe a PR subject is more like a real "title". Also, I blame the font: lowercase subject lines don't look remotely as good in, say, Helvetica (which GitHub currently uses for PR and commit message subject lines), as in a good fixed width font, which is what I get when I run any <code>git-log</code> variant in a terminal.</p>
<p>Anyway, lowercase commit messages isn't a particularly strong preference of mine, so I'm happy to change my habit from this day onward. Anyone can feel free to tease me if they see me write a lowercase commit message again (unless its in the format <code>component: changes</code>). In light of this, I've already <a href="https://github.com/zmwangx/zmwangx.github.io/commit/297225f2ab8a6db4fe75643f511f52499b052aa7">changed the message format</a> of <code>pyblog</code>'s auto commits, which is how I generate this blog.</p>
<p>P.S. To be fair to me, <em>Pro Git</em>, the official git tutorial, <a href="https://github.com/progit/progit2/blob/6d9867ff2394cb8a08fa3e013b082a7ae547b8af/book/02-git-basics/sections/viewing-history.asc#viewing-the-commit-history">uses lowercase commit messages</a> (I guess that's just the personal preference of Scott Chacon &#8212; not mandated by anyone). To be fair to the other side, <a href="https://github.com/git/git/commit/e83c5163316f89bfbde7d9ab23ca2e25604af290"><code>git.git</code> mostly uses capitalized commit messages</a>.</p>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-05-switching-to-capitalized-commit-messages.html</guid><pubDate>Thu, 06 Aug 2015 02:38:37 GMT</pubDate></item><item><title>Should Apple split up iTunes on OS X?</title><link>http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html</link><description><![CDATA[

<p>These days everyone seems to be talking about how complicated iTunes is and how Apple should give it a clean-sheet rewrite. This is not new, but the argument has certainly intensified ever since the introduction of iCloud Photo Library and Apple Music. For one recent example, see <a href="http://www.marco.org/2015/07/26/dont-order-the-fish">Don't order the fish</a> by Marco Arment. I was listening to John Gruber's <a href="https://daringfireball.net/thetalkshow/2015/07/29/ep-127">The Talk Show episode 127</a> earlier today (a little bit late to the game, yeah), and the complexity argument was brought up yet again.</p>
<p>I just can't buy that argument. (Disclaimer: in this post I'm talking about UI/UX, not the backend.) Granted, there are many tabs in iTunes. There's one for music, one for movies, one for TV shows, one for podcasts, one for iOS apps, one for each iOS device currently connected via USB, and so on. You can hide some of them if you don't use them. And for each of these tabs there are probably subtabs, and occasionally a sidebar. This might sound rather intimidating to the faint-hearted, but if you really dive into iTunes, you'll find that 99% of the functionalities you'll ever need to find or organize your stuff are under four clicks away<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn1" id="fnref1"><sup>1</sup></a>, and editing metadata (including batch editing) is pretty easy too. All in all, iTunes as it currently stands is both powerful (too many things on the plate, in some people's words) and not badly complicated, in the sense that you can certainly find your way around if you try. Some would argue that some of iTunes' features get shuffled into different places from version to version; yeah that's annoying, but in reality it usually takes less than five minutes to find all I need in a new version.</p>
<p>For people who just buy their content from iTunes Store<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn2" id="fnref2"><sup>2</sup></a> and never organize again, there are probably too many unnecessary subtabs and sidebars, but hey, do they need to touch these controls at all? There's a search bar that works reasonably well accross the entire content library<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn3" id="fnref3"><sup>3</sup></a>. For people who do organize their stuff, or do routinely import music and videos from outside, or do sync their devices via USB, most of those controls are great and necessary.</p>
<p>One disclaimer, by the way: maybe Apple Music made things more confusing. I don't know because I didn't even sign up for the free trial.</p>
<p>Now think about splitting up iTunes. As on iOS, you get a Music app, a Videos app, a Podcast app, an iTunes U app, and a separate iTunes Store app. Probably yet another one for managing your iOS devices, since that belongs to none of the above. So, what do you save by having all those apps? You save one click when you switch focus to another area? Well, not even that at times: now you need to switch apps. Moreover, what if I use several of those routinely (I do)? Do I have to keep all of them on my dock? Even if I don't keep them in Dock, as long as they're open they'll show up anyway, and that would be beyond horrible for people who care about their docks. This is my current dock:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150805-my-current-dock.png" target="_blank"><img alt="My current Dock. Note that I have the old red iTunes icon from 12.1, because I really can't stand the white one from 12.2. I know that's the future in El Capitan and iOS 9 (it looks reasonable on iOS 9 by the way, I've been using public betas since day one), but I'll just be stubborn this time, without much real cost." src="http://zmwangx.github.io/img/20150805-my-current-dock.png"/></a>
<p class="caption">My current Dock. Note that I have the old red iTunes icon from 12.1, because I really can't stand the white one from 12.2. I know that's the future in El Capitan and iOS 9 (it looks reasonable on iOS 9 by the way, I've been using public betas since day one), but I'll just be stubborn this time, without much real cost.</p>
</div>
<p>iTunes, where I playback music and manage my entire content library<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn4" id="fnref4"><sup>4</sup></a>, nicely takes up only one slot, which is the most reasonable thing to have. On iOS where apps can't have too many tabs or subtabs, it certainly makes sense to split the functionalities; on OS X where you do have space to host those tabs or subtabs, I fail to see how complexity warrants refactoring, especially when refactoring would introduce other problems.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn5" id="fnref5"><sup>5</sup></a> <a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn6" id="fnref6"><sup>6</sup></a></p>
<p>Speaking of complexity, iTunes isn't even remotely as complex as, say, Microsoft Word or Adobe Photoshop. Those are of course nightmares to most people, but the point is that iTunes isn't a nightmare &#8212; it's pretty manageable, especially to power users and developers, who are the ones complaining most loudly. Also, nothing can beat the complexity of the web browser. We browse all kinds of web pages and use all kinds of web apps everyday, all inside the browser, which can hold arbitrarily many tabs with completely different UIs. We don't complain about the browser. Then why do we complain about iTunes, which is a consistent mix of essential functionalities across different areas of our multimedia experience?</p>
<p>It's true that everyone has their iTunes pet peeves. For instance, I hate the stupid new icon and the useless Apple Music related tabs that I can't turn off in 12.2. The biggest gripe I have with 12.2 is probably the small, hardly noticeable rotating circle at the far upper-right corner of the window,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fn7" id="fnref7"><sup>7</sup></a> which now hosts the progress indicators of certain IO operations such as downloads and copying files to devices. To me it's a step backwards. Previously downloads was in a separate popup window and file copying had a place in the central area, visible whichever app you are in, but now I have to look for the visual indicator and all of a sudden remember that oh, it has been moved to that remote corner; even then I have to keep focus on iTunes, or the progress indicator dropdown would disappear. It seems all random that the progress of device syncing (and any copy operations initiated as part of the sync) should be front and center, while manually copying files to apps should retreat to the corner. Nevertheless, these minor or not-so-minor annoyances (honestly annoyances exist in almost every app) doesn't justify an iOS-like approach, which has its own drawbacks. I would be really mad if one day I need to run multiple apps just to manage the stuff on my phone.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Just a rough estimate off the top of my head; please don't challenge me or hold me responsible.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>I'm actually increasingly inclined to this approach. Having lossless music shipped on CDs (sometimes with extra goodies) is nice, but having age-old CDs and goodies lying around, taking up space and gathering dust is less enjoyable.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>"Reasonably well" at least on my not-so-large content library.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>I should probably say "my entire content library visible to iOS" instead, since my non-ITMS, DRM-free videos are mostly not in iTunes. It certainly can't keep my Matroska videos anyway.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>For instance, where should music videos live?<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref5">&#8617;&#65038;</a></p></li>
<li id="fn6"><p>By the way, Microsoft seems to have a split experience in Windows 10. Do people like it? The answer seems to be no.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref6">&#8617;&#65038;</a></p></li>
<li id="fn7"><p>Previously what would appear in that corner is the downloads icon, but anyone who has experienced both versions would tell you that the downloads icon is at least much more visible than the new rotating circle. The downloads icon was a dark gray blob, whereas the new thing is a few thin arcs.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html#fnref7">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-05-should-apple-split-up-itunes-on-os-x.html</guid><pubDate>Wed, 05 Aug 2015 21:09:51 GMT</pubDate></item><item><title>Sync Chrome bookmarks with Safari on OS X</title><link>http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html</link><description><![CDATA[

<p><strong>TL;DR</strong>: <a href="https://github.com/zmwangx/safari-sync-chrome-bookmarks">zmwangx/safari-sync-chrome-bookmarks</a>.</p>
<hr/>
<p>I've been reading quite a bit of stuff on my iPhone 6 Plus these days, especially since I got my Apple Watch (not quite sure why these two things are correlated, but they are). I used to read subscribed content in Feedly, but abandoned that a while ago since Feedly does an unbearably bad job at updating my one-subscriber feeds,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn1" id="fnref1"><sup>1</sup></a> e.g., Ars Premier feed, GitHub release feeds, etc. Ever since then, I've been rocking a local Leaf engine on my Mac but lost access on my phone,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn2" id="fnref2"><sup>2</sup></a> and had to rely on bookmarks.</p>
<p>However, as a Chrome user on the desktop and only on the desktop (iOS Chrome sucks), I have trouble getting my Chrome bookmarks into mobile Safari. Apple developed an <a href="https://chrome.google.com/webstore/detail/icloud-bookmarks/fkepacicchenbjecpbpbclokcabebhah?hl=en">iCloud Bookmarks</a> extension for Chrome that allegedly syncs your bookmarks to iCloud<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn3" id="fnref3"><sup>3</sup></a>, but upon installing the extension for Mac Chrome, an error message pops up:</p>
<blockquote>
<p>The extension you are trying to install is designed to run on Windows 7 or 8. If you are using a Mac, your Safari bookmarks will automatically sync with your iPhone, iPad, and Mac when you sign in to iCloud on all your devices.</p>
</blockquote>
<p>The message is pretty clear: you have access to our browser, so you either use our browser or go fuck yourself.</p>
<p>So, what's next? Fortunately, recent versions of Safari (I'm currently running 8.0.7) has an import feature that comes in handy and does a pretty good job: "File -&gt; Import From -&gt; Google Chrome..." which lets you import either history or bookmarks or both. Once they are imported into desktop Safari, iCloud is pretty good at pushing it to mobile. I have no problem importing both, but the idea that I'll have to launch Safari and click click click click just to sync my bookmarks is beyond horrible.</p>
<p>Okay, remember we have another nightmare called AppleScript? And remember we have another nightmare within nightmare called GUI scripting? Yes, here's what we could do:</p>
<pre class="applescript"><code>#!/usr/bin/osascript
tell application "Safari" to activate
delay 1
tell application "System Events"
    tell process "Safari"
        tell menu bar 1
            tell menu bar item "File"
                tell menu "File"
                    tell menu item "Import From"
                        tell menu "Import From"
                            click menu item "Google Chrome&#8230;"
                            delay 1
                            keystroke return
                        end tell
                    end tell
                end tell
            end tell
        end tell
    end tell
end tell
delay 1
tell application "Safari" to quit</code></pre>
<p>Holy crap, look at that cascade.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn4" id="fnref4"><sup>4</sup></a> Anyway, in principle, this piece of crap works. In reality, well, it <em>sometimes</em> works. Because you know the nightmare called "assistive access", among other unreliabilities of poking around with system events:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150802-assistive-access-nightmare.png" target="_blank"><img alt="Familiar?" src="http://zmwangx.github.io/img/20150802-assistive-access-nightmare.png"/></a>
<p class="caption">Familiar?</p>
</div>
<p>On Yosemite at least, the pane to grant assistive access in System Preferences is three levels deep ("Security &amp; Privacy -&gt; Privacy -&gt; Accessibility"), behind an admin password, and most unfortunately, there's no way to grant access to individual executables through that pane, unless you are explicitly prompted about one, which may not happen when it should.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn5" id="fnref5"><sup>5</sup></a> <a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fn6" id="fnref6"><sup>6</sup></a> There's nothing I could do apart from granting access to both Terminal.app and iTerm.app and hope for the best. Not so surprisingly, just as demonstrated in my past encounters with GUI scripting, with access granted to the terminals, whether I'll get an "assitive access" error when running the script is completely hit-or-miss. This time it works, the next time it just stalls, and yet another time it emits the error... Oh god.</p>
<p>In order to raise the rate of success, there's one other trick we could try: package the script into an Automator app. This way we can grant access to the standalone app, and that helps a bit. That's what I did in <a href="https://github.com/zmwangx/safari-sync-chrome-bookmarks">zmwangx/safari-sync-chrome-bookmarks</a>. It still occasionally get stuck, probably because I have a freaking slow spinning HDD and Safari would sometimes take forever to launch; but the accessibility problem does seem to go away (provided that you re-grant access every time you make the tiniest modification to the app).</p>
<p>Now I can throw that into my crontab (launching Safari beforehand to avoid freezing up):</p>
<pre class="crontab"><code>55 04 * * * open -g -a safari &amp;&amp; sleep 30 &amp;&amp; open -g -a safari-sync-chrome-bookmarks</code></pre>
<p>or invoke on demand.</p>
<p>Horrible solution, yes. Anything better? I would love to hear about it, but I highly doubt there's any, unless we directly work with <code>~/Library/Application Support/Google/Chrome/Default/Bookmarks</code> and <code>~/Library/Safari/Bookmarks.plist</code>. Probably a good problem to tackle though, provided that someone would sit down and understand the formats of the two files.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I can understand that to reduce server load, they can't refresh the one-subscriber feeds at a rate, say, once per minute, but not being able to manually update, especially when you have a so-called "refresh" feature? Not cool. (What the manual "refresh" seems to do is to fetch Feedly's cached content.) Anyway, it's a freemium service with me running the free tier, so I can't really blame them.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Which RSS reader/service I'll use next on iOS is a question; I haven't got time to compare the various options yet. So many readers, so many aggregation services!<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>And also one for Firefox, it seems<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>There's another annoyance: <code>"Google Chrome&#8230;"</code> cannot be replaced with <code>"Google Chrome..."</code>, or you won't ever find that menu item.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>There might be a way round through poking with the system accessibility database as root; see <a href="https://github.com/jacobsalmela/tccutil">jacobsalmela/tccutil</a>. However, until I have time to carefully evaluate the code, I'll have to stay with System Preferences.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref5">&#8617;&#65038;</a></p></li>
<li id="fn6"><p>Yes, I can understand the security concerns, but having to jump through so many hoops just to get some damned GUI scripting to work is awfully frustrating &#8212; and that's when you assume that the damned thing would just work after you jump through the hoops.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html#fnref6">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-08-02-sync-chrome-bookmarks-with-safari-on-os-x.html</guid><pubDate>Mon, 03 Aug 2015 05:11:56 GMT</pubDate></item><item><title>The sad state of Finder on El Capitan</title><link>http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html</link><description><![CDATA[

<p>I was listening to <a href="http://atp.fm/episodes/128">Accidental Tech Podcast E128</a> today, which discussed the implications of Rootless (i.e. System Integrity Protection) at quite some length.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn1" id="fnref1"><sup>1</sup></a> Which stirred up my old worries about the Finder &#8212; I was briefly concerned about TotalFinder immediately after Rootless was announced in WWDC, but was quickly reassured and forgot that concern after learning that Homebrew (i.e. <code>/usr/local</code>) isn't affected, which attracted more of my attention.</p>
<p>Unfortunately, the concern is real. TotalFinder is dead on El Capitan: it has been monkey patching Finder.app all along, and that strategy apparently is killed by Rootless. BinaryAge has <a href="http://blog.binaryage.com/el-capitan-update/">announced</a> that TotalFinder won't be ported to El Capitan. It's a done deal.</p>
<p>This is actually not the first time I felt threatened as a TotalFinder fan<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn2" id="fnref2"><sup>2</sup></a>. Back in 2013, when Finder tabs was announced for Mavericks, there were <a href="http://discuss.binaryage.com/t/call-for-ideas-what-should-be-the-next-binaryage-product/243">hints from BinaryAge</a> that TotalFinder might be discontinued one day, because apparently Finder tabs is a "serious hit for our [BinaryAge's] business". However, it still survived all the way up till Yosemite. I had the hope that TotalFinder could die a peaceful, glorious death when Apple finally improved the stock Finder to a certain point; I didn't quite expect TotalFinder to die an abrupt death like this.</p>
<p>Now that I think about it, my expectations for Finder isn't very high. Just provide the following and I'll be pretty happy:</p>
<ol style="list-style-type: decimal">
<li>Auto-resize each column (one can already "Right Size All Columns Individually" through the right-click context menu from the column dividers &#8212; is it that hard or unreasonable to make that automatic?);</li>
<li>A way to quickly show and hide hidden files without leaving Finder;</li>
<li>Folders on top (when not sorting by kind) is a nice addition, but not a must;</li>
<li>Chrome-styled tab (instead of Safari-styled) would be a plus.</li>
</ol>
<p>Pretty simple, aren't they (except point 4, which won't happen in stock Finder for the forseeable future)? Especially point 1, which should be desirable for all users, power users and dummies alike. If TotalFinder (and the free alternative XtraFinder, for that matter) can do these just by monkey patching, then Apple with all the control and infinite resources definitely could do these.</p>
<p>Anyway, complaints aren't going to get me anywhere. What's next?</p>
<p>TotalFinder is dead.</p>
<p>XtraFinder<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn3" id="fnref3"><sup>3</sup></a> similarly monkey patches Finder, so it also won't work with Rootless enabled. The developer has no plan to drop its support though, and I've confirmed that so far the lastest version works well on El Capitan PB3 without Rootless, save for the auto-resize columns feature, which somehow has no effect. Hopefully it will be fixed.</p>
<p>The only other well-known Finder alternative is probably Path Finder, but being a standalone program<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn4" id="fnref4"><sup>4</sup></a> priced at $39.95, it seems both too full-blown and too expensive. Also, the "Path Finder 7" and "Upgrade &#8212; $19.95" on <a href="http://www.cocoatech.com/pathfinder/">the project's home page</a> aren't reassuring; it's probably a $20 per year program.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fn5" id="fnref5"><sup>5</sup></a> Moreover, even if I end up paying the money, I'm not even sure if it is going to be able to fully replace the experience around Finder. For instance, does the <code>open</code> command open directories in PathFinder? I highly doubt that. Not to mention my AppleScripts surrounding Finder. Heck, I just want a nicer Finder; why am I forced to a full (and probably not fully integrated) replacement.</p>
<p>Besides, Path Finder's roadmap is pretty ridiculous. A guy asked "<a href="http://support.cocoatech.com/discussions/problems/33611-will-path-finder-work-with-el-capitan">Will Path Finder work with El Capitan?</a>" on the support forum, and the reply was</p>
<blockquote>
<p>Unfortunately, I cannot provide you with any information regarding this at the moment. We will let you know once there will be an official release of Mac OS X El Capitan.</p>
</blockquote>
<p>Seriously? That sounds so last decade. Which developer is so tight-lipped today? And who waits for the final OS release only to announce the support schedule? If they can't keep up with the schedule (or haven't evaluated the situation yet), at least they can communicate honestly with customers. This kind of uncertainty will only drive people away. Hard to believe this is the support you get for $40 plus upgrade fees.</p>
<p>I don't know what I'll do in the end. Path Finder is probably not what I'm looking for, but maybe I'll give it a spin if they release an El Capitan ready version in time. Most likely though, I'll stick to stock Finder for a while, and if it turns out too painful, I'll just disable Rootless and sport a copy of XtraFinder. I don't think Rootless will be that useful for me anyway; I still believe it's game over once malware sneaks into my system, whatever privilege it claims. Whether Apple will further lock down the system in a future version is another story.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>It's interesting to listen to John Siracusa's take on the issue, by the way. I completely agree with him.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Well this time we're not really threatened; TotalFinder is just plain dead. Those "I run Snow Leopard and I won't upgrade" dudes are delusional, as I've pointed out more than once.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p><a href="http://www.trankynam.com/xtrafinder/">XtraFinder</a> is free, and it comes from the developer of <a href="https://www.trankynam.com/atext/">aText</a>, so I have good feelings about it. However, its annoucements and discussions take place on <a href="https://www.facebook.com/XtraFinder">Facebook</a>, which makes it awfully unprofessional...<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>From what I've heard.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>Mind you, TotalFinder charges nothing except the initial $18 investment, despite a lot of rewrite for each major version of OS X.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html#fnref5">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-30-the-sad-state-of-finder-on-el-capitan.html</guid><pubDate>Fri, 31 Jul 2015 06:59:09 GMT</pubDate></item><item><title>dl? cmplnts?'s web doesn't suck</title><link>http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html</link><description><![CDATA[

<p>I was reading <a href="http://blog.lmorchard.com/2015/07/22/the-verge-web-sucks/">Les Orchard's <em>The Verge's web sucks</em></a> just now, and inspired by his dignostics of his various daily reads, I also ran the performance meter on my very own blog. Fortunately, it doesn't suck<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html#fn1" id="fnref1"><sup>1</sup></a>:</p>
<blockquote>
<p>13 requests, 77.88 KB, 0.84s.</p>
</blockquote>
<p>Moreover, apart from a Google Analytics snippet and the occasional embedding with a <code>&lt;script&gt;</code> tag, this site is entirely static.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150725-performance-of-my-blog-requests.png" target="_blank"><img alt="HTTP requests upon visiting https://zmwangx.github.io/ (commit 3af1eaf)." src="http://zmwangx.github.io/img/20150725-performance-of-my-blog-requests.png"/></a>
<p class="caption">HTTP requests upon visiting <a class="uri" href="https://zmwangx.github.io/">https://zmwangx.github.io/</a> (commit <a href="https://github.com/zmwangx/zmwangx.github.io/tree/3af1eafde5afa9fbb4255135191d6d232cf81cee">3af1eaf</a>).</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150725-performance-of-my-blog-breakdown.png" target="_blank"><img alt="The breakdown." src="http://zmwangx.github.io/img/20150725-performance-of-my-blog-breakdown.png"/></a>
<p class="caption">The breakdown.</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Diagnostics generated on Firefox Developer Edition 41.0a2.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-25-dl-cmplntss-web-doesnt-suck.html</guid><pubDate>Sat, 25 Jul 2015 18:31:54 GMT</pubDate></item><item><title>GitHub experimental attachment formats: PDF, DOCX and PPTX!?!</title><link>http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html</link><description><![CDATA[

<p>I was browsing <a href="https://github.com/github/hub">github/hub</a>, and noticed something funny in the issue tracker:</p>
<blockquote>
<p>Attach more than just images: Now you can attach PDF, <strong>Word</strong>, and <strong>PowerPoint</strong> files to your comments on Issues and Pull Requests. This experimental feature is only available to some repositories.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn1" id="fnref1"><sup>1</sup></a></p>
</blockquote>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150719-github-attachment-new-formats.png" target="_blank"><img alt='"Attach more than just images: Now you can attach PDF, Word, and PowerPoint files to your comments on Issues and Pull Requests." WOW, JUST WOW.' src="http://zmwangx.github.io/img/20150719-github-attachment-new-formats.png"/></a>
<p class="caption">"Attach more than just images: Now you can attach PDF, Word, and PowerPoint files to your comments on Issues and Pull Requests." WOW, JUST WOW.</p>
</div>
<p>For a moment I wondered if today's April Fools', but apparently it isn't. Which makes me wonder: is GitHub expanding its customer base to grandparents? Or is this a heavily demanded feature on GitHub Enterprise by nontechnical managers and sales personnel? Attaching PDF to issues and PRs is already laughable enough; I just can't imagine any developer asking for Microsoft Office support. I mean, what should we do with those? Download those crap, wait ten minutes for Microsoft applications to launch, just to read a few pages of text? I know GitHub is expanding to designers by rolling out features like PSD diffing<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn2" id="fnref2"><sup>2</sup></a> and Large File Storage (<a href="https://git-lfs.github.com/"><code>git-lfs</code></a>) for assets, so is this feature also targeting nontechnical designers? Not sure. <strong>At any rate, this "feature" is simply ridiculous.</strong></p>
<p>GitHub has long been lacking good attachment support. Granted, one can dump files to gists and then link to them from issues, but that's a pain for most people (and not all people are aware of that). The lack of attachment support (other than images) is keeping some projects from hosting their issue trackers on GitHub, whose issue tracking system is otherwise extraodinary.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn3" id="fnref3"><sup>3</sup></a> One notable example that I care about is <a href="https://gitlab.com/gnachman/iterm2/issues">iTerm2</a>, which asks users to attach the user preference plist and a gzipped debug log when opening a new bug. <strong>Therefore, GitHub should improve their attachment support by accepting plain text files<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fn4" id="fnref4"><sup>4</sup></a>, small gzips, common binary config file formats like binary Plist XML and so on that developers care about. But instead, they are working on... Microsoft Office???</strong></p>
<p>My attitude towards Microsoft Office (mostly Word) is best described in a gist/tutorial that I wrote more than a year ago: <a href="https://gist.github.com/zmwangx/9987772"><em>Markdown, LaTeX, etc.</em></a>. The <a href="https://gist.github.com/zmwangx/9987772#tips-for-microsoft-office-users">"Tips for Microsoft Office users"</a> section is quoted out in full at the end of this post. My feelings toward Microsoft, and by extension, Office, has softened quite a bit since I wrote that tutorial (in particular, unlimited OneDrive storage for Office 365 subscribers was a pretty good bribe), but every word in that section still applies to Microsoft Word. <strong>It is just sad that so many people all around the globe are still stuck in this Microsoft hell, not knowing that they have been liberated, and that they could have been free all along. And this move by GitHub is definitely not helping.</strong></p>
<hr/>
<p><strong>Appendix.</strong> From my tutorial <a href="https://gist.github.com/zmwangx/9987772"><em>Markdown, LaTeX, etc.</em></a>:</p>
<blockquote>
<h2 id="tips-for-microsoft-office-users">Tips for Microsoft Office users</h2>
<ol style="list-style-type: decimal">
<li>Stop using Microsoft Office, <strong>RIGHT NOW</strong>;</li>
<li>Do 1;</li>
<li>Do 2;</li>
<li>......</li>
</ol>
<h3>
Why I hate Microsoft Office
</h3>
<ol style="list-style-type: decimal">
<li><p>Microsoft Office is non-free, free both as in "free speech" and "free beer."</p></li>
<li><p>Microsoft Office is not only non-free, but also expensive.</p></li>
<li><p><code>.docx</code> is proprietary format. Microsoft has full control over it (correct me if I'm wrong). Hopefully they at least released it as a standard, so vendor lock-in won't happen. However, Microsoft could change mind any time.</p></li>
<li><p>Most Microsoft Word documents are text documents. But they are not readable and editable at all with text editors (in principle you could read and edit XML, but seriously, who would bother to do that). <strong>So why Microsoft Office when plain text is nice, elegant, efficient, fast, and free?</strong> Even when you need some formatting, there are Markdown and other plain text, human readble, and open source formats. I really hate it when people send me docx or ask me to send docx. Why assume I have the crap proprietary software installed? You could at least save as PDF before sending to me.</p>
<p>(PDF is another story. It started as proprietary, but was released free of charge a long time ago, and has since been made an open standard. There are a good number of great open source PDF generators, PDFLaTeX being one notable example. And after all, PDF and PostScript are intended for printers &#8212; they are not so easily made human readable without an interpreter, so using a proprietary format in this setting is reasonable.)</p>
<p>You might argue that docx can be edited with LibreOffice, OpenOffice, etc. However, first of all, documents created by Microsoft Office are not always (always not) rendered the same in these Offices; 100% compatibility has never been achieved. If you choose to work with Microsoft Office documents, you either be cheap and worry about lock-out/lock-in/damage/permanent damage (people who love Microsoft Office are often not competent enough to do back-up right), or throw your money at Microsoft. And point is: <strong>plain text is both free and reliable in the first place.</strong></p></li>
<li><p>Microsoft could change their pricing model at any time, just as Adobe did to their Creative Suite. They've already been exploring the subscription model via Office 365 for a while, which is $99.99 a year (home). In the future, Office might turn to subscription only, meaning that you would never have a full copy of your (already crappy) software that is guaranteed to work regardless of time, and that they could raise the subcription price at any time and drive you nuts instantly. (Microsoft recently released Office on iPad, which is already subscription only. Watch out for the trend.)</p></li>
<li><p>Forgot to highlight one major annoyance. As you already know, I hate Microsoft Office; however, as mentioned in 4, I'm forced to keep the crap installed and occasionally launch it (which takes something around ten minutes just to launch) thanks to other people who insist on Microsoft Office. Every single launch deepens the hatred.</p></li>
<li><p>(<em>05/04/2014</em> update) Apart from storage, transmission, and distribution, Microsoft Office &#8212; and word processors in general &#8212; are also bad for <em>writing</em>. To quote the <a href="http://asciidoctor.org/docs/what-is-asciidoc/">AsciiDoc official introduction</a>, the "Word processors, the real writer&#8217;s block" section,</p>
<blockquote>
<p>When you are in the writing (i.e., <a href="http://blog.stoyanstefanov.com/writing-vs-typing/">typing</a>) phase, you want the words to flow onto the screen with minimal distractions and interruptions. Flow, not just time, is essential.</p>
<p>Most word processor excel at distracting you from writing. The result: <em>you write less</em> (ironic, huh?).</p>
<p>In a word processor, before you can type the first word on a blank screen, you're forced to think about what font family you want, what font size you want, what lines spacing you want and so on. Once you do get going, auto-correct, spelling and grammar suggestions entice you to backtrack and lose your next thought. "Smart" quotes and auto-linking messes with the text as fast as you can enter it. If you paste text, it likely gets added to the document with a different font family, size and even color.</p>
<p><strong>Undo. Undo. Undo!</strong></p>
<p>Let's not even talk about inserting source code. The designers of word processors clearly did not.</p>
<p><strong>Format. Format. Format!</strong></p>
<p>After burning time fighting with its interface, you rightfully conclude that the word processor is trying to <em>sabotage</em> your writing process.</p>
<p><strong>We <em>need</em> an easier way to write!</strong></p>
<p>But how?</p>
</blockquote>
<p>It's kind of ironic to quote AsciiDoc in a document promoting Markdown, but at the very least, we are all against Word. This section is so well written that I can't resist the temptation to quote it out in full. Moreover, I actually typed it in myself to enjoy it to the fullest.</p></li>
<li><p>(<em>05/04/2014</em> update) By the way, there is more to quote against docx (and XML in general), this time from Linus Torvalds, in a <a href="https://plus.google.com/+LinusTorvalds/posts/X2XVf9Q7MfV">Google+ comment</a>:</p>
<blockquote>
<p>no [sic], XML isn't even good for document markup.</p>
<p>Use 'asciidoc' for document markup. Really. It's actually <strong>readable</strong> by humans, and easier to parse and way more flexible than XML.</p>
<p>XML is crap. Really. There are no excuses. XML is nasty to parse for humans, and it's a disaster to parse even for computers. There's just no reason for that horrible crap to exist.</p>
</blockquote>
<p>If you don't believe in me, you certainly believe in Linus don't you, who is much better at this art than you and me. If you don't even believe in Linus, you are not my reader in mind anyway.</p></li>
<li><p>There are infinitely many other reasons to hate Microsoft Office, <strong>which grabs money from the most basic workflow &#8212; text editing</strong>. The reasons to hate Microsoft Office occur infinitely often in the decimal expansion of &#960;.</p></li>
</ol>
</blockquote>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Bold by me.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>That's not even new; PSD viewing and diffing support has been around <a href="https://github.com/blog/1845-psd-viewing-diffing">for a year</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>At least compared to Bugzilla, Trac, (the user-facing part of) Jira and FogBugz, SourceForge, Google Code (now closed), BitBucket, Savannah, GitLab, etc.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>Whether a file is plain text or binary is usually easy to check. Just look for the <code>NUL</code> character (<code>\000</code>).<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html#fnref4">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-19-github-experimental-attachment-formats-pdf-docx-and-pptx.html</guid><pubDate>Mon, 20 Jul 2015 04:58:01 GMT</pubDate></item><item><title>Zsh: save stdout, stderr, and return value of command to different variables (without temp file)</title><link>http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html</link><description><![CDATA[

<p>This is something worth sharing. The idea was based on <a href="http://stackoverflow.com/a/18086548/1944784">this SO answer</a>, and I cooked up this particular implementation to remove potential race conditions, with input from Mathias Fredriksson<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html#fn1" id="fnref1"><sup>1</sup></a>. See <a href="https://github.com/mafredri/zsh-async/issues/1">mafredri/zsh-async#1</a>, and in particular <a href="https://github.com/mafredri/zsh-async/issues/1#issuecomment-121468958">this comment</a> for explanation.</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># The following construct evaluates "$@" and saves output on stdout in the</span>
<span class="co"># parameter stdout, output on stderr in the parameter stderr, and return value</span>
<span class="co"># in the parameter return.</span>
<span class="co">#</span>
<span class="co"># The idea was based on http://stackoverflow.com/a/18086548/1944784, but this</span>
<span class="co"># implementation is completely race-condition-free. The implementation was</span>
<span class="co"># refined during my exchange with Mathias Fredriksson @mafredri, in</span>
<span class="co"># https://github.com/mafredri/zsh-async/issues/1. See mainly</span>
<span class="co"># https://github.com/mafredri/zsh-async/issues/1#issuecomment-121468958, where</span>
<span class="co"># the advantage of this implementation is explained.</span>

<span class="kw">unset</span> stdout stderr ret
<span class="kw">eval</span> <span class="st">"</span>
<span class="ot">$(</span>
    <span class="kw">{</span>
        <span class="ot">stdout=$(</span><span class="kw">eval</span> <span class="st">"</span><span class="ot">$@</span><span class="st">"</span><span class="ot">)</span>
        <span class="ot">ret=$?</span>
        <span class="kw">typeset</span> -p <span class="ot">stdout</span> <span class="ot">ret</span>
    <span class="kw">}</span> <span class="kw">2&gt;</span> <span class="kw">&gt;(</span><span class="ot">stderr=$(</span><span class="kw">cat</span><span class="ot">)</span>; <span class="kw">typeset</span> -p <span class="ot">stderr</span><span class="kw">)</span>
<span class="ot">)</span><span class="st">"</span></code></pre></div>
<p>Also available as <a href="https://gist.github.com/zmwangx/efababea6258cedea07a">a gist</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Mathias (<a href="https://github.com/mafredri">@mafredri</a>) is the author of the lovely <a href="https://github.com/mafredri/zsh-async">zsh-async</a> library, and a maintainer of <a href="https://github.com/sindresorhus/pure">sindresorhus/pure</a>. He forever revolutionalized <a href="https://github.com/zmwangx/prezto/blob/master/modules/prompt/functions/prompt_zmwangx_setup">my prompt</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-07-15-zsh-save-stdout-stderr-and-return-value-of-command-to-different-variables-without-temp-file.html</guid><pubDate>Wed, 15 Jul 2015 16:21:47 GMT</pubDate></item><item><title>dl? cmplnts? in Apple News</title><link>http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html</link><description><![CDATA[

<p>I submitted this blog to Apple via <a href="https://developer.apple.com/news-publisher/">News Publisher</a> a few days after the WWDC keynote, just to get a feel for the submission process. It was easy; basically I just needed to provide an <a href="http://zmwangx.github.io/atom.xml">Atom 1.0</a> or <a href="http://zmwangx.github.io/rss.xml">RSS 2.0</a> feed, both of which I already have anyway.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fn1" id="fnref1"><sup>1</sup></a> I was told at the end of the submission process that my submission would be reviewed.</p>
<p>Just now, quite surprisingly, I got the acceptance email from News Publisher:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150629-news-publisher-acceptance-email.png" target="_blank"><img alt="Acceptance email from News Publisher." src="http://zmwangx.github.io/img/20150629-news-publisher-acceptance-email.png"/></a>
<p class="caption">Acceptance email from News Publisher.</p>
</div>
<p>The link to my channel appears to be</p>
<blockquote>
<p><a class="uri" href="https://news.apple.com/TdEf82WUNSQeNOsvYyyu48Q">https://news.apple.com/TdEf82WUNSQeNOsvYyyu48Q</a></p>
</blockquote>
<p>But at the time of writing, trying to open this page just turns up a "sorry, this item isn't available in Apple News". Not sure if the page hasn't been updated, or if I really need an iOS 9 device to access. My current guess is the former &#8212; there's no reason Apple won't provide a channel preview in good ol' HTML.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fn2" id="fnref2"><sup>2</sup></a> I don't have an iOS 9 device yet, so I don't know how well my content, especially preformatted code blocks, will fare in News. Either way I won't adjust my content, but it would be fun to see the capabilities of Apple's official "RSS reader".</p>
<hr/>
<p><em>June 30, 2015 update:</em> The page has been updated, and now the message makes much more sense:</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150630-dl-cmplnts-on-apple-news.png" target="_blank"><img alt="Apple News is coming soon. This channel or topic is only available in Apple News." src="http://zmwangx.github.io/img/20150630-dl-cmplnts-on-apple-news.png"/></a>
<p class="caption">Apple News is coming soon. This channel or topic is only available in Apple News.</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Of course my content isn't really optimized for the Apple News format, but why would I care.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Or maybe they will only open up regular browser traffic after iOS 9 stable is released.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-29-dl-cmplnts-in-apple-news.html</guid><pubDate>Tue, 30 Jun 2015 06:14:42 GMT</pubDate></item><item><title>Automatically clean up "Previous Mobile Applications"</title><link>http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html</link><description><![CDATA[

<p>iTunes keeps a "Previous Mobile Applications" folder of questionable value, which always annoys me. It eats into disk space and wastes syncing/backup cycles and bandwidth; you can easily find horror stories online about <a href="http://forums.macrumors.com/threads/5-years-of-deleted-iphone-apps-accumulated-in-my-itunes-library.1781676/#post-19749496">100GB+ PMA folders</a>. The value? You might be able to roll back to an earlier version, or restore an app pulled from the App Store. Really? I never had that need in my life<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html#fn1" id="fnref1"><sup>1</sup></a>; have you? Worst of all, there should be a periodic clean up option &#8212; just like how deleted mail are automatically purged after one month, but the option is missing.</p>
<p>Therefore, I wrote a trivial Python script to do the periodic cleanup. Feel free to grab my script below (also available at <a class="uri" href="http://git.io/previous-mobile-applications">http://git.io/previous-mobile-applications</a>) to save a few minutes of hacking. It should be plugged into a daily or weekly or monthly cron job (or the equivalent), and it writes data to <code>~/.local/share/itunes/previous-mobile-applications.json</code> by default. To customize, just modify the global constants.</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="co">"""Periodically clean up "Previous Mobile Applications" of iTunes."""</span>

<span class="im">import</span> arrow
<span class="im">import</span> datetime
<span class="im">import</span> json
<span class="im">import</span> os
<span class="im">import</span> sys

OFFENDING_DIR <span class="op">=</span> os.path.expanduser(<span class="st">"~/Music/iTunes/iTunes Media/Mobile Applications/Previous Mobile Applications"</span>)
STORAGE_DIR <span class="op">=</span> os.path.expanduser(<span class="st">"~/.local/share/itunes"</span>)
STORAGE_FILE <span class="op">=</span> os.path.join(STORAGE_DIR, <span class="st">"previous-mobile-applications.json"</span>)

DELETE_AFTER <span class="op">=</span> datetime.timedelta(days<span class="op">=</span><span class="dv">7</span>)

<span class="kw">def</span> load_storage():
    <span class="co">"""Load stored dictionary of seen apps from STORAGE_FILE.</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    seen_app_dict : dict</span>
<span class="co">        Dictionary of (app_filename, first_seen_date) key-value pairs,</span>
<span class="co">        where app_filename is str, and last_seen_date is datetime.date.</span>

<span class="co">    """</span>
    os.makedirs(STORAGE_DIR, mode<span class="op">=</span><span class="bn">0o700</span>, exist_ok<span class="op">=</span><span class="va">True</span>)
    <span class="cf">try</span>:
        <span class="cf">with</span> <span class="bu">open</span>(STORAGE_FILE, encoding<span class="op">=</span><span class="st">"utf-8"</span>) <span class="im">as</span> fp:
            serializable_seen_app_dict <span class="op">=</span> json.load(fp)
            <span class="cf">return</span> {app_filename: arrow.get(serialized_first_seen_date).date()
                    <span class="cf">for</span> app_filename, serialized_first_seen_date <span class="op">in</span> serializable_seen_app_dict.items()}
    <span class="cf">except</span> <span class="pp">OSError</span>:
        <span class="cf">return</span> {}

<span class="kw">def</span> write_storage(seen_app_dict):
    <span class="co">"""Write the dictionary of seen apps to STORAGE_FILE.</span>

<span class="co">    Parameters</span>
<span class="co">    ----------</span>
<span class="co">    seen_app_dict : dict</span>
<span class="co">        See the return format of load_storage().</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    0 or 1</span>
<span class="co">        Return code indicating success or failure.</span>

<span class="co">    """</span>
    <span class="co"># convert datetime.time to str (ISO 8601)</span>
    serializable_seen_app_dict <span class="op">=</span> {app_filename: first_seen_date.isoformat()
                                  <span class="cf">for</span> app_filename, first_seen_date <span class="op">in</span> seen_app_dict.items()}
    os.makedirs(STORAGE_DIR, mode<span class="op">=</span><span class="bn">0o700</span>, exist_ok<span class="op">=</span><span class="va">True</span>)
    <span class="cf">try</span>:
        <span class="cf">with</span> <span class="bu">open</span>(STORAGE_FILE, mode<span class="op">=</span><span class="st">"w"</span>, encoding<span class="op">=</span><span class="st">"utf-8"</span>) <span class="im">as</span> fp:
            json.dump(serializable_seen_app_dict, fp, indent<span class="op">=</span><span class="dv">2</span>, sort_keys<span class="op">=</span><span class="va">True</span>)
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> <span class="pp">OSError</span> <span class="im">as</span> err:
        sys.stderr.write(<span class="st">"error: failed to write to '</span><span class="sc">%s</span><span class="st">': </span><span class="sc">%s</span><span class="st">"</span> <span class="op">%</span> (STORAGE_FILE, <span class="bu">str</span>(err)))
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> main():
    <span class="co">"""Main.</span>

<span class="co">    Returns</span>
<span class="co">    -------</span>
<span class="co">    0 or 1</span>
<span class="co">        Return code indicating success or failure.</span>

<span class="co">    """</span>
    <span class="cf">if</span> <span class="op">not</span> os.path.isdir(OFFENDING_DIR):
        <span class="co"># good, you don't have that junk</span>
        <span class="cf">return</span> <span class="dv">0</span>

    today <span class="op">=</span> datetime.date.today()
    seen_app_dict <span class="op">=</span> load_storage()
    current_app_list <span class="op">=</span> os.listdir(OFFENDING_DIR)

    <span class="co"># boot already disappeared apps</span>
    <span class="cf">for</span> app <span class="op">in</span> [app <span class="cf">for</span> app <span class="op">in</span> seen_app_dict <span class="cf">if</span> app <span class="op">not</span> <span class="op">in</span> current_app_list]:
        seen_app_dict.pop(app)

    <span class="co"># add newly appeared apps</span>
    <span class="cf">for</span> app <span class="op">in</span> [app <span class="cf">for</span> app <span class="op">in</span> current_app_list <span class="cf">if</span> app <span class="op">not</span> <span class="op">in</span> seen_app_dict]:
        seen_app_dict[app] <span class="op">=</span> today

    <span class="co"># delete expired apps</span>
    returncode <span class="op">=</span> <span class="dv">0</span>
    newly_deleted_apps <span class="op">=</span> []
    <span class="cf">for</span> app <span class="op">in</span> seen_app_dict:
        <span class="cf">if</span> today <span class="op">&gt;=</span> seen_app_dict[app] <span class="op">+</span> DELETE_AFTER:
            app_path <span class="op">=</span> os.path.join(OFFENDING_DIR, app)
            <span class="cf">try</span>:
                os.remove(app_path)
                newly_deleted_apps.append(app)
            <span class="cf">except</span> <span class="pp">OSError</span> <span class="im">as</span> err:
                sys.stderr.write(<span class="st">"error: failed to remove '</span><span class="sc">%s</span><span class="st">': </span><span class="sc">%s</span><span class="st">"</span> <span class="op">%</span> (app_path, <span class="bu">str</span>(err)))
                returncode <span class="op">=</span> <span class="dv">1</span>

    <span class="cf">for</span> app <span class="op">in</span> newly_deleted_apps:
        seen_app_dict.pop(app)

    <span class="co"># write data to disk</span>
    returncode <span class="op">|=</span> write_storage(seen_app_dict)

    <span class="cf">return</span> returncode

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:
    exit(main())</code></pre></div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Full disclosure: unlike many people, I'm not very obsessed with my phone, and I only have about two dozen third-party apps.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-27-automatically-clean-up-previous-mobile-applications.html</guid><pubDate>Sun, 28 Jun 2015 04:19:59 GMT</pubDate></item><item><title>iOS 9: searchable Settings</title><link>http://zmwangx.github.io/blog/2015-06-26-ios-9-searchable-settings.html</link><description><![CDATA[

<p>Finally it's here. According to <a href="http://www.macrumors.com/2015/06/26/hidden-features-in-ios-9-and-os-x-el-capitan/">MacRumors</a>:</p>
<blockquote>
<p>Apple's introduced a wide range of feature additions and minor tweaks in iOS 9 that make some very useful improvements to iOS. For example, there's now a Notification Center widget that displays the battery life of connected devices like the Apple Watch, and <strong>there's a search bar in the Settings app that lets you find a specific setting very quickly.</strong></p>
</blockquote>
<p>Good to see <a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html">my wish</a> granted.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150627-macrumors-demo-ios9-searchable-settings.png" target="_blank"><img alt="A screenshot of iOS 9 Settings in action." src="http://zmwangx.github.io/img/20150627-macrumors-demo-ios9-searchable-settings.png"/></a>
<p class="caption">A screenshot of iOS 9 Settings in action.</p>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-26-ios-9-searchable-settings.html</guid><pubDate>Sat, 27 Jun 2015 06:59:28 GMT</pubDate></item><item><title>All problems solved!?</title><link>http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html</link><description><![CDATA[

<p>The project I've been working on intermittently over the past month, <a href="https://github.com/zmwangx/pyonedrive"><code>pyonedrive</code></a>, a OneDrive API v1.0 API/CLI client, is now quite satisfactory in terms of its feature set<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn1" id="fnref1"><sup>1</sup></a>, so today I'm thinking about what I should work on next. Of course there's <a href="https://github.com/zmwangx/pyonedrive/labels/enhancement">a lot more I can do</a>, but what is done already encapsulates 95%+ of my daily usage; moreover, as everyone knows, refining an existing project is not as exciting as starting a new one and making something happen that is previously tedious or impossible.</p>
<p>To my surprise, <em>I can't think of anything</em>. I now realized that I don't have many peculiar computing needs. I needed a storyboard generator which I couldn't find anywhere, <a href="https://github.com/zmwangx/storyboard">so I wrote one</a>, and got an <a href="https://storyboard.readthedocs.org/en/latest/metadata-cli.html">elegant FFprobe wrapper</a> for free. I hated the crappy CLI shipped with <a href="https://github.com/mk-fg/python-onedrive"><code>python-onedrive</code></a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn2" id="fnref2"><sup>2</sup></a> that constantly fails and dumps, so I <a href="https://github.com/zmwangx/pyonedrive">rolled my own</a> around the new API. In the process of coding up these two things, I learned quite a bit of Python &#8212; the kind of things I would never learn by reading tutorials or references alone. Other than these two, I need to interact with a few Web services and scrape a few Web sites, which are easily taken care of in bash/zsh/python (node might better serve some, but they ain't broke, so why rewrite). I also need some other CLI tools but those have been solved by existing projects, probably started by people with similar needs. Some of them need some clean-up and feature boost, e.g., <a href="https://github.com/soimort/you-get"><code>you-get</code></a>, but I'm not inclined to refactor or submit substantial PRs to other people's projects, so I usually just write my own wrappers to bypass their limitations.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn3" id="fnref3"><sup>3</sup></a> What else? Basically nothing.</p>
<p>So I'm in a strange situation that I feel like writing software for fun and profit, but don't have anything exciting to lay my hands upon (other than improving existing things). Of course I could learn my next language, but language learning without real world usage is likely to be futile. For instance, I would like to learn some Go or Rust, but why do I need a compiled, C/C++ replacement these days, when scripting takes care of all my personal needs? Not clear. Maybe it's a good time to concentrate on the real important things in my career.</p>
<hr/>
<p>Update: Whilst writing this post, I came up with a project after all. I always had the idea of keeping an encrypted journal &#8212; real encryption, not the fake "password protection" of DayOne.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn4" id="fnref4"><sup>4</sup></a> The journal should be decrypted &#8212; probably only into memory &#8212; upon entry (after securely typing in password), and each text/image object should be encrypted separately to ease syncing (so using an encrypted sparseimage won't work).</p>
<p>In principle an Emacs package should be able to do this, but going forward Elisp is a pretty horrible choice of language for anything substantial (think of, for example, threading, which there is none). Therefore, I'm inclined to write this in ObjC/Swift with Cocoa. This will be my first attempt at Cocoa programming, and my first serious involvement with Xcode (other than CLT, of course) after quite a few years<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fn5" id="fnref5"><sup>5</sup></a>. Actually I've always been looking for an excuse to learn some Swift.</p>
<p>Oops, am I falling into <a href="https://sivers.org/zipit">prematurely announcing my plans</a>? Hopefully not.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In fact it already exceeded my original expectations &#8212; <code>pyonedrive</code> started out as a <a href="https://github.com/zmwangx/pyonedrive/blob/4d21308545ec1462c3892b9ca25300042f1ccb81/README.rst">bare bones batch uploader</a>.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>I never bothered to look at the API.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>E.g., for <code>you-get</code>, I wrote a wrapper with concurrency support and much more surrounding <code>you-get</code>'s <code>--url</code> option. (But honestly, for whatever reason, links provided by <code>flvcd.com</code> for Chinese video streaming sites are much better than those parsed by <code>you-get</code> in terms of download speed, so these days I almost use <code>flvcd.com</code>'s <code>BigRats</code> exclusively, except when it similarly can't pick up a reasonable speed, in which case I would grind with my <code>you-get</code> wrapper, which was designed exactly for grinding.)<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>And DayOne's Markdown engine sucks, among other limitations, like the ridiculous one-image-per-entry.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>I used to use Xcode as a C++ IDE before I was introduced to the brave new world of command line wizardry.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html#fnref5">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-23-all-problems-solved.html</guid><pubDate>Wed, 24 Jun 2015 04:47:07 GMT</pubDate></item><item><title>The tip of the iceberg</title><link>http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html</link><description><![CDATA[

<p><em><strong>Disclaimer</strong>: While this post might have been triggered by a <a href="https://twitter.com/search?q=%23distractinglysexy">specific</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn1" id="fnref1"><sup>1</sup></a> campaign, I'm certainly not addressing any specific concern or siding with any party. I never bothered to learn enough about a specific campaign to form a judgement that I would stand by,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn2" id="fnref2"><sup>2</sup></a> since I simply don't care. I'm writing this post because I'm just too tired to see them popping up in my feeds every once in a while.</em></p>
<p><em>By the way, I'm not sure if I'm going to stand by this post when I wake up tomorrow morning. It will stay either way, though.</em></p>
<hr/>
<p>I have the impression that these days there's at least one public shaming campaign going on every week, justified by political correctness, and serving as a great outlet for school or workplace frustration accumulated during the week. And every now and then, a woman or man<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn3" id="fnref3"><sup>3</sup></a> is destroyed by such a campaign, although all she or he did was to make a somewhat flippant yet universally true,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn4" id="fnref4"><sup>4</sup></a> almost universally true, or at the very least, not-meant-to-be-offensive, remark.</p>
<p>On the face of it (e.g., retweet counts), you might be convinced that the world is seriously supportive of such campaigns. However, you have to realize that <em>the tens or even hundreds of thousands of campaigners are still just one tip of the iceberg called the society</em>. Behind every campaigner there are probably ten people holding opposite views, and one thousand who simply don't care either way<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn5" id="fnref5"><sup>5</sup></a>. Since political correctness is involved, how many people would you expect to be outspoken about their true opinions? Most likely people are muted by the fear of being politically wrong and being pursued and destroyed, just like the poor guy at the center of the storm. Moreover, I'm afraid that some (if not most) campaigners are not really offended, but just joining what they see as a hilarious ride &#8212; they don't mind if a woman or man is destroyed along the way. You know, humans can be unintentionally cruel to people not worth being cruel to. This statement also applies to some of the shaming campaign targets, but <em>being unintentionally cruel doesn't automatically make them worth being cruel to</em>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In this case the campaign is too civilized to be called a shaming campaign.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>And I question if most shamers did.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>Note how I have to be distracted from writing to consider the wording that should have been subconscious, and eventually write in this style.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>Sometimes a certain group of people seek to redefine certain concepts or terms so that truths stated with older concepts or terms in mind are no longer true. That's fine. But before you label someone as an asshole, you have to realize that while you are free to embrace <em>your</em> modernity, some (if not most) people are just not as radical or as concerned about your topic, and they are just holding on to the truths and values they were taught.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>Yes, I'm among the one thousand.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref5">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html</guid><pubDate>Fri, 12 Jun 2015 21:24:18 GMT</pubDate></item><item><title>Chrome disappointment: the shabby and boring old bookmark system from Stone Age strikes back</title><link>http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html</link><description><![CDATA[

<p>I just restarted my machine (in the process of planning a fresh OS re-install), and something in Chrome's UI immediately felt wrong. After a few moments I realized it was the star button (bookmark button) in the far right of the omnibox giving me the uneasy feeling &#8212; the old bookmark system is back. Broadcasting from stable channel, build 43.0.2357.124 on OS X.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150610-omnibox-with-aged-star.png" target="_blank"><img alt="What caught my immediate attention." src="http://zmwangx.github.io/img/20150610-omnibox-with-aged-star.png"/></a>
<p class="caption">What caught my immediate attention.</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150610-old-bookmark-manager.png" target="_blank"><img alt="The heart sinking feeling when I saw this again." src="http://zmwangx.github.io/img/20150610-old-bookmark-manager.png"/></a>
<p class="caption">The heart sinking feeling when I saw this again.</p>
</div>
<p>I went to flags and made sure "Enable the new bookmark app system" wasn't tempered with. It wasn't. Anyway, I changed it to "Enabled" and restarted Chrome. No go, still the old crap. So I Googled my way to <a href="https://productforums.google.com/forum/#!topic/chrome/mhIX5LB23As">the announcement</a>:</p>
<blockquote>
<p>Hi Everyone,</p>
<p>Our team is committed to improving Chrome&#8217;s bookmarks experience, but for the time being, we&#8217;ve decided to bring back the previous version. Our team will continue to explore other ways to improve the bookmarks experience. You&#8217;ll see the previous version of the bookmarks manager return to your Chrome browser shortly.</p>
<p>For those of you who enjoyed using the new bookmarks manager, you can still keep the new experience by downloading the Bookmarks Manager extension from the Chrome Web Store.</p>
<p>We appreciate hearing all of your thoughtful feedback. Feel free to leave us with any additional comments here in this thread.</p>
<p>Best,<br/> The Chrome team</p>
</blockquote>
<p>This is just very disappointing. My default browser changes a lot, but I've been tagging along with Opera for <a href="http://zmwangx.github.io/blog/2014-12-14-the-google-chrome-comic-a-classic.html">almost the entirety of 2014</a>, so I've long been used to visual bookmarks. And honestly, it never felt weird or anything; I saw it as an improvement the first time I was introduced to the concept.</p>
<p>I know, there's always a demographic that would fiercely resist any change; they would reject anything new at a glance (or after using for a second) and start moaning right away, disregarding all the new benefits here and there. There's also another demographic who not only have no taste in design at all, but would also actively seek to tear down any visual enhancement &#8212; 90s visual is enough for them for life, any more is unsolicited and insulting. When these two demographics meet<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn1" id="fnref1"><sup>1</sup></a> and somehow make the developers retreat, the outcome is simple and sad: <em>we can never have nice things.</em></p>
<p>I'm not saying I'm 100% satisfied with Chrome's visual bookmarks. In fact far from that. For one thing, Google is really pretty bad at visual design.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn2" id="fnref2"><sup>2</sup></a> Also, not being able to adjust tile size or toggle a list view is rather lame. However, whatever problems there are, the new system is at least 200% better than the old one (just look that the screenshots!).<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn3" id="fnref3"><sup>3</sup></a> <em>The team should focus on making the new system better,</em> such as implementing the features I mentioned above, rather than throw it into the trash can and resurrect the old system from Stone Age.</p>
<p>I know, throwing things away is part of Google's philosophy. They usually toy with a wide range of ideas and discard the ones that people don't buy into. Not that I whole-heartedly agree with strategy, but to advance technology there has to be some Brownian motion out there, and Google usually listens to the market, which is fine. In this case, however, there's really nothing innovative about visual bookmarks, and I can't see how the new system could harm market share or anything either. In fact, it could only help, since except the anti-design demographic, who would choose the aged and boring layout from the old system?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn4" id="fnref4"><sup>4</sup></a> Moreover, people tend to ignore the fact that the new system is also functionally superior &#8212; it offers to</p>
<ul>
<li>Learn and suggest folder for a new bookmark (which is often accurate);</li>
<li>Create auto folders based on site or keyword;</li>
<li>Allow arbitrary text data to be stored with each entry (e.g., a page-specific non-sensitive access code);</li>
<li>One tap pop from assigned folder;</li>
</ul>
<p>and more. Those that resist everything new are simply blind. The team claim that they are listening to "thoughtful feedback"; well, can they tell "thoughtful feedback" from blind suspicion and denial about everything? And they do realize that feedback is heavily biased, as someone with positive experience (unless he is a hardcore fan) is unlikely to leave them a thank you message? I think it's pretty clear that the majority of users won't care either way<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn5" id="fnref5"><sup>5</sup></a>; the majority of the rest was happy with the change; and the rest, comprising only a diminishingly small percentage, is what kept us from having nice things.</p>
<p>Even if one agrees with nothing from the last paragraph, one has to realize that randomly dropping a big change this way is just irresponsible.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn6" id="fnref6"><sup>6</sup></a> There were hurt feelings when the change was first introduced (not that I care about them), so don't change mind again three weeks later, hurting yet another camp. Whether it was a change for the good or the bad, admit it was done (admit you screwed up if you did) and focus on improving it.</p>
<p>End of rant, off to install the <a href="https://chrome.google.com/webstore/detail/bookmark-manager/gmlllbghnfkpflemihljekbapjopfjik">Bookmark Manager extension</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>There's actually a pretty big overlap between these two demographics.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>The giant blue search bar at the top is especially ridiculous.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I didn't bother to switch to an earlier build just to take a screenshot of the visual system, so unfortunately there's no comparison here. But anyone who's been there knows what I'm saying.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref3">&#8617;&#65038;</a></p></li>
<li id="fn4"><p>Unless one has hundreds of bookmarks in a single folder (which probably means some cleanup or refactoring is long overdue), the old layout is unlikely to be easier on the eyes or anything.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref4">&#8617;&#65038;</a></p></li>
<li id="fn5"><p>Well, grandmas have one more thing to learn, I guess...<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref5">&#8617;&#65038;</a></p></li>
<li id="fn6"><p>In other news, Google dropped YouTube collections two weeks ago (<a href="https://support.google.com/youtube/answer/6233832?hl=en">May 26, 2015</a>), causing another round of agony. Also, subscriptions were all over the place once more, just like Google's project landscape.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref6">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html</guid><pubDate>Thu, 11 Jun 2015 06:17:05 GMT</pubDate></item><item><title>Apple turns its homepage into a WWDC liveblog</title><link>http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html</link><description><![CDATA[

<p>WWDC is Apple's biggest event every year, and WWDC keynote always attracts tons of hype. Apple knows that. In the past years folks who can't (at work, in class, etc.) or don't want to watch the crappy live stream would follow the various WWDC liveblogs presented by tech sites like Gizmodo, TechCrunch, Ars Technica, etc. But this year the landscape has changed: Apple rolled its own card-based liveblog at <a href="http://www.apple.com/live/2015-june-event/">www.apple.com/live/2015-june-event</a>.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fn1" id="fnref1"><sup>1</sup></a> Not only that; during the keynote, Apple redirected its homepage to the liveblog page, so it effectively turned its homepage into a liveblog:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">&gt;</span> curl -sSIL http://www.apple.com
HTTP/1.1 302 Moved Temporarily
Location: http://www.apple.com/live/
Content-Length: 210
Content-Type: text/html; <span class="ot">charset=</span>iso-8859-1
Expires: Mon, 08 Jun 2015 19:16:41 GMT
Cache-Control: max-age=0, no-cache, no-store
Pragma: no-cache
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache

HTTP/1.1 301 Moved Permanently
Content-Length: 0
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache
Location: http://www.apple.com/live/2015-june-event/

HTTP/1.1 200 OK
Last-Modified: Mon, 08 Jun 2015 15:45:30 GMT
ETag: <span class="st">"0b7bcbfbd14c411e64e728ae4d644de7"</span>
Content-Type: text/html
Cache-Control: max-age=298
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache</code></pre></div>
<p>Of course, you miss a few jokes and random shots of Tim or Craig from the official liveblog, but hey, who don't like that official feel?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fn2" id="fnref2"><sup>2</sup></a></p>
<p>Here are a few screenshots of today's liveblog. Unfortunately I only know some entry level JS, so I wasn't able to capture the entire page, which uses dynamic DOM based on one's position in the page.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150608-wwdc-2015-banner.png" target="_blank"><img alt="The banner on Chrome." src="http://zmwangx.github.io/img/20150608-wwdc-2015-banner.png"/></a>
<p class="caption">The banner on Chrome.</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-960x981.png" target="_blank"><img alt="Introducing OS X El Capitan, 960x981." src="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-960x981.png"/></a>
<p class="caption">Introducing OS X El Capitan, 960x981.</p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-1920x1080.png" target="_blank"><img alt="A fuller experience: 1920x1080." src="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-1920x1080.png"/></a>
<p class="caption">A fuller experience: 1920x1080.</p>
</div>
<p>By the way, here are the full-page screenshots of <a href="http://www.apple.com/osx/elcapitan-preview/">OS X 10.11 El Capitan</a> and <a href="http://www.apple.com/ios/ios9-preview/">iOS 9</a> previews. <code>pageres</code> recently <a href="https://github.com/sindresorhus/pageres/issues/174">cannot render web fonts</a>, which is rather annoying, so I used <a href="https://github.com/mrcoles/full-page-screen-capture-chrome-extension">Full Page Screen Capture</a> to capture the shots. I then resized to 50% to reduce filesizes a bit.</p>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150608-osx-el-capitan-preview-1920x1080-50%25.png" target="_blank"><img alt="OS X El Capitan" src="http://zmwangx.github.io/img/20150608-osx-el-capitan-preview-1920x1080-50%25.png"/></a>
<p class="caption"><a href="http://www.apple.com/osx/elcapitan-preview/">OS X El Capitan</a></p>
</div>
<div class="figure">
<a href="http://zmwangx.github.io/img/20150608-ios-9-preview-1920x1080-50%25.png" target="_blank"><img alt="iOS 9" src="http://zmwangx.github.io/img/20150608-ios-9-preview-1920x1080-50%25.png"/></a>
<p class="caption"><a href="http://www.apple.com/ios/ios9-preview/">iOS 9</a></p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>The crappy live stream is still there, but thankfully you wouldn't see it if you're on a browser other than Safari. Just look the screenshot of the banner.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Yeah, I know some people don't; but those people are not likely to be Apple fans either.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html</guid><pubDate>Mon, 08 Jun 2015 21:42:50 GMT</pubDate></item><item><title>StackOverflow review system is completely BS</title><link>http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html</link><description><![CDATA[

<p>I just answered an interesting question about ZLE <a href="http://stackoverflow.com/q/30699242/1944784">on StackOverflow</a>, and in the process I also improved my own toolchain. For the record, the OP asked for tab completion to present working directory items (executable files and directories) on an empty command line, which led to the following widget:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># This widget inserts "./" to the buffer and list possible completions</span>
<span class="co"># (executable files and directories in the present working directory) if the</span>
<span class="co"># buffer is empty or only contains whitespace.</span>
<span class="kw">function</span><span class="fu"> complete_pwd_items_on_empty_buffer</span>
<span class="kw">{</span>
    <span class="kw">if [[</span> <span class="ot">$BUFFER</span> =~ ^[[:space:]]*$<span class="kw"> ]]</span>; <span class="kw">then</span>
        <span class="ot">BUFFER+=</span><span class="st">"./"</span>
        <span class="ot">CURSOR+=</span>2
        <span class="kw">zle</span> list-choices
    <span class="kw">else</span>
        <span class="kw">zle</span> expand-or-complete
    <span class="kw">fi</span>
<span class="kw">}</span>

<span class="kw">zle</span> -N complete_pwd_items_on_empty_buffer</code></pre></div>
<p>This is all good stuff.</p>
<p>However, at some point a <a href="https://stackoverflow.com/users/608639/jww">security architect and mobile security engineer</a> jumped in and made <a href="https://stackoverflow.com/questions/30699242/first-tab-completion-enhancement#comment49457640_30699242">the following comment</a>:</p>
<blockquote>
<p>Stack Overflow is a site for programming and development questions. This question appears to be off-topic because it is not about programming or development. See <a href="https://stackoverflow.com/help/on-topic">What topics can I ask about here</a> in the Help Center. Perhaps Super User or Unix &amp; Linux Stack Exchange would be a better place to ask. Also see <a href="http://meta.stackexchange.com/q/134306">Where do I post questions about Dev Ops</a>?</p>
</blockquote>
<p>Then the question was put on hold by several not-so-high-rep users as off-topic, and the reason given is</p>
<blockquote>
<p>Questions about general computing hardware and software are off-topic for Stack Overflow unless they directly involve tools used primarily for programming. You may be able to get help on Super User.</p>
</blockquote>
<p>WTF. First, <em>programming ZLE widgets is programming.</em> Hell, I even gave chunks of Zsh code in the answer (and they saw that, because the stupid comment and its upvotes came after my answer was put up). If writing an interactive Android crapp in Java for your Samsung counts as programming, why is writing an interactive widget for my Z shell any inferior? Second, even if you want to follow what the Help Center says, this question clearly falls under</p>
<blockquote>
<p>software tools commonly used by programmers.</p>
</blockquote>
<p>Maybe Zsh isn't used by those specific voters (I guess most of them are Windows lusers), but it has a very vibrant community, and it clearly rules. Maybe the specific voters don't realize that Zsh is a programming language; that alone shows how ignorant they are.</p>
<p>However, these are just specific lusers. Why do I generalize and insist that "StackOverflow review system is completely BS"? Well, just look at the voters' stats; I searched for their involvement in the <code>zsh</code> tag, and here are the results: <a href="https://stackoverflow.com/search?q=user:2422776+[zsh]">1</a>, <a href="https://stackoverflow.com/search?q=user:683218+[zsh]">2</a>, <a href="https://stackoverflow.com/search?q=user:608639+[zsh]">3</a>, <a href="https://stackoverflow.com/search?q=user:3836229+[zsh]">4</a>, <a href="https://stackoverflow.com/search?q=user:2772643+[zsh]">5</a>. Unsurprisingly, nothing, except one guy has answered a question about ASCII art, which shouldn't be placed under <code>zsh</code> in the first place. While someone knowlegeable of Zsh doesn't necessarily need to ask or answer questions about Zsh on SO, this quick search does reveal that these voters, rather than following the <code>zsh</code> tag, just popped out of nowhere, probably from the review queues. In this case it's pretty obvious that they're going after a new user (the OP just registered). And that is one of the main problems with SO's review system that makes it highly questionable in many cases:</p>
<p><strong>The review tasks are handed to people who have no knowledge of the topics,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn1" id="fnref1"><sup>1</sup></a> and these people just operate under assumptions (e.g., new users will ask off-topic questions.)<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn2" id="fnref2"><sup>2</sup></a></strong></p>
<p>The solution? I'm afraid <em>there's no solution as long as the system is in place</em>. Ideally one should skip questions from topics that they don't understand, but in reality people just do as they damned well please, whether because they are working toward a badge, or because they <em>think</em> they understand the topic but really don't, or because they are outright jerks. Also, there are tons of totally fucked-up questions lying in every corner of SO (like questions displaying such profound ignorance<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn3" id="fnref3"><sup>3</sup></a> that no one would answer due to embarrassment, or those despicable "I can has code" questions) that no one cares about cleaning up, but instead they chose to target this well-meaning question that generated a pretty useful answer. By the way, this is the kind of thing I see all the time.</p>
<p>I hope SO could abandon this questionable "review queue" practice altoghether. Let people who actually follow the tags do the reviewing and voting. Honestly, no one really cares about dangling low-quality questions anyway.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>This problem isn't limited to reviews; it also applies to, for instance, approved edits. My <em>tag edits</em> (with explanations) got rejected quite a few times because the reviewers clearly didn't understand the topic &#8212; e.g., some morons assume that command line problems equal Bash problems.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>This is actually a good assumption, because this is the case at least 50% of the time from my limited experience. But one shouldn't operate under this assumption, especially if one doesn't understand the topic.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I think I asked quite a few stupid questions back in the days, and now I'm totally ashamed of them. Insterestingly, some of those questions are my highest voted ones and got me quite some reps (compared to my total rep &#8212; I'm by no means a high rep user). See <a href="http://michael.richter.name/blogs/why-i-no-longer-contribute-to-stackoverflow"><em>Why I no longer contribute to StackOverflow</em></a> for a thorough discussion of the broken rep system and its disastrous effects.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref3">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html</guid><pubDate>Mon, 08 Jun 2015 01:58:57 GMT</pubDate></item><item><title>Using a personal helper package in everyday scripting</title><link>http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html</link><description><![CDATA[

<p>Recently I've been scripting (mostly in Python) quite a bit, and noticed that some functionalities get copied over or reimplemented over and over again. Examples include reading configuration files (mostly JSON, INI, and YAML), printing progress information to tty in color, displaying progress bar, and so on.</p>
<p>In light of this, I came up with the idea of keeping a pool of helper modules in a personal helper package. I'm unimaginative at naming things, so I just named my package <code>zmwangx</code>. It is <a href="https://github.com/zmwangx/pyzmwangx">published on GitHub</a>, and the API docs are published on <a href="https://pyzmwangx.readthedocs.org">Read the Docs</a> for easy reference during scripting.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html#fn1" id="fnref1"><sup>1</sup></a> At the time of writing the following helper modules are available in the package:</p>
<ul>
<li><code>colorout       -</code> colorized output to stdout and stderr, and much more.</li>
<li><code>config         -</code> read and write config files of various common formats.</li>
<li><code>hash           -</code> hash files in a memory-efficient manner.</li>
<li><code>humansize      -</code> convert size in bytes to human readable string (IEC or SI).</li>
<li><code>humantime      -</code> convert duration in seconds to human readable string.</li>
<li><code>infrastructure -</code> testing infrastructure.</li>
<li><code>pbar           -</code> display progress bar for the progress of processing a file or stream.</li>
<li><code>urlgrep        -</code> parse and match URLs from HTML documents.</li>
</ul>
<p>With a personalized helper package, scripting has never been more enjoyable. Here are just some of the benefits:</p>
<ul>
<li>Stating the obvious: write once, use everywhere (without copy/paste);</li>
<li>As always, factoring out small functional units make code more readable and easier to debug; and having a dedicated pool just for helper modules encourages one to think about factoring, <em>early</em>;</li>
<li>Bug fixes and enhancements in the helper package are instantly effective accross the board.</li>
</ul>
<p>Of course, one cannot depend on such a package in a formally published package (say, one published to PyPI), so things like <code>tools.py</code> or whatever are still necessary from time to time. But for day-to-day scripting, having a personal helper package that is used accross the board is definitely a good idea.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I'm pretty paranoid about documenting things.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html</guid><pubDate>Sun, 31 May 2015 05:48:57 GMT</pubDate></item><item><title>Apple's customer service is still the best (plus an Authy horror story)</title><link>http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html</link><description><![CDATA[

<p>Recently the mute switch (officially known as the Ring/Silent switch) on my little-more-than-half-a-year-old iPhone 6 Plus stopped working. It almost always bounced back to ON (ring) position upon turning, and even if I could keep it at the OFF position for five seconds, it would most likely bounce back when I thrust it into my pocket. I got bitten a few times &#8212; almost got heart attacks when the phone dinged loudly in class. Minor yet annoying problem.</p>
<p>So I took my phone to the Genius Bar today, prepared to have it sent to a repair center<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn1" id="fnref1"><sup>1</sup></a> and get a loan in the mean time &#8212; basically, I was prepared for all sorts of trouble. But nope. I demoed the problem for three seconds, my agent explained to me in five seconds that the switch alone was hard to replace and took fifteen seconds to verify my warranty status (I suppose), then off he went to retrieve a brand new replacement for me. No questions asked about the little dent on my old phone or whatever. <em>So I ended up with a brand new phone in less than five minutes.</em> (Of course, redoing setup and restoring backup took much longer than that.)</p>
<p>This is <em>the</em> customer service we should receive everywhere. Unfortunately, Apple seems to be one of the very few tech giants (or the only one?) that take customers seriously. Yeah, Apple sells products at a premium; but hey, they also live up to what one would expect from a premium product.</p>
<hr/>
<p>By the way, my only gripe during the process wasn't with Apple; it's about setting up Authy on the new phone. I verified my phone number via SMS and signed into Authy. I entered my backup password, which must be correct since it came straight off 1Password. My Authenticator accounts were displayed (I didn't verify if they would produce TOTPs) but a weird error message along the line of "data is corrupted" was shown to me, asking me to verify my phone for a second time. Unsuspecting, I asked Authy to send me another SMS, and entered the code I got. Then boom! All of a sudden <em>all my Authenticator accounts were gone</em>, leaving me with merely an Authy dev and a Coinbase account, which were the only ones that use Authy's native auth system. My heart almost sank for a second; I could almost foresee hours going down the drain, recovering (dozens of) accounts and regenerating new keys for two-factor auth.</p>
<p>That was before I immediately realized that all my secret keys were safe and sound in 1Password's database. In the past few months, AgileBits implemented TOTP support in both the iOS and OS X versions of 1Password. The day <a href="https://blog.agilebits.com/2015/04/06/1password-5-3-for-mac-the-bionic-edition-is-out/">OS X support came into stable 5.3</a>, I exported all my Authenticator secret keys from Authy to 1Password (with help from <a href="https://www.pommepause.com/2014/10/how-to-extract-your-totp-secrets-from-authy/">this blog post</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn2" id="fnref2"><sup>2</sup></a>). At that time I didn't expect 1Password would save my day later. Overall, the $50 (OS X) plus $17 (iOS) I spent on 1Password was my most worthwhile spend on software, ever.</p>
<p>The lesson to learn from my Authy horror story is that one should export and backup Authenticator secret keys from Authy before it's too late. Moreover, this one shitty experience with Authy is enough to keep me away from it for the ages to come, except for services that are Authy-specific, e.g., Coinbase<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn3" id="fnref3"><sup>3</sup></a>. 1Password is the way to go, and with the addition of TOTP, it is one more step towards a truly one password experience. If you don't own 1Password yet, you should really get it, now.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>As I see no obvious way to replace the switch in store. My intuition was later confirmed.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>The first comment below that post is mine.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref2">&#8617;&#65038;</a></p></li>
<li id="fn3"><p>I have a Coinbase account and probably around 0.01 BTC in my wallet, but I don't really use bitcoins. At the time I signed up for two-factor auth on Coinbase, Authy seemed to be only supported system; however, I just signed in again and it seems that Coinbase is now supporting Authenticator also. Whatever the case, Authy is practically dead for me.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref3">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html</guid><pubDate>Sat, 30 May 2015 03:40:05 GMT</pubDate></item><item><title>Using a command table as wallpaper</title><link>http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html</link><description><![CDATA[

<p>Recently I cleaned up my source code directory, removed a lot of rarely-used, dated scripts, and grouped the remaining standalone scripts into a central place (<code>~/dev/scripts</code>)<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fn1" id="fnref1"><sup>1</sup></a>. One thing I learned in this process is that I tend to write a reusable script but rarely actually reuse it (even if it sits on <code>PATH</code>), sometimes implementing the same functionality twice or typing a long command line over and over again.</p>
<p>To remind myself of which scripts are at my fingertip, I decided to use a command table as wallpaper on my secondary display. So I wrote a shitty Python script<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fn2" id="fnref2"><sup>2</sup></a> (depending on XeLaTeX and ImageMagick) to automate the generation of such a wallpaper. It's pretty customizable, and anyone may grab it and do whatever they want to with it (also <a href="https://gist.github.com/zmwangx/b06aa923abf061b33fc9">available as a gist</a>):</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="co">"""Generate command table."""</span>

<span class="im">import</span> argparse
<span class="im">import</span> os
<span class="im">import</span> shlex
<span class="im">import</span> subprocess
<span class="im">import</span> sys
<span class="im">import</span> tempfile

<span class="co"># pylint: disable=wildcard-import,unused-wildcard-import</span>

<span class="im">from</span> zmwangx.colorout <span class="im">import</span> <span class="op">*</span>

DEFAULT_COLUMN_WIDTH <span class="op">=</span> <span class="dv">120</span>
DEFAULT_FOREGROUND_COLOR <span class="op">=</span> <span class="st">"white"</span>
DEFAULT_BACKGROUND_COLOR <span class="op">=</span> <span class="st">"black"</span>
DEFAULT_FONT <span class="op">=</span> <span class="st">"Consolas"</span>
DEFAULT_BORDER <span class="op">=</span> <span class="dv">20</span>
DEFAULT_DENSITY <span class="op">=</span> <span class="dv">300</span>
DEFAULT_SIZE <span class="op">=</span> <span class="st">"1280x800"</span>

HERE <span class="op">=</span> os.path.dirname(os.path.realpath(sys.argv[<span class="dv">0</span>]))
XELATEX_PROGRAM <span class="op">=</span> (<span class="vs">r"""</span>
<span class="vs">\documentclass[varwidth=\maxdimen,border=</span><span class="sc">{border}</span><span class="vs">pt]</span><span class="sc">{{</span><span class="vs">standalone</span><span class="sc">}}</span>
<span class="vs">\usepackage</span><span class="sc">{{</span><span class="vs">color</span><span class="sc">}}</span>
<span class="vs">\pagecolor</span><span class="sc">{{{background}}}</span>
<span class="vs">\color</span><span class="sc">{{{foreground}}}</span>
<span class="vs">\usepackage</span><span class="sc">{{</span><span class="vs">fontspec</span><span class="sc">}}</span>
<span class="vs">\setmonofont</span><span class="sc">{{{font}}}</span>

<span class="vs">\begin</span><span class="sc">{{</span><span class="vs">document</span><span class="sc">}}</span>
<span class="vs">\begin</span><span class="sc">{{</span><span class="vs">verbatim</span><span class="sc">}}</span>
<span class="sc">{table}</span>
<span class="vs">\end</span><span class="sc">{{</span><span class="vs">verbatim</span><span class="sc">}}</span>
<span class="vs">\end</span><span class="sc">{{</span><span class="vs">document</span><span class="sc">}}</span>
<span class="st">"""</span>)

<span class="kw">def</span> text_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the text version of the table."""</span>
    width <span class="op">=</span> kwargs[<span class="st">"width"</span>] <span class="cf">if</span> <span class="st">"width"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_COLUMN_WIDTH
    directory <span class="op">=</span> kwargs[<span class="st">"directory"</span>] <span class="cf">if</span> <span class="st">"directory"</span> <span class="op">in</span> kwargs <span class="cf">else</span> HERE
    command_line <span class="op">=</span> (<span class="vs">r"find </span><span class="sc">{directory}</span><span class="vs"> -maxdepth 1 -type f -perm -u=x -exec basename </span><span class="sc">{{}}</span><span class="vs"> \; "</span>
                    <span class="co">"| column -c {width} | expand"</span>.<span class="bu">format</span>(
                        directory<span class="op">=</span>shlex.quote(directory), width<span class="op">=</span>width))
    ccommand(command_line)
    <span class="cf">return</span> subprocess.check_output(command_line, shell<span class="op">=</span><span class="va">True</span>).decode(<span class="st">"utf-8"</span>)

<span class="kw">def</span> pdf_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the PDF version of the table.</span>

<span class="co">    Returns 0 on success or 1 on failure. Generated PDF is "table.pdf"</span>
<span class="co">    in the current working directory.</span>

<span class="co">    """</span>
    border <span class="op">=</span> kwargs[<span class="st">"border"</span>] <span class="cf">if</span> <span class="st">"border"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BORDER
    foreground <span class="op">=</span> kwargs[<span class="st">"foreground"</span>] <span class="cf">if</span> <span class="st">"foreground"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_FOREGROUND_COLOR
    background <span class="op">=</span> kwargs[<span class="st">"background"</span>] <span class="cf">if</span> <span class="st">"background"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BACKGROUND_COLOR
    font <span class="op">=</span> kwargs[<span class="st">"font"</span>] <span class="cf">if</span> <span class="st">"font"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_FONT
    program <span class="op">=</span> XELATEX_PROGRAM.<span class="bu">format</span>(table<span class="op">=</span>text_table(<span class="op">**</span>kwargs).strip(),
                                     font<span class="op">=</span>font, border<span class="op">=</span>border,
                                     foreground<span class="op">=</span>foreground, background<span class="op">=</span>background)
    <span class="cf">with</span> <span class="bu">open</span>(<span class="st">"table.tex"</span>, <span class="st">"w"</span>) <span class="im">as</span> texfileobj:
        texfileobj.write(program)
    <span class="cf">try</span>:
        ccommand(<span class="st">"xelatex table.tex"</span>)
        subprocess.check_call([<span class="st">"xelatex"</span>, <span class="st">"table.tex"</span>],
                              stdout<span class="op">=</span>subprocess.DEVNULL, stderr<span class="op">=</span>subprocess.DEVNULL)
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> subprocess.CalledProcessError:
        cerror(<span class="st">"xelatex failed on the following program:"</span>)
        cerrnewline()
        cerrwrite(<span class="st">"default"</span>, program)
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> png_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the PNG version of the table.</span>

<span class="co">    Returns 0 on success or 1 on failure. Generated PNG is "table.png"</span>
<span class="co">    in the current working directory.</span>

<span class="co">    """</span>
    <span class="cf">if</span> pdf_table(<span class="op">**</span>kwargs) <span class="op">==</span> <span class="dv">1</span>:
        <span class="cf">return</span> <span class="dv">1</span>
    density <span class="op">=</span> kwargs[<span class="st">"density"</span>] <span class="cf">if</span> <span class="st">"density"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_DENSITY
    size <span class="op">=</span> kwargs[<span class="st">"size"</span>] <span class="cf">if</span> <span class="st">"size"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_SIZE
    background <span class="op">=</span> kwargs[<span class="st">"background"</span>] <span class="cf">if</span> <span class="st">"background"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BACKGROUND_COLOR
    command_line <span class="op">=</span> (<span class="st">"convert -density </span><span class="sc">{density}</span><span class="st"> table.pdf -resize </span><span class="sc">{size}</span><span class="st"> -size </span><span class="sc">{size}</span><span class="st"> "</span>
                    <span class="co">"xc:{background} +swap -gravity center -composite table.png"</span>.<span class="bu">format</span>(
                        density<span class="op">=</span>density, size<span class="op">=</span>size, background<span class="op">=</span>background))
    <span class="cf">try</span>:
        ccommand(command_line)
        subprocess.check_call(shlex.split(command_line))
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> subprocess.CalledProcessError:
        cerror(<span class="st">"the following ImageMagick command failed:"</span>)
        cerrprint(<span class="st">"default"</span>, command_line)
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> main():
    <span class="co">"""CLI."""</span>
    description <span class="op">=</span> <span class="st">"Generate a PNG table of all executable commands in a directory."</span>
    parser <span class="op">=</span> argparse.ArgumentParser(description<span class="op">=</span>description)
    parser.add_argument(<span class="st">"--width"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>, default<span class="op">=</span>DEFAULT_COLUMN_WIDTH,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""line width, default is 120"""</span>)
    parser.add_argument(<span class="st">"--directory"</span>,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""directory containing executables, default is</span>
<span class="st">                        the directory containing this command"""</span>)
    parser.add_argument(<span class="st">"--border"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>, default<span class="op">=</span>DEFAULT_BORDER,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""default is 20pt"""</span>)
    parser.add_argument(<span class="st">"--foreground"</span>, default<span class="op">=</span>DEFAULT_FOREGROUND_COLOR,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""foreground color, default is white"""</span>)
    parser.add_argument(<span class="st">"--background"</span>, default<span class="op">=</span>DEFAULT_BACKGROUND_COLOR,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""background color, default is black"""</span>)
    parser.add_argument(<span class="st">"--font"</span>, default<span class="op">=</span>DEFAULT_FONT,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""default is Consolas"""</span>)
    parser.add_argument(<span class="st">"--density"</span>, default<span class="op">=</span>DEFAULT_DENSITY,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""used for the -density argument of convert,</span>
<span class="st">                        default is 300"""</span>)
    parser.add_argument(<span class="st">"--size"</span>, default<span class="op">=</span>DEFAULT_SIZE,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""size of image, default is 1280x800"""</span>)
    args <span class="op">=</span> parser.parse_args()
    kwargs <span class="op">=</span> {k: v <span class="cf">for</span> (k, v) <span class="op">in</span> args.__dict__.items() <span class="cf">if</span> v <span class="op">is</span> <span class="op">not</span> <span class="va">None</span>}

    fd, tmpfilepath <span class="op">=</span> tempfile.mkstemp(suffix<span class="op">=</span><span class="st">".png"</span>, prefix<span class="op">=</span><span class="st">"table-"</span>)
    os.close(fd)
    <span class="cf">with</span> tempfile.TemporaryDirectory(prefix<span class="op">=</span><span class="st">"table-"</span>) <span class="im">as</span> working_directory:
        os.chdir(working_directory)
        <span class="cf">if</span> png_table(<span class="op">**</span>kwargs) <span class="op">==</span> <span class="dv">1</span>:
            cerror(<span class="st">"execution failed"</span>)
            os.remove(tmpfilepath)
        <span class="cf">else</span>:
            os.rename(<span class="st">"table.png"</span>, tmpfilepath)
            cprogress(<span class="st">"saved to:"</span>)
            <span class="bu">print</span>(tmpfilepath)

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:
    main()</code></pre></div>
<p>By the way, the <code>zmwangx.colorout</code> module is <a href="https://github.com/zmwangx/pyzmwangx/blob/41b0bffaad9439888d68097a85c7aed594240283/zmwangx/colorout.py">here</a>, just to ease the printing of progress and errors to tty. You may safely remove all the <code>ccommand</code>, <code>cerr*</code> and <code>cprogress</code> calls.</p>
<p>Here is an example wallpaper reflecting my current <code>~/dev/scripts</code>:</p>
<div class="figure">
<a href="https://i.imgur.com/mccQu1e.png" target="_blank"><img alt="Command table wallpaper for my secondary display (MBP 13'' builtin display)." src="https://i.imgur.com/mccQu1e.png"/></a>
<p class="caption">Command table wallpaper for my secondary display (MBP 13'' builtin display).</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>The <code>~/dev</code> directory stands for development, and contains all my source code and almost all local builds. The point is by having a <code>~/dev</code> directory, I no longer need to have <code>bin</code>, <code>include</code>, <code>lib</code>, and <code>share</code> in my <code>HOME</code>, thus saving a few slots. Backing up and restoring is also slightly easier.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>Yeah, I know it's a shitty script, so don't nitpick on style problems.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html</guid><pubDate>Fri, 22 May 2015 07:48:19 GMT</pubDate></item><item><title>Bash: the special slash character in filename expansion</title><link>http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html</link><description><![CDATA[

<p>It is well-known and common sense that the slash character (<code>/</code>) serves a special role in Bash filename expansion. For instance, the asterisk <code>*</code> certainly won't match <code>/</code> or <code>.</code> when used in filename expansion; otherwise, a standalone <code>*</code> would match everything in the filesystem.</p>
<p>However, it is less clear how a literal slash character<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html#fn1" id="fnref1"><sup>1</sup></a> is treated in extended glob patterns. Naively one would expect it to just match a literal slash, but the real situtation is more complicated than that. Consider the following examples:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">bash-4.3</span>$ shopt -s extglob nullglob
<span class="kw">bash-4.3</span>$ echo /usr/@(bin<span class="kw">|lib</span>)
<span class="kw">/usr/bin</span> /usr/lib
<span class="kw">bash-4.3</span>$ echo /usr@(/bin<span class="kw">|/lib</span>)

<span class="kw">bash-4.3</span>$ [[ /usr/bin == /usr@(/bin<span class="kw">|/lib</span>) ]] <span class="kw">&amp;&amp;</span> <span class="kw">echo</span> matching
<span class="kw">matching</span></code></pre></div>
<p>As seen from this example, patterns with slash simply doesn't work (in filename expansion) when placed in an extended glob pattern list, and there's no error whatsoever. I looked up the <a href="https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching">Bash Reference Manual</a> and the <a href="http://mywiki.wooledge.org/BashGuide/Patterns">Bash Guide</a> but neither mentioned this behavior. One might need to delve into the source code to say for sure what exactly is going on.</p>
<p>In comparison, Zsh and its <a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation">docs</a> are much more up front about this issue:</p>
<blockquote>
<p>Note that grouping cannot extend over multiple directories: it is an error to have a &#8216;/&#8217; within a group (this only applies for patterns used in filename generation). ...</p>
</blockquote>
<p>And when we run equivalent code in Zsh:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh">zsh-5.0.5$ <span class="kw">setopt</span> NULL_GLOB
zsh-5.0.5$ <span class="kw">echo</span> /usr/<span class="kw">(</span>bin<span class="kw">|</span>lib<span class="kw">)</span>
/usr/bin /usr/lib
zsh-5.0.5$ <span class="kw">echo</span> /usr<span class="kw">(</span>/bin<span class="kw">|</span>/lib<span class="kw">)</span>
zsh: bad pattern: /usr<span class="kw">(</span>/bin<span class="kw">|</span>/lib<span class="kw">)</span>
zsh-5.0.5$<span class="kw"> [[</span> /usr/bin <span class="ot">==</span> /usr(/bin|/lib)<span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">echo</span> matching
matching</code></pre></div>
<p>The lesson? Be careful not to use a pattern like <code>@(path1|path2|path3)</code> in Bash when the paths are absolute, or relative but contain the slash. Unlike Zsh, Bash just silently fails on a pattern like this, which is rather dangerous in scripts.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Here, "a literal slash character" also applies to one that comes from tilde expansion, parameter expansion or command substitution, since they are performed before filename expansion in Bash.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html#fnref1">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html</guid><pubDate>Wed, 20 May 2015 01:33:51 GMT</pubDate></item><item><title>storyboard reached 0.1</title><link>http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html</link><description><![CDATA[

<p>For quite some time I've been working on a Python project called <a href="https://github.com/zmwangx/storyboard"><code>storyboard</code></a>, and today I finally released the 0.1 stable (or you can think of it as 1.0).</p>
<p>As described on <a href="https://storyboard.readthedocs.org/en/0.1/index.html">the index page</a>,</p>
<blockquote>
<p><code>storyboard</code> is a FFmpeg-based customizable video storyboard generator with metadata reporting directly embedded in the generated images. Reported metadata fields include, but are not limited to, title, filename, file size, SHA-1 digest, container format, duration, pixel dimension, display aspect ratio (DAR), scan type (progressive, interlaced, or telecined), frame rate, and per-stream metadata (type, codec, profile, dimensions, bitrate, etc.).</p>
</blockquote>
<p>And the motivation was</p>
<blockquote>
<p><code>storyboard</code> was inspired by the storyboards I frequently encounter on video-sharing Internet forums, mostly generated by proprietary video players. Those storyboards often come with video/file metadata bundled, which I see as a great all-in-one solution for video sharing, saving one the labor of typing multiple console commands, copying and pasting output, and worrying about the forum&#8217;s crappy formatting. However, I, for one, dislike proprietary players. Also, those storyboards are usually ugly and uninformative, using stupid fonts and lacking crucial information that hackers look for (e.g., hash). Therefore, I developed this customizable storyboard generator for hackers.</p>
</blockquote>
<p>The project itself isn't very important, and I don't see any possibility of it gaining recognition; but its educational value to me was pretty huge. This is the first full package I ever developed, in the sense that it's complete with documentation, test suites, continuous integration and tested portability, as well as distributed to a package index (<a href="https://pypi.python.org/pypi/storyboard">PyPI</a> in this case). Here's what I observed and learned:</p>
<ol style="list-style-type: decimal">
<li><p>It's just really different from casual hacking, where I would try to achieve what I need in the shortest amount of programmer time possible, drop hard-coded values (even OAuth tokens) in scripts, leave things undocumented, etc. I'm a perfectionist so my casual code is usually not so bad, but <code>storyboard</code> is just different &#8212; to ensure quality of API and CLI, I wrote more documentation than actual code. Through this project I realized how hard real-world coding (or idealized real-world coding) is: the initial 10% is excitement, and the rest is just chores (compare that to casual hacking, where at least 30% is excitement).</p></li>
<li><p>Write once, debug everywhere. Not really, but ensuring portability is really difficult. Trying to debug something on a platform which I can't lay my hands upon is insanely frustrating. This afternoon I spent a long time trying to pin down a weird hanging bug on AppVeyor; the complete process is documented in <a href="https://github.com/zmwangx/storyboard/commit/e8a28e5a92f744157fedd03893fa8fe5a5e7d445">this squashed commit</a>. In the end the bug wasn't in my program, but in that specific version of FFmpeg (which I wouldn't believe since FFmpeg is really stable from my experience), or that specific version of FFmpeg combined with AppVeyor, or that specific version of FFmpeg combined with AppVeyor combined with Azure, or... who knows. The only thing I could say is it was not in my program, because I could reproduce the infinite loop in <code>ffprobe</code> even before I launched my program... Anyway, in this case I can lay my hands on the platform, just indirectly and painful. What about real world development where developers need to handle bug reports from users who could have broken everything? I don't want to imagine.</p></li>
<li><p>The project was a clear manifestation of Hofstadter's law:</p>
<blockquote>
<p>It always takes longer than you expect, even when you take into account Hofstadter's Law.</p>
</blockquote>
<p>Enough said; so true. In fact, towards the end of the development cycle I got pretty bogged down<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fn1" id="fnref1"><sup>1</sup></a> and stopped for a while to work on renovating this blog (60% excitement!). Meanwhile, I was too busy with other parts of life, so I rushed towards the stable 0.1 release in the past two days, dropping several ideas I wanted to implement (for completeness). Although I "rushed", it still took at least four times as long as I expected.</p></li>
</ol>
<p>Anyway, here it is, the <a href="https://github.com/zmwangx/storyboard/releases/tag/0.1">0.1</a> <a href="https://pypi.python.org/pypi/storyboard/0.1">release</a>. The badges certainly weren't bad:</p>
<div class="figure">
<a href="https://i.imgur.com/miOoX5Y.png" target="_blank"><img alt="storyboard's got quite a few badges of honor" src="https://i.imgur.com/miOoX5Y.png"/></a>
<p class="caption"><code>storyboard</code>'s got quite a few badges of honor</p>
</div>
<p>I created <a href="https://asciinema.org/a/19782">an asciinema recording</a> to commemorate the release (the original asciicast is <a href="https://dl.bintray.com/zmwangx/generic/storyboard-0.1-walkthrough-asciicast.json">here</a>):<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fn2" id="fnref2"><sup>2</sup></a></p>
<div style="width: 672px; text-align: center; margin: auto;">

<noscript>
Javascript disabled. Check out the cast <a href="https://asciinema.org/a/19782">here</a>.
</noscript>
</div>
<p>And, just to demonstrate <code>storyboard</code>, I re-screen-recorded the asciinema screencast with QuickTime, saved to <a href="https://dl.bintray.com/zmwangx/generic/storyboard-0.1-walkthrough.mov">an MOV file</a>, and ran it through my <code>metadata</code> and <code>storyboard</code>:</p>
<pre><code>&gt; metadata storyboard-0.1-walkthrough.mov
Filename:               storyboard-0.1-walkthrough.mov
File size:              60418244 (57.7MiB)
Container format:       QuickTime movie
Duration:               00:06:36.30
Pixel dimensions:       672x846
Display aspect ratio:   112:141
Scan type:              Progressive scan
Frame rate:             60 fps
Streams:
    #0: Video, H.264 (Main Profile level 3.2), 672x846 (DAR 112:141), 60 fps, 1213 kb/s

&gt; storyboard storyboard-0.1-walkthrough.mov
Processing storyboard-0.1-walkthrough.mov
Crunching metadata...
Trying to determine scan type...
Inspecting frame 40/40...
Generating main storyboard...
Extracting frame 16/16...
Generating thumbnail 16/16...
Tiling thumbnails...
Generating metadata sheet...
Computing SHA-1 digest...
57.7MiB 0:00:00 [ 571MiB/s] [=================================================================================&gt;] 100%
Generating promotional banner...
Assembling pieces...

storyboard saved to: /tmp/storyboard-se3fbiif.jpg
</code></pre>
<p>Here's the actual image:</p>
<div class="figure">
<a href="https://i.imgur.com/c3E3M8R.jpg" target="_blank"><img alt="storyboard of storyboard-0.1-walkthrough.mov (1964x2694), generated with the default settings by storyboard 0.1" src="https://i.imgur.com/c3E3M8R.jpg"/></a>
<p class="caption">storyboard of <code>storyboard-0.1-walkthrough.mov</code> (1964x2694), generated with the default settings by <code>storyboard 0.1</code></p>
</div>
<p>Credit to <code>lolcat</code> for making my storyboard colorful.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I was implementing stuff that I wouldn't ever need myself &#8212; for completeness, and that was not rewarding in the slightest.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fnref1">&#8617;&#65038;</a></p></li>
<li id="fn2"><p>The screencast's color scheme is actually off in some places, since in my iTerm2 bold font is displayed as bold, not bright.<a class="footnotes-backlink" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fnref2">&#8617;&#65038;</a></p></li>
</ol>
</div>
]]></description><author>zmwangx@gmail.com (Zhiming Wang)</author><guid isPermaLink="true">http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html</guid><pubDate>Sat, 09 May 2015 07:32:28 GMT</pubDate></item></channel></rss>
