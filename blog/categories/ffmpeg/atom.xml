<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ffmpeg | Daily (?) Complaints (?)]]></title>
  <link href="http://zmwangx.github.io/blog/categories/ffmpeg/atom.xml" rel="self"/>
  <link href="http://zmwangx.github.io/"/>
  <updated>2014-11-19T23:27:34-08:00</updated>
  <id>http://zmwangx.github.io/</id>
  <author>
    <name><![CDATA[Zhiming Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re-encoding Everything for iPhone 6 Plus]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus/"/>
    <updated>2014-11-11T13:31:25-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus</id>
    <content type="html"><![CDATA[<p>AT&amp;T finally delivered my iPhone 6 Plus (silver, 64 GB) after about fifty days since preorder… The 1080p Retina display is simply stunning. However, it turns out that my old videos don’t work so well on 6 Plus’s giant screen. My old mobile video collection was optimized for my 16 GB 4S, targeting the small screen and highly limited storage — you guessed it, they were resized to 960x540, and they looked great. But they’re not up to the task any more. 960x540 videos aren’t at all sharp on the stunning screen of 6 Plus, which is more than capable of handling 4x pixels. Therefore, I have no choice but to feed it more pixels. I’m left in a weird situation, where my 1080p desktop (or even HDTV) quality videos should fit the screen just fine, but H.264 profile stands in the way. iPhone 6 and 6 Plus are only capable of High Profile level 4.2, so anything encoded in level 5.1, for instance, needs to be re-encoded. Also there are still MPEG-2 and MPEG-4 videos out there (MPEG-4 should be obsolete by now, I assume, but some people still use it; and MPEG-2 is de facto in TV broadcasts), which have to be transcoded. Okay, it’s a daunting task to re-encode a fairly big collection, but I have to do it sooner or later. Presumably this weekend. I’ll also report whether 720p videos look sharp on the screen later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ripping Copy-protected DVD With Mpv]]></title>
    <link href="http://zmwangx.github.io/blog/2014/10/23/ripping-copy-protected-dvd-with-mpv/"/>
    <updated>2014-10-23T20:03:22-07:00</updated>
    <id>http://zmwangx.github.io/blog/2014/10/23/ripping-copy-protected-dvd-with-mpv</id>
    <content type="html"><![CDATA[<p><strong><em>11/02/2014 update:</em></strong></p>

<p>See <a href="/blog/2014/11/02/vobcopy-dvdbackup-etc/">this post</a> for issues, explanations, and more.</p>

<hr />

<p><strong><em>10/25/2014 update:</em></strong></p>

<p>I&rsquo;m such an idiot. <code>vobcopy</code> is the real, hassel-free way to go.</p>

<pre><code>brew install vobcopy
</code></pre>

<p>Then, with the DVD mounted,</p>

<blockquote><p><strong>vobcopy</strong> without any options will copy the title with the most chapters into files of 2GB size into the current working directory.</p></blockquote>

<p>Of course there are a ton of options, but I generally hate to browse through options unless I have to, so I&rsquo;m happy with calling without argument.</p>

<hr />

<p>Yesterday I was trying to rip a music video off a newly released DVD from Japan. I knew very little about how DRM (in this case, CSS) actually works and how to break it. I tried to operate directly on the VOB file with <code>ffmpeg</code> or <code>mpv</code> but both failed with a lot of header errors — I suppose more files than the VOB are required for authentication? Whatever, maybe I’ll learn the details in the future, but I don’t see the need since DVD is an outdated technology anyway.</p>

<p>So, can we proceed from here? Most certainly. I noticed that although <code>mpv</code> won’t let me play a single VOB, I can simply hand it the DVD mount point, and it will play the whole DVD seamlessly. <strong>Caution:</strong> <code>mpv</code> needs to be compiled with <code>libdvdnav</code> and <code>libdvdread</code>! With brew you just do</p>

<pre><code>brew install mpv --with-libdvdnav --with-libdvdread
</code></pre>

<p>For better performance and backup, I first cloned the DVD into a <code>.cdr</code> image (DVD/CD-R Master Image) using Disk Utility (I&rsquo;ve never tried creating/cloning image with <code>diskutil</code> CLI, so nothing to report on that). Then I mount the image, say the mount point is <code>/Volumes/UPBX_80165</code>. As said I can hand that mount point to <code>mpv</code> and it simply works, but how about extracting the MPEG-2 video stream? The <code>--stream-capture=&lt;filename&gt;</code> option is there just for you. In principle <code>--stream-dump=&lt;filename&gt;</code> should also work, but without monitoring the output and controlling where to end, I’m not sure if it will ever terminate itself when reading from a DVD (when I stream captured the DVD it just kept repeating itself until I explicitly quit with <code>q</code>). So that&rsquo;s it:</p>

<pre><code>mpv --stream-capture=dump.mpg /Volumes/UPBX_80165
</code></pre>

<p>Then you can torture the <code>dump.mpg</code> with <code>ffmpeg</code> however you want. The most obvious thing is to cut out the music video part, and put into a new container like MPEG-TS. Or transcode it to H.264 for your iPhone. The nice thing about <code>dump.mpg</code> is that, unless I got it wrong, there&rsquo;s no quality loss here — the only thing you got rid of is that goddamn DRM.</p>
]]></content>
  </entry>
  
</feed>
