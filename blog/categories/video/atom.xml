<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Video | Daily (?) Complaints (?)]]></title>
  <link href="http://zmwangx.github.io/blog/categories/video/atom.xml" rel="self"/>
  <link href="http://zmwangx.github.io/"/>
  <updated>2014-11-24T21:26:54-08:00</updated>
  <id>http://zmwangx.github.io/</id>
  <author>
    <name><![CDATA[Zhiming Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Re-encoding Everything for iPhone 6 Plus]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus/"/>
    <updated>2014-11-11T13:31:25-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus</id>
    <content type="html"><![CDATA[<p>AT&amp;T finally delivered my iPhone 6 Plus (silver, 64 GB) after about fifty days since preorder… The 1080p Retina display is simply stunning. However, it turns out that my old videos don’t work so well on 6 Plus’s giant screen. My old mobile video collection was optimized for my 16 GB 4S, targeting the small screen and highly limited storage — you guessed it, they were resized to 960x540, and they looked great. But they’re not up to the task any more. 960x540 videos aren’t at all sharp on the stunning screen of 6 Plus, which is more than capable of handling 4x pixels. Therefore, I have no choice but to feed it more pixels. I’m left in a weird situation, where my 1080p desktop (or even HDTV) quality videos should fit the screen just fine, but H.264 profile stands in the way. iPhone 6 and 6 Plus are only capable of High Profile level 4.2, so anything encoded in level 5.1, for instance, needs to be re-encoded. Also there are still MPEG-2 and MPEG-4 videos out there (MPEG-4 should be obsolete by now, I assume, but some people still use it; and MPEG-2 is de facto in TV broadcasts), which have to be transcoded. Okay, it’s a daunting task to re-encode a fairly big collection, but I have to do it sooner or later. Presumably this weekend. I’ll also report whether 720p videos look sharp on the screen later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[List YouTube Playlist With Youtube-dl]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/05/list-youtube-playlist-with-youtube-dl/"/>
    <updated>2014-11-05T10:37:58-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/05/list-youtube-playlist-with-youtube-dl</id>
    <content type="html"><![CDATA[<p>Of course you are always welcome to use the <a href="https://developers.google.com/api-client-library/python/">Google APIs Client Library for Python</a> to wrestle with YouTube, which is usually pretty simple. (As an added bonus, YouTube has some <a href="https://developers.google.com/youtube/v3/code_samples/">nice runnable sample scripts</a> to get you started.) With the client library, listing videos in a YouTube playlist is a breeze.</p>

<p>However, if you don&rsquo;t feel like writing code yourself (I usually don&rsquo;t feel like writing code myself until I use something often enough and existing solutions are suboptimal), <code>youtube-dl</code> recently added the functionality to list videos in a playlist with the <code>--flat-playlist</code> option.</p>

<p><a href="https://github.com/rg3/youtube-dl/issues/4003#issuecomment-60322630">According to one of the project collaborators</a>, currently <code>--flat-playlist</code> is only helpful with the <code>-j</code> option for dumping JSON (so I suppose this feature is subject to change). For instance, <code>--flat-playlist</code> alone would emit something like this:</p>

<pre><code class="bash">&gt; youtube-dl --flat-playlist 'https://www.youtube.com/watch?v=gdOwwI0ngqQ&amp;list=PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F'
[youtube:playlist] Downloading playlist PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F - add --no-playlist to just download video gdOwwI0ngqQ
[youtube:playlist] PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F: Downloading webpage
[youtube:playlist] PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F: Downloading page #1
[download] Downloading playlist: Cam By apinknomfan
[youtube:playlist] playlist Cam By apinknomfan: Collected 119 video ids (downloading 119 of them)
[download] Downloading video #1 of 119
[download] Downloading video #2 of 119
[download] Downloading video #3 of 119
[download] Downloading video #4 of 119
...
</code></pre>

<p>which doesn&rsquo;t really make sense — it tells you that it collected 119 video ids, and no more. Once you have <code>-j</code> on, you get JSON data that you can parse with anything:</p>

<pre><code class="bash">&gt; youtube-dl -j --flat-playlist 'https://www.youtube.com/watch?v=gdOwwI0ngqQ&amp;list=PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F'
{"url": "gdOwwI0ngqQ", "_type": "url", "ie_key": "Youtube", "id": "gdOwwI0ngqQ"}
{"url": "j9l5nchv1Z8", "_type": "url", "ie_key": "Youtube", "id": "j9l5nchv1Z8"}
{"url": "znW5ALwWNQw", "_type": "url", "ie_key": "Youtube", "id": "znW5ALwWNQw"}
{"url": "qyE7-auTIcc", "_type": "url", "ie_key": "Youtube", "id": "qyE7-auTIcc"}
...
</code></pre>

<p>The most straightforward way to parse this is to use a command line JSON parser, the best one being <a href="https://github.com/stedolan/jq">jq</a>:</p>

<pre><code class="bash">&gt; youtube-dl -j --flat-playlist 'https://www.youtube.com/watch?v=gdOwwI0ngqQ&amp;list=PLPpZI8R1zUfrkDbmJMOBhEbJ9Td9vbV-F' | jq -r '.id' | sed 's_^_https://youtube.com/v/_'
https://youtube.com/v/gdOwwI0ngqQ
https://youtube.com/v/j9l5nchv1Z8
https://youtube.com/v/znW5ALwWNQw
https://youtube.com/v/qyE7-auTIcc
...
</code></pre>

<p>There you go, a list of URIs you can use. Of course you can put this in a script to save some typing:</p>

<pre><code class="bash youtube-ls-playlist.sh https://gist.github.com/zmwangx/0245788475f963210ed9 Gist">#!/usr/bin/env bash
# Takes a YouTube URI to a playlist (fairly liberal, it's fine as long
# as the playlist id can be extracted), and prints a list of URIs in a
# YouTube playlist.
#
# Requires youtube-dl 2014.10.24, tested on youtube-dl
# 2014.11.02.1. Feature subject to change.
youtube-dl -j --flat-playlist "$1" | jq -r '.id' | sed 's_^_https://youtube.com/v/_'
</code></pre>

<p><strong><em>Aside:</em></strong> I first embedded the gist here, but <a href="http://i.imgur.com/m3cr0Im.png">it looked a bit off</a>. See <a href="https://github.com/imathis/octopress/issues/1392">imathis/octopress#1392</a>.</p>

<blockquote><p>In the next version of the Gist tag plugin we are just downloading the gists and embedding them upon generation so we don&rsquo;t have to worry about GitHub going down and breaking all your gists, or changing the HTML and breaking all the styles.</p>

<p>For the time being I suggest embedding your code snippets directly if you want them to look good.</p></blockquote>

<p>Okay. End of aside.</p>

<p>By the way, <code>youtube-dl</code> supports playlist bulk download natively. The reason I need a list of video ids or URIs, however, is that among other things, <code>youtube-dl</code> doesn&rsquo;t download highest resolution DASH video by default, so I have to rely on something like <code>youtube-dl-dash</code> (<a href="https://github.com/zmwangx/sh/blob/master/youtube-dl-dash">link</a>) to download the best version.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vobcopy, Dvdbackup, Etc.]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/02/vobcopy-dvdbackup-etc/"/>
    <updated>2014-11-02T15:06:07-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/02/vobcopy-dvdbackup-etc</id>
    <content type="html"><![CDATA[<p>A few days ago, I was cloning my entire Audio CD and DVD collection, and reported some of the findings in <a href="/blog/2014/10/26/audio-cd-slash-dvd-to-iso-image-on-os-x/">this post</a>. As said, the most important commands are</p>

<pre><code>hdiutil makehybrid -iso -joliet -o AUDIO_CD_NAME.iso SOURCE
</code></pre>

<p>for Audio CDs and</p>

<pre><code>hdiutil makehybrid -udf -o DVD_NAME.iso SOURCE
</code></pre>

<p>for DVDs.</p>

<p>Those alone don&rsquo;t finish the story. I also tried other things and unfortunately encountered problems. I was too busy to report back then, but now I&rsquo;ll summarize some of the findings.</p>

<hr />

<p>For one thing, <code>hdiutil makehybrid</code> might fail, issuing an &ldquo;Operation not permitted&rdquo; for no obvious reason. This could even happen when you work with the Disk Utility GUI (for which I once got a &ldquo;Permission denied&rdquo;). Even <code>sudo</code> didn&rsquo;t help in my case. However, I was able to <strong>circumvent the problem with the root shell</strong> (I won&rsquo;t tell you how to enter the root shell — you need to at least have that amount of knowledge about the root shell before you are given the key). Not sure why. Just keep in mind that the root shell might help (that&rsquo;s also a general, albeit dangerous, advice for life).</p>

<hr />

<p>Next onto grabbing the raw VOB.</p>

<p><code>vobcopy</code> is pretty sweet, but at least for me it had one huge problem. When I tried to copy a single title, say title #2 with</p>

<pre><code>vobcopy --title-number TITLE_NUMBER -i SOURCE
</code></pre>

<p>other titles got copied, too. I didn&rsquo;t have enough samples to test out, but presumably it&rsquo;s because the problematic DVD has a structure like this:</p>

<p><img src="http://i.imgur.com/HTgmwQL.png" alt="problematic DVD title structure" /></p>

<p>Anyway, no matter I <code>vobcopy</code> title 01, 02, or 03, the result was the same — the whole thing. That&rsquo;s pretty stupid. I don&rsquo;t know if it counts as a bug or unfinished feature. Definitely not cool.</p>

<p>(One cool thing about <code>vobcopy</code>: as long as you complied with <code>libdvdread</code>, you can create a fully decrypted version of the DVD with</p>

<pre><code>vobcopy --mirror -i SOURCE
</code></pre>

<p>Of course, to get an iso image out of the decrypted mirror, you run the <code>hdiutil makehybrid -udf</code> command given above.)</p>

<hr />

<p>So <code>vobcopy</code> is dead (for copying specific titles in unfortunate DVDs). What&rsquo;s next?</p>

<p>There&rsquo;s <code>dvdbackup</code>. The man page is good, and <a href="https://wiki.archlinux.org/index.php/dvdbackup#A_single_title">ArchWiki</a> is even better (<em>ArchWiki is awesome!</em>), providing you cookbook solutions of combining the power of <code>dvdbackup</code> and <code>dvdauthor</code> (cookbooks are nice when dealing with unexciting technologies like DVD). In fact, <code>dvdbackup</code> alone is enough for extracting the VOBs of relatively small titles (&lt; 1GiB):</p>

<pre><code>dvdbackup -i SOURCE -o VOB_TARGET_DIR -t TITLE_NUMBER -n TITLE_NAME
</code></pre>

<p>then grab your title-specific VOB in <code>VOB_TARGET_DIR/TITLE_NAME/VIDEO_TS</code>. Unlike <code>vobcopy</code>&rsquo;s <code>-n/--title-number</code> option, <code>dvdbackup</code>&rsquo;s <code>-t/--title</code> option does it right, trimming everything else. However, there&rsquo;s a problem when the title is larger than 1 GiB — then <code>dvdbackup</code> will split the VOB into several 1 GiB max pieces, and there&rsquo;s no way to disable this (since <code>dvdbackup</code> is targeting a DVD player — ancient technology — rather than <code>mpv</code> or whatever). What&rsquo;s sadder is that I can&rsquo;t seem to combine the split VOBs with FFmpeg stream copy — <code>pcm_dvd</code> audio always gets converted to <code>mp2</code> and fails when I use <code>-c copy</code>. I&rsquo;m not a codec expert, but I suppose this is due to the fact that <code>pcm_dvd</code> isn&rsquo;t a supported encoding codec of FFmpeg (at least not my FFmpeg):</p>

<pre><code>&gt; ffmpeg -codecs | grep pcm_dvd
D.A..S pcm_dvd              PCM signed 20|24-bit big-endian
</code></pre>

<p><code>D</code> is for &ldquo;Decoding supported&rdquo;, <code>A</code> is for &ldquo;Audio codec&rdquo;, <code>S</code> is for &ldquo;Lossless compression&rdquo; — no encoding support. By the way, my FFmpeg is <code>brew</code>ed with the options <code>--with-fdk-aac</code>, <code>--with-ffplay</code>, <code>--with-freetype</code>, <code>--with-libass</code>, <code>--with-libbluray</code>, <code>--with-openjpeg</code>, <code>--with-openssl</code>, <code>--with-x265</code>:</p>

<pre><code>&gt; \ffmpeg -version
ffmpeg version 2.4.2 Copyright (c) 2000-2014 the FFmpeg developers
built on Oct 19 2014 14:09:36 with Apple LLVM version 6.0 (clang-600.0.51) (based on LLVM 3.5svn)
configuration: --prefix=/usr/local/Cellar/ffmpeg/2.4.2 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-nonfree --enable-hardcoded-tables --enable-avresample --enable-vda --cc=clang --host-cflags= --host-ldflags= --enable-libx264 --enable-libfaac --enable-libmp3lame --enable-libxvid --enable-libfreetype --enable-libass --enable-ffplay --enable-libfdk-aac --enable-openssl --enable-libx265 --enable-libopenjpeg --disable-decoder=jpeg2000 --extra-cflags='-I/usr/local/Cellar/openjpeg/1.5.1_1/include/openjpeg-1.5 '
libavutil      54.  7.100 / 54.  7.100
libavcodec     56.  1.100 / 56.  1.100
libavformat    56.  4.101 / 56.  4.101
libavdevice    56.  0.100 / 56.  0.100
libavfilter     5.  1.100 /  5.  1.100
libavresample   2.  1.  0 /  2.  1.  0
libswscale      3.  0.100 /  3.  0.100
libswresample   1.  1.100 /  1.  1.100
libpostproc    53.  0.100 / 53.  0.100
</code></pre>

<p>Maybe I missed some <code>--enable</code>.</p>

<p>Sorry for the digression. So, it&rsquo;s not possible to stream-copy-concat the VOBs with FFmpeg. (In fact, since audio quality is not that important — you won&rsquo;t be able to tell 256k AAC from lossless anyway, especially when you are focusing on the video, so you can always transcode <code>pcm_dvd</code> into 256k AAC with <code>-c:a libfdk_aac -b:a 256k</code>. <code>mpeg2video</code> is an encoding supported codec so stream copy works fine. Or you may also use <code>flac</code> or whatever encoding-supported lossless codec.) However, if you insist on getting the original <code>pcm_dvd</code>, there is a way, an ugly way. You&rsquo;ve gotta be creative here. <a href="https://wiki.archlinux.org/index.php/dvdbackup#A_single_title">ArchWiki</a> already provides a cookbook solution on how to use <code>dvdbackup</code> and <code>dvdauthor</code> to create a DVD with a selected title. And <code>vobcopy</code> can copy the entire thing just fine, without the 1 GiB limit (make sure to use the <code>-l/--large-file</code> option if the size is greater than 2 GiB). Therefore, you can create a DVD with selected title from the original DVD, then <code>vobcopy</code> from the new DVD. This is insane, but it works, I&rsquo;ve tested that. <strong>Note, however, that timestamps might be wrong with <code>vobcopy</code>, so the VOB runs just fine linearly but might run into problems when you seek.</strong> Therefore, FFmpeg is still the way to go. Or maybe you can do it right with one click using some closed source software ☹ — I&rsquo;ve heard about success stories with the long ceased DVD Decrypter Windows project. In reality, I guess only people with theoretical interest or OCD will ever do this — FLAC or AAC should serve everyone just fine. It should have worked with <code>vobcopy</code> alone, but it doesn&rsquo;t. Hence the workaround.</p>

<hr />

<p>For future reference, I&rsquo;ll translate the ArchWiki cookbook solution here (it&rsquo;s too cookbook itself, specifying paths like <code>~/movie_name</code> and using unnecessary <code>cd</code>) about creating a title-specific DVD from a multi-title DVD (replace <code>SOURCE</code>, <code>VOB_TARGET_DIR</code>, <code>DVD_TARGET_DIR</code>, <code>TITLE_NUMBER</code>, and <code>TITLE_NAME</code> with sane values):</p>

<pre><code>dvdbackup -i SOURCE -o VOB_TARGET_DIR -t TITLE_NUMBER -n TITLE_NAME
dvdauthor -t -o DVD_TARGET_DIR VOB_TARGET_DIR/TITLE_NAME/VIDEO_TS/*.VOB
export VIDEO_FORMAT=NTSC
cd DVD_TARGET_DIR/VIDEO_TS &amp;&amp; dvdauthor -T -o DVD_TARGET_DIR
</code></pre>

<p><code>export VIDEO_FORMAT=NTSC</code> is to avoid the <code>dvdauthor</code> error of &ldquo;no default video format, must explicitly specify NTSC or PAL&rdquo; (I&rsquo;m not sure about the difference between NTSC and PAL, but I saw NTSC printed on my DVD, so I used it). And there you go, a shiny new DVD filesystem located in <code>DVD_TARGET_DIR</code>. (Note that unlike <code>vobcopy</code>, <code>dvdbackup</code> doesn&rsquo;t feature a nice progress bar even when <code>-v/--verbose</code> and <code>-p/--progress</code> are specified.) Then you can</p>

<pre><code>vobcopy -l DVD_TARGET_DIR
</code></pre>

<p>if you&rsquo;d like to. Recall that timestamps might be wrong, sadly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ripping Copy-protected DVD With Mpv]]></title>
    <link href="http://zmwangx.github.io/blog/2014/10/23/ripping-copy-protected-dvd-with-mpv/"/>
    <updated>2014-10-23T20:03:22-07:00</updated>
    <id>http://zmwangx.github.io/blog/2014/10/23/ripping-copy-protected-dvd-with-mpv</id>
    <content type="html"><![CDATA[<p><strong><em>11/02/2014 update:</em></strong></p>

<p>See <a href="/blog/2014/11/02/vobcopy-dvdbackup-etc/">this post</a> for issues, explanations, and more.</p>

<hr />

<p><strong><em>10/25/2014 update:</em></strong></p>

<p>I&rsquo;m such an idiot. <code>vobcopy</code> is the real, hassel-free way to go.</p>

<pre><code>brew install vobcopy
</code></pre>

<p>Then, with the DVD mounted,</p>

<blockquote><p><strong>vobcopy</strong> without any options will copy the title with the most chapters into files of 2GB size into the current working directory.</p></blockquote>

<p>Of course there are a ton of options, but I generally hate to browse through options unless I have to, so I&rsquo;m happy with calling without argument.</p>

<hr />

<p>Yesterday I was trying to rip a music video off a newly released DVD from Japan. I knew very little about how DRM (in this case, CSS) actually works and how to break it. I tried to operate directly on the VOB file with <code>ffmpeg</code> or <code>mpv</code> but both failed with a lot of header errors — I suppose more files than the VOB are required for authentication? Whatever, maybe I’ll learn the details in the future, but I don’t see the need since DVD is an outdated technology anyway.</p>

<p>So, can we proceed from here? Most certainly. I noticed that although <code>mpv</code> won’t let me play a single VOB, I can simply hand it the DVD mount point, and it will play the whole DVD seamlessly. <strong>Caution:</strong> <code>mpv</code> needs to be compiled with <code>libdvdnav</code> and <code>libdvdread</code>! With brew you just do</p>

<pre><code>brew install mpv --with-libdvdnav --with-libdvdread
</code></pre>

<p>For better performance and backup, I first cloned the DVD into a <code>.cdr</code> image (DVD/CD-R Master Image) using Disk Utility (I&rsquo;ve never tried creating/cloning image with <code>diskutil</code> CLI, so nothing to report on that). Then I mount the image, say the mount point is <code>/Volumes/UPBX_80165</code>. As said I can hand that mount point to <code>mpv</code> and it simply works, but how about extracting the MPEG-2 video stream? The <code>--stream-capture=&lt;filename&gt;</code> option is there just for you. In principle <code>--stream-dump=&lt;filename&gt;</code> should also work, but without monitoring the output and controlling where to end, I’m not sure if it will ever terminate itself when reading from a DVD (when I stream captured the DVD it just kept repeating itself until I explicitly quit with <code>q</code>). So that&rsquo;s it:</p>

<pre><code>mpv --stream-capture=dump.mpg /Volumes/UPBX_80165
</code></pre>

<p>Then you can torture the <code>dump.mpg</code> with <code>ffmpeg</code> however you want. The most obvious thing is to cut out the music video part, and put into a new container like MPEG-TS. Or transcode it to H.264 for your iPhone. The nice thing about <code>dump.mpg</code> is that, unless I got it wrong, there&rsquo;s no quality loss here — the only thing you got rid of is that goddamn DRM.</p>
]]></content>
  </entry>
  
</feed>
