<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Os X | Daily (?) Complaints (?)]]></title>
  <link href="http://zmwangx.github.io/blog/categories/os-x/atom.xml" rel="self"/>
  <link href="http://zmwangx.github.io/"/>
  <updated>2014-11-02T17:34:49-08:00</updated>
  <id>http://zmwangx.github.io/</id>
  <author>
    <name><![CDATA[Zhiming Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vobcopy, Dvdbackup, Etc.]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/02/vobcopy-dvdbackup-etc/"/>
    <updated>2014-11-02T15:06:07-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/02/vobcopy-dvdbackup-etc</id>
    <content type="html"><![CDATA[<p>A few days ago, I was cloning my entire Audio CD and DVD collection, and reported some of the findings in <a href="/blog/2014/10/26/audio-cd-slash-dvd-to-iso-image-on-os-x/">this post</a>. As said, the most important commands are</p>

<pre><code>hdiutil makehybrid -iso -joliet -o AUDIO_CD_NAME.iso SOURCE
</code></pre>

<p>for Audio CDs and</p>

<pre><code>hdiutil makehybrid -udf -o DVD_NAME.iso SOURCE
</code></pre>

<p>for DVDs.</p>

<p>Those alone don&rsquo;t finish the story. I also tried other things and unfortunately encountered problems. I was too busy to report back then, but now I&rsquo;ll summarize some of the findings.</p>

<hr />

<p>For one thing, <code>hdiutil makehybrid</code> might fail, issuing an &ldquo;Operation not permitted&rdquo; for no obvious reason. This could even happen when you work with the Disk Utility GUI (for which I once got a &ldquo;Permission denied&rdquo;). Even <code>sudo</code> didn&rsquo;t help in my case. However, I was able to <strong>circumvent the problem with the root shell</strong> (I won&rsquo;t tell you how to enter the root shell — you need to at least have that amount of knowledge about the root shell before you are given the key). Not sure why. Just keep in mind that the root shell might help (that&rsquo;s also a general, albeit dangerous, advice for life).</p>

<hr />

<p>Next onto grabbing the raw VOB.</p>

<p><code>vobcopy</code> is pretty sweet, but at least for me it had one huge problem. When I tried to copy a single title, say title #2 with</p>

<pre><code>vobcopy --title-number TITLE_NUMBER -i SOURCE
</code></pre>

<p>other titles got copied, too. I didn&rsquo;t have enough samples to test out, but presumably it&rsquo;s because the problematic DVD has a structure like this:</p>

<p><img src="http://i.imgur.com/HTgmwQL.png" alt="problematic DVD title structure" /></p>

<p>Anyway, no matter I <code>vobcopy</code> title 01, 02, or 03, the result was the same — the whole thing. That&rsquo;s pretty stupid. I don&rsquo;t know if it counts as a bug or unfinished feature. Definitely not cool.</p>

<p>(One cool thing about <code>vobcopy</code>: as long as you complied with <code>libdvdread</code>, you can create a fully decrypted version of the DVD with</p>

<pre><code>vobcopy --mirror -i SOURCE
</code></pre>

<p>Of course, to get an iso image out of the decrypted mirror, you run the <code>hdiutil makehybrid -udf</code> command given above.)</p>

<hr />

<p>So <code>vobcopy</code> is dead (for copying specific titles in unfortunate DVDs). What&rsquo;s next?</p>

<p>There&rsquo;s <code>dvdbackup</code>. The man page is good, and <a href="https://wiki.archlinux.org/index.php/dvdbackup#A_single_title">ArchWiki</a> is even better (<em>ArchWiki is awesome!</em>), providing you cookbook solutions of combining the power of <code>dvdbackup</code> and <code>dvdauthor</code> (cookbooks are nice when dealing with unexciting technologies like DVD). In fact, <code>dvdbackup</code> alone is enough for extracting the VOBs of relatively small titles (&lt; 1GiB):</p>

<pre><code>dvdbackup -i SOURCE -o VOB_TARGET_DIR -t TITLE_NUMBER -n TITLE_NAME
</code></pre>

<p>then grab your title-specific VOB in <code>VOB_TARGET_DIR/TITLE_NAME/VIDEO_TS</code>. Unlike <code>vobcopy</code>&rsquo;s <code>-n/--title-number</code> option, <code>dvdbackup</code>&rsquo;s <code>-t/--title</code> option does it right, trimming everything else. However, there&rsquo;s a problem when the title is larger than 1 GiB — then <code>dvdbackup</code> will split the VOB into several 1 GiB max pieces, and there&rsquo;s no way to disable this (since <code>dvdbackup</code> is targeting a DVD player — ancient technology — rather than <code>mpv</code> or whatever). What&rsquo;s sadder is that I can&rsquo;t seem to combine the split VOBs with FFmpeg stream copy — <code>pcm_dvd</code> audio always gets converted to <code>mp2</code> and fails when I use <code>-c copy</code>. I&rsquo;m not a codec expert, but I suppose this is due to the fact that <code>pcm_dvd</code> isn&rsquo;t a supported encoding codec of FFmpeg (at least not my FFmpeg):</p>

<pre><code>&gt; ffmpeg -codecs | grep pcm_dvd
D.A..S pcm_dvd              PCM signed 20|24-bit big-endian
</code></pre>

<p><code>D</code> is for &ldquo;Decoding supported&rdquo;, <code>A</code> is for &ldquo;Audio codec&rdquo;, <code>S</code> is for &ldquo;Lossless compression&rdquo; — no encoding support. By the way, my FFmpeg is <code>brew</code>ed with the options <code>--with-fdk-aac</code>, <code>--with-ffplay</code>, <code>--with-freetype</code>, <code>--with-libass</code>, <code>--with-libbluray</code>, <code>--with-openjpeg</code>, <code>--with-openssl</code>, <code>--with-x265</code>:</p>

<pre><code>&gt; \ffmpeg -version
ffmpeg version 2.4.2 Copyright (c) 2000-2014 the FFmpeg developers
built on Oct 19 2014 14:09:36 with Apple LLVM version 6.0 (clang-600.0.51) (based on LLVM 3.5svn)
configuration: --prefix=/usr/local/Cellar/ffmpeg/2.4.2 --enable-shared --enable-pthreads --enable-gpl --enable-version3 --enable-nonfree --enable-hardcoded-tables --enable-avresample --enable-vda --cc=clang --host-cflags= --host-ldflags= --enable-libx264 --enable-libfaac --enable-libmp3lame --enable-libxvid --enable-libfreetype --enable-libass --enable-ffplay --enable-libfdk-aac --enable-openssl --enable-libx265 --enable-libopenjpeg --disable-decoder=jpeg2000 --extra-cflags='-I/usr/local/Cellar/openjpeg/1.5.1_1/include/openjpeg-1.5 '
libavutil      54.  7.100 / 54.  7.100
libavcodec     56.  1.100 / 56.  1.100
libavformat    56.  4.101 / 56.  4.101
libavdevice    56.  0.100 / 56.  0.100
libavfilter     5.  1.100 /  5.  1.100
libavresample   2.  1.  0 /  2.  1.  0
libswscale      3.  0.100 /  3.  0.100
libswresample   1.  1.100 /  1.  1.100
libpostproc    53.  0.100 / 53.  0.100
</code></pre>

<p>Maybe I missed some <code>--enable</code>.</p>

<p>Sorry for the digression. So, it&rsquo;s not possible to stream-copy-concat the VOBs with FFmpeg. (In fact, since audio quality is not that important — you won&rsquo;t be able to tell 256k AAC from lossless anyway, especially when you are focusing on the video, so you can always transcode <code>pcm_dvd</code> into 256k AAC with <code>-c:a libfdk_aac -b:a 256k</code>. <code>mpeg2video</code> is an encoding supported codec so stream copy works fine. Or you may also use <code>flac</code> or whatever encoding-supported lossless codec.) However, if you insist on getting the original <code>pcm_dvd</code>, there is a way, an ugly way. You&rsquo;ve gotta be creative here. <a href="https://wiki.archlinux.org/index.php/dvdbackup#A_single_title">ArchWiki</a> already provides a cookbook solution on how to use <code>dvdbackup</code> and <code>dvdauthor</code> to create a DVD with a selected title. And <code>vobcopy</code> can copy the entire thing just fine, without the 1 GiB limit (make sure to use the <code>-l/--large-file</code> option if the size is greater than 2 GiB). Therefore, you can create a DVD with selected title from the original DVD, then <code>vobcopy</code> from the new DVD. This is insane, but it works, I&rsquo;ve tested that. <strong>Note, however, that timestamps might be wrong with <code>vobcopy</code>, so the VOB runs just fine linearly but might run into problems when you seek.</strong> Therefore, FFmpeg is still the way to go. Or maybe you can do it right with one click using some closed source software ☹ — I&rsquo;ve heard about success stories with the long ceased DVD Decrypter Windows project. In reality, I guess only people with theoretical interest or OCD will ever do this — FLAC or AAC should serve everyone just fine. It should have worked with <code>vobcopy</code> alone, but it doesn&rsquo;t. Hence the workaround.</p>

<hr />

<p>For future reference, I&rsquo;ll translate the ArchWiki cookbook solution here (it&rsquo;s too cookbook itself, specifying paths like <code>~/movie_name</code> and using unnecessary <code>cd</code>) about creating a title-specific DVD from a multi-title DVD (replace <code>SOURCE</code>, <code>VOB_TARGET_DIR</code>, <code>DVD_TARGET_DIR</code>, <code>TITLE_NUMBER</code>, and <code>TITLE_NAME</code> with sane values):</p>

<pre><code>dvdbackup -i SOURCE -o VOB_TARGET_DIR -t TITLE_NUMBER -n TITLE_NAME
dvdauthor -t -o DVD_TARGET_DIR VOB_TARGET_DIR/TITLE_NAME/VIDEO_TS/*.VOB
export VIDEO_FORMAT=NTSC
cd DVD_TARGET_DIR/VIDEO_TS &amp;&amp; dvdauthor -T -o DVD_TARGET_DIR
</code></pre>

<p><code>export VIDEO_FORMAT=NTSC</code> is to avoid the <code>dvdauthor</code> error of &ldquo;no default video format, must explicitly specify NTSC or PAL&rdquo; (I&rsquo;m not sure about the difference between NTSC and PAL, but I saw NTSC printed on my DVD, so I used it). And there you go, a shiny new DVD filesystem located in <code>DVD_TARGET_DIR</code>. (Note that unlike <code>vobcopy</code>, <code>dvdbackup</code> doesn&rsquo;t feature a nice progress bar even when <code>-v/--verbose</code> and <code>-p/--progress</code> are specified.) Then you can</p>

<pre><code>vobcopy -l DVD_TARGET_DIR
</code></pre>

<p>if you&rsquo;d like to. Recall that timestamps might be wrong, sadly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convert Audio CD/DVD to ISO Image on OS X]]></title>
    <link href="http://zmwangx.github.io/blog/2014/10/26/audio-cd-slash-dvd-to-iso-image-on-os-x/"/>
    <updated>2014-10-26T23:29:47-07:00</updated>
    <id>http://zmwangx.github.io/blog/2014/10/26/audio-cd-slash-dvd-to-iso-image-on-os-x</id>
    <content type="html"><![CDATA[<p><strong><em>11/02/2014 update:</em></strong></p>

<p>See <a href="/blog/2014/11/02/vobcopy-dvdbackup-etc/">this post</a> for issues, explanations, and more.</p>

<hr />

<p>Today it occurred to me that I should make clones of my audio CDs (as stand-alone ISO images, I mean, not just rsyncing the AIFFs to subdirectories in <code>~/aud/lossless</code>). One can never have too many backups.</p>

<p>Of course I could simply pack the aforementioned directories with AIFFs into ISOs — that’s not impressive. The end result might actually be the same, but I want to make the clones directly from the original CDs. It turns out that this is not so simple with the Disk Utility GUI — unlike DVDs, the “New Image” option is grayed out for Audio CDs. I’m not sure why, but maybe they want you to just use iTunes to deal with Audio CDs (which works well for all practical purposes — but theoretical curiosity never ends).</p>

<p>So there comes <code>hdiutil</code>. <code>hdiutil</code> and <code>diskutil</code> are the utilities underlying Disk Utility. Unfortunately, so far I know little about them except for simplest things like <code>diskutil list</code>, <code>diskutil mount</code>, <code>hdiutil attach -stdinpass</code>, etc. (I&rsquo;m so ignorant about anything filesystem related!) The <code>hdiutil</code> verb that makes cross-platform CD or DVD is <code>makehybrid</code>, which supports the following filesystem options: <code>-hfs</code> (holy crap, no HFS+ please! Apple ought to replace this thirty-year-old filesystem — ZFS or something better please!), <code>-iso</code>, <code>-joliet</code>, and <code>-udf</code>. For Audio CDs you use <code>-iso</code> and with <code>-joliet</code> extension:</p>

<pre><code>hdiutil makehybrid -iso -joliet -o AUDIO_CD_NAME.iso SOURCE
</code></pre>

<p>where <code>SOURCE</code> can be the mount point, the disk device file, etc. Similarly, although you can create <code>.cdr</code> images from DVDs via the Disk Utility GUI, you can also do it with <code>hdiutil</code> (which is potentially more portable — I’ve never heard a definitive answer of whether renaming <code>.cdr</code> to <code>.iso</code> really cross-platform):</p>

<pre><code>hdiutil makehybrid -udf -o DVD_NAME.iso SOURCE
</code></pre>

<p>This way CSS keys <em>seem</em> to be cloned as well, since I was able to authenticate such a CSS-protected DVD with <code>libdvdread</code>.</p>

<hr />

<p>P.S. I sincerely hope that one day lossless music tracks are no longer distributed through CD-ROMs. So painful — even my Internet speed is more than ten times faster than the <a href="https://en.wikipedia.org/wiki/CD-ROM#Transfer_rates">highest transfer rate</a> available from any CD-ROM. (I’ve heard about some websites distributing lossless music digitally, but that won’t happen to the music I care about in the near future.) I still like physical albums though — a real sense of possession. Maybe they should contain the physical goodies and some sort of access codes?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Package Receipts]]></title>
    <link href="http://zmwangx.github.io/blog/2014/10/25/os-x-package-receipts/"/>
    <updated>2014-10-25T13:26:02-07:00</updated>
    <id>http://zmwangx.github.io/blog/2014/10/25/os-x-package-receipts</id>
    <content type="html"><![CDATA[<p>I just learned something new. Whenever you install a <code>pkg</code> on OS X, OS X stores a receipt of what was installed in <code>/var/db/receipts</code> (I&rsquo;m running OS X 10.9.5 at the time of writing), called a <strong>bom</strong> — bill of materials (I’d rather call it a manifest, whatever). This feature was introduced in NeXTSTEP. From <code>man 5 bom</code>:</p>

<blockquote><p>The Mac OS X Installer uses a file system &ldquo;bill of materials&rdquo; to determine which files to install, remove, or upgrade. A bill of materials, <strong>bom</strong>, contains all the files within a directory, along with some information about each file. File information includes: the file&rsquo;s UNIX permissions, its owner and group, its size, its time of last modification, and so on.  Also included are a checksum of each file and information about hard links.</p></blockquote>

<p><code>man 5 bom</code> is actually badly maintained, as it says &ldquo;The bill of materials for installed packages are found within the package receipts located in /Library/Receipts,&rdquo; whereas those have been migrated to <code>/var/db/receipts</code> a long time ago.</p>

<p><code>.bom</code> files are binary, but you can access the contents via <code>lsbom</code>. For instance, to list the files installed,</p>

<pre><code>lsbom -f /var/db/receipts/org.macports.MacPorts.bom
</code></pre>

<p>Note that the paths printed are always relative to <code>/</code>. See <code>man 1 lsbom</code> for detailed option listing.</p>

<p>(Beware when you try to clean up unwanted packages using the <code>lsbom</code> listing. Packages might overwrite files, so make sure you review the listing first and know what you are doing. &ldquo;Knowing what you are doing&rdquo; is the prerequisite for using <code>sudo</code> anyway.)</p>
]]></content>
  </entry>
  
</feed>
