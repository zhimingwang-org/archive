<feed xmlns="http://www.w3.org/2005/Atom"><title>dl? cmplnts?</title><subtitle>Zhiming Wang's personal blog</subtitle><link href="http://zmwangx.github.io/atom.xml" rel="self" type="application/atom+xml"/><link href="http://zmwangx.github.io/" rel="alternate" type="text/html"/><updated>2015-06-16T01:26:48-07:00</updated><id>http://zmwangx.github.io/</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><icon>http://zmwangx.github.io/img/icon-400.png</icon><generator uri="https://github.com/zmwangx/zmwangx.github.io">pyblog</generator><entry><title type="html">The tip of the iceberg</title><link href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html"/><updated>2015-06-12T14:24:18-07:00</updated><id>http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p><em><strong>Disclaimer</strong>: While this post might have been triggered by a <a href="https://twitter.com/search?q=%23distractinglysexy">specific</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn1" id="fnref1"><sup>1</sup></a> campaign, I'm certainly not addressing any specific concern or siding with any party. I never bothered to learn enough about a specific campaign to form a judgement that I would stand by,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn2" id="fnref2"><sup>2</sup></a> since I simply don't care. I'm writing this post because I'm just too tired to see them popping up in my feeds every once in a while.</em></p>
<p><em>By the way, I'm not sure if I'm going to stand by this post when I wake up tomorrow morning. It will stay either way, though.</em></p>
<hr/>
<p>I have the impression that these days there's at least one public shaming campaign going on every week, justified by political correctness, and serving as a great outlet for school or workplace frustration accumulated during the week. And every now and then, a woman or man<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn3" id="fnref3"><sup>3</sup></a> is destroyed by such a campaign, although all she or he did was to make a somewhat flippant yet universally true,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn4" id="fnref4"><sup>4</sup></a> almost universally true, or at the very least, not-meant-to-be-offensive, remark.</p>
<p>On the face of it (e.g., retweet counts), you might be convinced that the world is seriously supportive of such campaigns. However, you have to realize that <em>the tens or even hundreds of thousands of campaigners are still just one tip of the iceberg called the society</em>. Behind every campaigner there are probably ten people holding opposite views, and one thousand who simply don't care either way<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fn5" id="fnref5"><sup>5</sup></a>. Since political correctness is involved, how many people would you expect to be outspoken about their true opinions? Most likely people are muted by the fear of being politically wrong and being pursued and destroyed, just like the poor guy at the center of the storm. Moreover, I'm afraid that some (if not most) campaigners are not really offended, but just joining what they see as a hilarious ride &#8212; they don't mind if a woman or man is destroyed along the way. You know, humans can be unintentionally cruel to people not worth being cruel to. This statement also applies to some of the shaming campaign targets, but <em>being unintentionally cruel doesn't automatically make them worth being cruel to</em>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>In this case the campaign is too civilized to be called a shaming campaign.<a href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>And I question if most shamers did.<a href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>Note how I have to be distracted from writing to consider the wording that should have been subconscious, and eventually write in this style.<a href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref3">&#8617;</a></p></li>
<li id="fn4"><p>Sometimes a certain group of people seek to redefine certain concepts or terms so that truths stated with older concepts or terms in mind are no longer true. That's fine. But before you label someone as an asshole, you have to realize that while you are free to embrace <em>your</em> modernity, some (if not most) people are just not as radical or as concerned about your topic, and they are just holding on to the truths and values they were taught.<a href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref4">&#8617;</a></p></li>
<li id="fn5"><p>Yes, I'm among the one thousand.<a href="http://zmwangx.github.io/blog/2015-06-12-the-tip-of-the-iceberg.html#fnref5">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Chrome disappointment: the shabby and boring old bookmark system from Stone Age strikes back</title><link href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html"/><updated>2015-06-10T23:17:05-07:00</updated><id>http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>I just restarted my machine (in the process of planning a fresh OS re-install), and something in Chrome's UI immediately felt wrong. After a few moments I realized it was the star button (bookmark button) in the far right of the omnibox giving me the uneasy feeling &#8212; the old bookmark system is back. Broadcasting from stable channel, build 43.0.2357.124 on OS X.</p>
<div class="figure">
<img alt="What caught my immediate attention." src="http://zmwangx.github.io/img/20150610-omnibox-with-aged-star.png"/>
<p class="caption">What caught my immediate attention.</p>
</div>
<div class="figure">
<img alt="The heart sinking feeling when I saw this again." src="http://zmwangx.github.io/img/20150610-old-bookmark-manager.png"/>
<p class="caption">The heart sinking feeling when I saw this again.</p>
</div>
<p>I went to flags and made sure "Enable the new bookmark app system" wasn't tempered with. It wasn't. Anyway, I changed it to "Enabled" and restarted Chrome. No go, still the old crap. So I Googled my way to <a href="https://productforums.google.com/forum/#!topic/chrome/mhIX5LB23As">the announcement</a>:</p>
<blockquote>
<p>Hi Everyone,</p>
<p>Our team is committed to improving Chrome&#8217;s bookmarks experience, but for the time being, we&#8217;ve decided to bring back the previous version. Our team will continue to explore other ways to improve the bookmarks experience. You&#8217;ll see the previous version of the bookmarks manager return to your Chrome browser shortly.</p>
<p>For those of you who enjoyed using the new bookmarks manager, you can still keep the new experience by downloading the Bookmarks Manager extension from the Chrome Web Store.</p>
<p>We appreciate hearing all of your thoughtful feedback. Feel free to leave us with any additional comments here in this thread.</p>
<p>Best,<br/> The Chrome team</p>
</blockquote>
<p>This is just very disappointing. My default browser changes a lot, but I've been tagging along with Opera for <a href="http://zmwangx.github.io/blog/2014-12-14-the-google-chrome-comic-a-classic.html">almost the entirety of 2014</a>, so I've long been used to visual bookmarks. And honestly, it never felt weird or anything; I saw it as an improvement the first time I was introduced to the concept.</p>
<p>I know, there's always a demographic that would fiercely resist any change; they would reject anything new at a glance (or after using for a second) and start moaning right away, disregarding all the new benefits here and there. There's also another demographic who not only have no taste in design at all, but would also actively seek to tear down any visual enhancement &#8212; 90s visual is enough for them for life, any more is unsolicited and insulting. When these two demographics meet<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn1" id="fnref1"><sup>1</sup></a> and somehow make the developers retreat, the outcome is simple and sad: <em>we can never have nice things.</em></p>
<p>I'm not saying I'm 100% satisfied with Chrome's visual bookmarks. In fact far from that. For one thing, Google is really pretty bad at visual design.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn2" id="fnref2"><sup>2</sup></a> Also, not being able to adjust tile size or toggle a list view is rather lame. However, whatever problems there are, the new system is at least 200% better than the old one (just look that the screenshots!).<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn3" id="fnref3"><sup>3</sup></a> <em>The team should focus on making the new system better,</em> such as implementing the features I mentioned above, rather than throw it into the trash can and resurrect the old system from Stone Age.</p>
<p>I know, throwing things away is part of Google's philosophy. They usually toy with a wide range of ideas and discard the ones that people don't buy into. Not that I whole-heartedly agree with strategy, but to advance technology there has to be some Brownian motion out there, and Google usually listens to the market, which is fine. In this case, however, there's really nothing innovative about visual bookmarks, and I can't see how the new system could harm market share or anything either. In fact, it could only help, since except the anti-design demographic, who would choose the aged and boring layout from the old system?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn4" id="fnref4"><sup>4</sup></a> Moreover, people tend to ignore the fact that the new system is also functionally superior &#8212; it offers to</p>
<ul>
<li>Learn and suggest folder for a new bookmark (which is often accurate);</li>
<li>Create auto folders based on site or keyword;</li>
<li>Allow arbitrary text data to be stored with each entry (e.g., a page-specific non-sensitive access code);</li>
<li>One tap pop from assigned folder;</li>
</ul>
<p>and more. Those that resist everything new are simply blind. The team claim that they are listening to "thoughtful feedback"; well, can they tell "thoughtful feedback" from blind suspicion and denial about everything? And they do realize that feedback is heavily biased, as someone with positive experience (unless he is a hardcore fan) is unlikely to leave them a thank you message? I think it's pretty clear that the majority of users won't care either way<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn5" id="fnref5"><sup>5</sup></a>; the majority of the rest was happy with the change; and the rest, comprising only a diminishingly small percentage, is what kept us from having nice things.</p>
<p>Even if one agrees with nothing from the last paragraph, one has to realize that randomly dropping a big change this way is just irresponsible.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fn6" id="fnref6"><sup>6</sup></a> There were hurt feelings when the change was first introduced (not that I care about them), so don't change mind again three weeks later, hurting yet another camp. Whether it was a change for the good or the bad, admit it was done (admit you screwed up if you did) and focus on improving it.</p>
<p>End of rant, off to install the <a href="https://chrome.google.com/webstore/detail/bookmark-manager/gmlllbghnfkpflemihljekbapjopfjik">Bookmark Manager extension</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>There's actually a pretty big overlap between these two demographics.<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>The giant blue search bar at the top is especially ridiculous.<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>I didn't bother to switch to an earlier build just to take a screenshot of the visual system, so unfortunately there's no comparison here. But anyone who's been there knows what I'm saying.<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref3">&#8617;</a></p></li>
<li id="fn4"><p>Unless one has hundreds of bookmarks in a single folder (which probably means some cleanup or refactoring is long overdue), the old layout is unlikely to be easier on the eyes or anything.<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref4">&#8617;</a></p></li>
<li id="fn5"><p>Well, grandmas have one more thing to learn, I guess...<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref5">&#8617;</a></p></li>
<li id="fn6"><p>In other news, Google dropped YouTube collections two weeks ago (<a href="https://support.google.com/youtube/answer/6233832?hl=en">May 26, 2015</a>), causing another round of agony. Also, subscriptions were all over the place once more, just like Google's project landscape.<a href="http://zmwangx.github.io/blog/2015-06-10-chrome-disappointment-the-shabby-and-boring-old-bookmark-system-from-stone-age-strikes-back.html#fnref6">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Apple turns its homepage into a WWDC liveblog</title><link href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html"/><updated>2015-06-08T14:42:50-07:00</updated><id>http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>WWDC is Apple's biggest event every year, and WWDC keynote always attracts tons of hype. Apple knows that. In the past years folks who can't (at work, in class, etc.) or don't want to watch the crappy live stream would follow the various WWDC liveblogs presented by tech sites like Gizmodo, TechCrunch, Ars Technica, etc. But this year the landscape has changed: Apple rolled its own card-based liveblog at <a href="http://www.apple.com/live/2015-june-event/">www.apple.com/live/2015-june-event</a>.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fn1" id="fnref1"><sup>1</sup></a> Not only that; during the keynote, Apple redirected its homepage to the liveblog page, so it effectively turned its homepage into a liveblog:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">&gt;</span> curl -sSIL http://www.apple.com
HTTP/1.1 302 Moved Temporarily
Location: http://www.apple.com/live/
Content-Length: 210
Content-Type: text/html; <span class="ot">charset=</span>iso-8859-1
Expires: Mon, 08 Jun 2015 19:16:41 GMT
Cache-Control: max-age=0, no-cache, no-store
Pragma: no-cache
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache

HTTP/1.1 301 Moved Permanently
Content-Length: 0
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache
Location: http://www.apple.com/live/2015-june-event/

HTTP/1.1 200 OK
Last-Modified: Mon, 08 Jun 2015 15:45:30 GMT
ETag: <span class="st">"0b7bcbfbd14c411e64e728ae4d644de7"</span>
Content-Type: text/html
Cache-Control: max-age=298
Date: Mon, 08 Jun 2015 19:16:41 GMT
Connection: keep-alive
Server: Apache</code></pre></div>
<p>Of course, you miss a few jokes and random shots of Tim or Craig from the official liveblog, but hey, who don't like that official feel?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fn2" id="fnref2"><sup>2</sup></a></p>
<p>Here are a few screenshots of today's liveblog. Unfortunately I only know some entry level JS, so I wasn't able to capture the entire page, which uses dynamic DOM based on one's position in the page.</p>
<div class="figure">
<img alt="The banner on Chrome." src="http://zmwangx.github.io/img/20150608-wwdc-2015-banner.png"/>
<p class="caption">The banner on Chrome.</p>
</div>
<div class="figure">
<img alt="Introducing OS X El Capitan, 960x981." src="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-960x981.png"/>
<p class="caption">Introducing OS X El Capitan, 960x981.</p>
</div>
<div class="figure">
<img alt="A fuller experience: 1920x1080." src="http://zmwangx.github.io/img/20150608-wwdc-2015-liveblog-1920x1080.png"/>
<p class="caption">A fuller experience: 1920x1080.</p>
</div>
<p>By the way, here are the full-page screenshots of <a href="http://www.apple.com/osx/elcapitan-preview/">OS X 10.11 El Capitan</a> and <a href="http://www.apple.com/ios/ios9-preview/">iOS 9</a> previews. <code>pageres</code> recently <a href="https://github.com/sindresorhus/pageres/issues/174">cannot render web fonts</a>, which is rather annoying, so I used <a href="https://github.com/mrcoles/full-page-screen-capture-chrome-extension">Full Page Screen Capture</a> to capture the shots. I then resized to 50% to reduce filesizes a bit.</p>
<div class="figure">
<img alt="OS X El Capitan" src="http://zmwangx.github.io/img/20150608-osx-el-capitan-preview-1920x1080-50%25.png"/>
<p class="caption"><a href="http://www.apple.com/osx/elcapitan-preview/">OS X El Capitan</a></p>
</div>
<div class="figure">
<img alt="iOS 9" src="http://zmwangx.github.io/img/20150608-ios-9-preview-1920x1080-50%25.png"/>
<p class="caption"><a href="http://www.apple.com/ios/ios9-preview/">iOS 9</a></p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>The crappy live stream is still there, but thankfully you wouldn't see it if you're on a browser other than Safari. Just look the screenshot of the banner.<a href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>Yeah, I know some people don't; but those people are not likely to be Apple fans either.<a href="http://zmwangx.github.io/blog/2015-06-08-apple-turns-its-homepage-into-a-wwdc-liveblog.html#fnref2">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">StackOverflow review system is completely BS</title><link href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html"/><updated>2015-06-07T18:58:57-07:00</updated><id>http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>I just answered an interesting question about ZLE <a href="http://stackoverflow.com/q/30699242/1944784">on StackOverflow</a>, and in the process I also improved my own toolchain. For the record, the OP asked for tab completion to present working directory items (executable files and directories) on an empty command line, which led to the following widget:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># This widget inserts "./" to the buffer and list possible completions</span>
<span class="co"># (executable files and directories in the present working directory) if the</span>
<span class="co"># buffer is empty or only contains whitespace.</span>
<span class="kw">function</span><span class="fu"> complete_pwd_items_on_empty_buffer</span>
<span class="kw">{</span>
    <span class="kw">if [[</span> <span class="ot">$BUFFER</span> =~ ^[[:space:]]*$<span class="kw"> ]]</span>; <span class="kw">then</span>
        <span class="ot">BUFFER+=</span><span class="st">"./"</span>
        <span class="ot">CURSOR+=</span>2
        <span class="kw">zle</span> list-choices
    <span class="kw">else</span>
        <span class="kw">zle</span> expand-or-complete
    <span class="kw">fi</span>
<span class="kw">}</span>

<span class="kw">zle</span> -N complete_pwd_items_on_empty_buffer</code></pre></div>
<p>This is all good stuff.</p>
<p>However, at some point a <a href="https://stackoverflow.com/users/608639/jww">security architect and mobile security engineer</a> jumped in and made <a href="https://stackoverflow.com/questions/30699242/first-tab-completion-enhancement#comment49457640_30699242">the following comment</a>:</p>
<blockquote>
<p>Stack Overflow is a site for programming and development questions. This question appears to be off-topic because it is not about programming or development. See <a href="https://stackoverflow.com/help/on-topic">What topics can I ask about here</a> in the Help Center. Perhaps Super User or Unix &amp; Linux Stack Exchange would be a better place to ask. Also see <a href="http://meta.stackexchange.com/q/134306">Where do I post questions about Dev Ops</a>?</p>
</blockquote>
<p>Then the question was put on hold by several not-so-high-rep users as off-topic, and the reason given is</p>
<blockquote>
<p>Questions about general computing hardware and software are off-topic for Stack Overflow unless they directly involve tools used primarily for programming. You may be able to get help on Super User.</p>
</blockquote>
<p>WTF. First, <em>programming ZLE widgets is programming.</em> Hell, I even gave chunks of Zsh code in the answer (and they saw that, because the stupid comment and its upvotes came after my answer was put up). If writing an interactive Android crapp in Java for your Samsung counts as programming, why is writing an interactive widget for my Z shell any inferior? Second, even if you want to follow what the Help Center says, this question clearly falls under</p>
<blockquote>
<p>software tools commonly used by programmers.</p>
</blockquote>
<p>Maybe Zsh isn't used by those specific voters (I guess most of them are Windows lusers), but it has a very vibrant community, and it clearly rules. Maybe the specific voters don't realize that Zsh is a programming language; that alone shows how ignorant they are.</p>
<p>However, these are just specific lusers. Why do I generalize and insist that "StackOverflow review system is completely BS"? Well, just look at the voters' stats; I searched for their involvement in the <code>zsh</code> tag, and here are the results: <a href="https://stackoverflow.com/search?q=user:2422776+[zsh]">1</a>, <a href="https://stackoverflow.com/search?q=user:683218+[zsh]">2</a>, <a href="https://stackoverflow.com/search?q=user:608639+[zsh]">3</a>, <a href="https://stackoverflow.com/search?q=user:3836229+[zsh]">4</a>, <a href="https://stackoverflow.com/search?q=user:2772643+[zsh]">5</a>. Unsurprisingly, nothing, except one guy has answered a question about ASCII art, which shouldn't be placed under <code>zsh</code> in the first place. While someone knowlegeable of Zsh doesn't necessarily need to ask or answer questions about Zsh on SO, this quick search does reveal that these voters, rather than following the <code>zsh</code> tag, just popped out of nowhere, probably from the review queues. In this case it's pretty obvious that they're going after a new user (the OP just registered). And that is one of the main problems with SO's review system that makes it highly questionable in many cases:</p>
<p><strong>The review tasks are handed to people who have no knowledge of the topics,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn1" id="fnref1"><sup>1</sup></a> and these people just operate under assumptions (e.g., new users will ask off-topic questions.)<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn2" id="fnref2"><sup>2</sup></a></strong></p>
<p>The solution? I'm afraid <em>there's no solution as long as the system is in place</em>. Ideally one should skip questions from topics that they don't understand, but in reality people just do as they damned well please, whether because they are working toward a badge, or because they <em>think</em> they understand the topic but really don't, or because they are outright jerks. Also, there are tons of totally fucked-up questions lying in every corner of SO (like questions displaying such profound ignorance<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fn3" id="fnref3"><sup>3</sup></a> that no one would answer due to embarrassment, or those despicable "I can has code" questions) that no one cares about cleaning up, but instead they chose to target this well-meaning question that generated a pretty useful answer. By the way, this is the kind of thing I see all the time.</p>
<p>I hope SO could abandon this questionable "review queue" practice altoghether. Let people who actually follow the tags do the reviewing and voting. Honestly, no one really cares about dangling low-quality questions anyway.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>This problem isn't limited to reviews; it also applies to, for instance, approved edits. My <em>tag edits</em> (with explanations) got rejected quite a few times because the reviewers clearly didn't understand the topic &#8212; e.g., some morons assume that command line problems equal Bash problems.<a href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>This is actually a good assumption, because this is the case at least 50% of the time from my limited experience. But one shouldn't operate under this assumption, especially if one doesn't understand the topic.<a href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>I think I asked quite a few stupid questions back in the days, and now I'm totally ashamed of them. Insterestingly, some of those questions are my highest voted ones and got me quite some reps (compared to my total rep &#8212; I'm by no means a high rep user). See <a href="http://michael.richter.name/blogs/why-i-no-longer-contribute-to-stackoverflow"><em>Why I no longer contribute to StackOverflow</em></a> for a thorough discussion of the broken rep system and its disastrous effects.<a href="http://zmwangx.github.io/blog/2015-06-07-stackoverflow-review-system-is-completely-bs.html#fnref3">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Using a personal helper package in everyday scripting</title><link href="http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html"/><updated>2015-05-30T22:48:57-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Recently I've been scripting (mostly in Python) quite a bit, and noticed that some functionalities get copied over or reimplemented over and over again. Examples include reading configuration files (mostly JSON, INI, and YAML), printing progress information to tty in color, displaying progress bar, and so on.</p>
<p>In light of this, I came up with the idea of keeping a pool of helper modules in a personal helper package. I'm unimaginative at naming things, so I just named my package <code>zmwangx</code>. It is <a href="https://github.com/zmwangx/pyzmwangx">published on GitHub</a>, and the API docs are published on <a href="https://pyzmwangx.readthedocs.org">Read the Docs</a> for easy reference during scripting.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html#fn1" id="fnref1"><sup>1</sup></a> At the time of writing the following helper modules are available in the package:</p>
<ul>
<li><code>colorout       -</code> colorized output to stdout and stderr, and much more.</li>
<li><code>config         -</code> read and write config files of various common formats.</li>
<li><code>hash           -</code> hash files in a memory-efficient manner.</li>
<li><code>humansize      -</code> convert size in bytes to human readable string (IEC or SI).</li>
<li><code>humantime      -</code> convert duration in seconds to human readable string.</li>
<li><code>infrastructure -</code> testing infrastructure.</li>
<li><code>pbar           -</code> display progress bar for the progress of processing a file or stream.</li>
<li><code>urlgrep        -</code> parse and match URLs from HTML documents.</li>
</ul>
<p>With a personalized helper package, scripting has never been more enjoyable. Here are just some of the benefits:</p>
<ul>
<li>Stating the obvious: write once, use everywhere (without copy/paste);</li>
<li>As always, factoring out small functional units make code more readable and easier to debug; and having a dedicated pool just for helper modules encourages one to think about factoring, <em>early</em>;</li>
<li>Bug fixes and enhancements in the helper package are instantly effective accross the board.</li>
</ul>
<p>Of course, one cannot depend on such a package in a formally published package (say, one published to PyPI), so things like <code>tools.py</code> or whatever are still necessary from time to time. But for day-to-day scripting, having a personal helper package that is used accross the board is definitely a good idea.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I'm pretty paranoid about documenting things.<a href="http://zmwangx.github.io/blog/2015-05-30-using-a-personal-helper-package-in-everyday-scripting.html#fnref1">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Apple's customer service is still the best (plus an Authy horror story)</title><link href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html"/><updated>2015-05-29T20:40:05-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Recently the mute switch (officially known as the Ring/Silent switch) on my little-more-than-half-a-year-old iPhone 6 Plus stopped working. It almost always bounced back to ON (ring) position upon turning, and even if I could keep it at the OFF position for five seconds, it would most likely bounce back when I thrust it into my pocket. I got bitten a few times &#8212; almost got heart attacks when the phone dinged loudly in class. Minor yet annoying problem.</p>
<p>So I took my phone to the Genius Bar today, prepared to have it sent to a repair center<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn1" id="fnref1"><sup>1</sup></a> and get a loan in the mean time &#8212; basically, I was prepared for all sorts of trouble. But nope. I demoed the problem for three seconds, my agent explained to me in five seconds that the switch alone was hard to replace and took fifteen seconds to verify my warranty status (I suppose), then off he went to retrieve a brand new replacement for me. No questions asked about the little dent on my old phone or whatever. <em>So I ended up with a brand new phone in less than five minutes.</em> (Of course, redoing setup and restoring backup took much longer than that.)</p>
<p>This is <em>the</em> customer service we should receive everywhere. Unfortunately, Apple seems to be one of the very few tech giants (or the only one?) that take customers seriously. Yeah, Apple sells products at a premium; but hey, they also live up to what one would expect from a premium product.</p>
<hr/>
<p>By the way, my only gripe during the process wasn't with Apple; it's about setting up Authy on the new phone. I verified my phone number via SMS and signed into Authy. I entered my backup password, which must be correct since it came straight off 1Password. My Authenticator accounts were displayed (I didn't verify if they would produce TOTPs) but a weird error message along the line of "data is corrupted" was shown to me, asking me to verify my phone for a second time. Unsuspecting, I asked Authy to send me another SMS, and entered the code I got. Then boom! All of a sudden <em>all my Authenticator accounts were gone</em>, leaving me with merely an Authy dev and a Coinbase account, which were the only ones using Authy's native auth system. My heart almost sank for a second; I could foresee the hours that would go down the drain, recovering (dozens of) accounts and regenerating new keys for two-factor auth.</p>
<p>That was before I immediately realized that all my secret keys were safe and sound in 1Password's database. In the past few months, AgileBits implemented TOTP support in both the iOS and OS X versions of 1Password. The day <a href="https://blog.agilebits.com/2015/04/06/1password-5-3-for-mac-the-bionic-edition-is-out/">OS X support came into stable 5.3</a>, I exported all my Authenticator secret keys from Authy to 1Password (with help from <a href="https://www.pommepause.com/2014/10/how-to-extract-your-totp-secrets-from-authy/">this blog post</a><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn2" id="fnref2"><sup>2</sup></a>). At that time I didn't expect 1Password would save my day later. Overall, the $50 (OS X) plus $17 (iOS) I spent on 1Password was my most worthwhile spend on software, ever.</p>
<p>The lesson to learn from my Authy horror story is that one should export and backup Authenticator secret keys from Authy before it's too late. Moreover, this one shitty experience with Authy is enough to keep me away from it for the ages to come, expect for services that are Authy-specific, e.g., Coinbase<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fn3" id="fnref3"><sup>3</sup></a>. 1Password is the way to go, and with the addition of TOTP, it is one more step towards a truly one password experience. If you don't own 1Password yet, you should really get it, now.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>As I see no obvious way to replace the switch in store. My intuition was later confirmed.<a href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>The first comment below that post is mine.<a href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>I have a Coinbase account and probably around 0.01 BTC in my wallet, but I don't really use bitcoins. At the time I signed up for two-factor auth on Coinbase, Authy seemed to be only supported system; however, I just signed in again and it seems that Coinbase is now supporting Authenticator also. Whatever the case, Authy is practically dead for me.<a href="http://zmwangx.github.io/blog/2015-05-29-apples-customer-service-is-still-the-best-plus-an-authy-horror-story.html#fnref3">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Using a command table as wallpaper</title><link href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html"/><updated>2015-05-22T00:48:19-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Recently I cleaned up my source code directory, removed a lot of rarely-used, dated scripts, and grouped the remaining standalone scripts into a central place (<code>~/dev/scripts</code>)<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fn1" id="fnref1"><sup>1</sup></a>. One thing I learned in this process is that I tend to write a reusable script but rarely actually reuse it (even if it sits on <code>PATH</code>), sometimes implementing the same functionality twice or typing a long command line over and over again.</p>
<p>To remind myself of which scripts are at my fingertip, I decided to use a command table as wallpaper on my secondary display. So I wrote a shitty Python script<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fn2" id="fnref2"><sup>2</sup></a> (depending on XeLaTeX and ImageMagick) to automate the generation of such a wallpaper. It's pretty customizable, and anyone may grab it and do whatever they want to with it (also <a href="https://gist.github.com/zmwangx/b06aa923abf061b33fc9">available as a gist</a>):</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="co">"""Generate command table."""</span>

<span class="im">import</span> argparse
<span class="im">import</span> os
<span class="im">import</span> shlex
<span class="im">import</span> subprocess
<span class="im">import</span> sys
<span class="im">import</span> tempfile

<span class="co"># pylint: disable=wildcard-import,unused-wildcard-import</span>

<span class="im">from</span> zmwangx.colorout <span class="im">import</span> <span class="op">*</span>

DEFAULT_COLUMN_WIDTH <span class="op">=</span> <span class="dv">120</span>
DEFAULT_FOREGROUND_COLOR <span class="op">=</span> <span class="st">"white"</span>
DEFAULT_BACKGROUND_COLOR <span class="op">=</span> <span class="st">"black"</span>
DEFAULT_FONT <span class="op">=</span> <span class="st">"Consolas"</span>
DEFAULT_BORDER <span class="op">=</span> <span class="dv">20</span>
DEFAULT_DENSITY <span class="op">=</span> <span class="dv">300</span>
DEFAULT_SIZE <span class="op">=</span> <span class="st">"1280x800"</span>

HERE <span class="op">=</span> os.path.dirname(os.path.realpath(sys.argv[<span class="dv">0</span>]))
XELATEX_PROGRAM <span class="op">=</span> (<span class="vs">r"""</span>
<span class="vs">\documentclass[varwidth=\maxdimen,border=</span><span class="sc">{border}</span><span class="vs">pt]</span><span class="sc">{{</span><span class="vs">standalone</span><span class="sc">}}</span>
<span class="vs">\usepackage</span><span class="sc">{{</span><span class="vs">color</span><span class="sc">}}</span>
<span class="vs">\pagecolor</span><span class="sc">{{{background}}}</span>
<span class="vs">\color</span><span class="sc">{{{foreground}}}</span>
<span class="vs">\usepackage</span><span class="sc">{{</span><span class="vs">fontspec</span><span class="sc">}}</span>
<span class="vs">\setmonofont</span><span class="sc">{{{font}}}</span>

<span class="vs">\begin</span><span class="sc">{{</span><span class="vs">document</span><span class="sc">}}</span>
<span class="vs">\begin</span><span class="sc">{{</span><span class="vs">verbatim</span><span class="sc">}}</span>
<span class="sc">{table}</span>
<span class="vs">\end</span><span class="sc">{{</span><span class="vs">verbatim</span><span class="sc">}}</span>
<span class="vs">\end</span><span class="sc">{{</span><span class="vs">document</span><span class="sc">}}</span>
<span class="st">"""</span>)

<span class="kw">def</span> text_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the text version of the table."""</span>
    width <span class="op">=</span> kwargs[<span class="st">"width"</span>] <span class="cf">if</span> <span class="st">"width"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_COLUMN_WIDTH
    directory <span class="op">=</span> kwargs[<span class="st">"directory"</span>] <span class="cf">if</span> <span class="st">"directory"</span> <span class="op">in</span> kwargs <span class="cf">else</span> HERE
    command_line <span class="op">=</span> (<span class="vs">r"find </span><span class="sc">{directory}</span><span class="vs"> -maxdepth 1 -type f -perm -u=x -exec basename </span><span class="sc">{{}}</span><span class="vs"> \; "</span>
                    <span class="co">"| column -c {width} | expand"</span>.<span class="bu">format</span>(
                        directory<span class="op">=</span>shlex.quote(directory), width<span class="op">=</span>width))
    ccommand(command_line)
    <span class="cf">return</span> subprocess.check_output(command_line, shell<span class="op">=</span><span class="va">True</span>).decode(<span class="st">"utf-8"</span>)

<span class="kw">def</span> pdf_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the PDF version of the table.</span>

<span class="co">    Returns 0 on success or 1 on failure. Generated PDF is "table.pdf"</span>
<span class="co">    in the current working directory.</span>

<span class="co">    """</span>
    border <span class="op">=</span> kwargs[<span class="st">"border"</span>] <span class="cf">if</span> <span class="st">"border"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BORDER
    foreground <span class="op">=</span> kwargs[<span class="st">"foreground"</span>] <span class="cf">if</span> <span class="st">"foreground"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_FOREGROUND_COLOR
    background <span class="op">=</span> kwargs[<span class="st">"background"</span>] <span class="cf">if</span> <span class="st">"background"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BACKGROUND_COLOR
    font <span class="op">=</span> kwargs[<span class="st">"font"</span>] <span class="cf">if</span> <span class="st">"font"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_FONT
    program <span class="op">=</span> XELATEX_PROGRAM.<span class="bu">format</span>(table<span class="op">=</span>text_table(<span class="op">**</span>kwargs).strip(),
                                     font<span class="op">=</span>font, border<span class="op">=</span>border,
                                     foreground<span class="op">=</span>foreground, background<span class="op">=</span>background)
    <span class="cf">with</span> <span class="bu">open</span>(<span class="st">"table.tex"</span>, <span class="st">"w"</span>) <span class="im">as</span> texfileobj:
        texfileobj.write(program)
    <span class="cf">try</span>:
        ccommand(<span class="st">"xelatex table.tex"</span>)
        subprocess.check_call([<span class="st">"xelatex"</span>, <span class="st">"table.tex"</span>],
                              stdout<span class="op">=</span>subprocess.DEVNULL, stderr<span class="op">=</span>subprocess.DEVNULL)
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> subprocess.CalledProcessError:
        cerror(<span class="st">"xelatex failed on the following program:"</span>)
        cerrnewline()
        cerrwrite(<span class="st">"default"</span>, program)
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> png_table(<span class="op">**</span>kwargs):
    <span class="co">"""Generate the PNG version of the table.</span>

<span class="co">    Returns 0 on success or 1 on failure. Generated PNG is "table.png"</span>
<span class="co">    in the current working directory.</span>

<span class="co">    """</span>
    <span class="cf">if</span> pdf_table(<span class="op">**</span>kwargs) <span class="op">==</span> <span class="dv">1</span>:
        <span class="cf">return</span> <span class="dv">1</span>
    density <span class="op">=</span> kwargs[<span class="st">"density"</span>] <span class="cf">if</span> <span class="st">"density"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_DENSITY
    size <span class="op">=</span> kwargs[<span class="st">"size"</span>] <span class="cf">if</span> <span class="st">"size"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_SIZE
    background <span class="op">=</span> kwargs[<span class="st">"background"</span>] <span class="cf">if</span> <span class="st">"background"</span> <span class="op">in</span> kwargs <span class="cf">else</span> DEFAULT_BACKGROUND_COLOR
    command_line <span class="op">=</span> (<span class="st">"convert -density </span><span class="sc">{density}</span><span class="st"> table.pdf -resize </span><span class="sc">{size}</span><span class="st"> -size </span><span class="sc">{size}</span><span class="st"> "</span>
                    <span class="co">"xc:{background} +swap -gravity center -composite table.png"</span>.<span class="bu">format</span>(
                        density<span class="op">=</span>density, size<span class="op">=</span>size, background<span class="op">=</span>background))
    <span class="cf">try</span>:
        ccommand(command_line)
        subprocess.check_call(shlex.split(command_line))
        <span class="cf">return</span> <span class="dv">0</span>
    <span class="cf">except</span> subprocess.CalledProcessError:
        cerror(<span class="st">"the following ImageMagick command failed:"</span>)
        cerrprint(<span class="st">"default"</span>, command_line)
        <span class="cf">return</span> <span class="dv">1</span>

<span class="kw">def</span> main():
    <span class="co">"""CLI."""</span>
    description <span class="op">=</span> <span class="st">"Generate a PNG table of all executable commands in a directory."</span>
    parser <span class="op">=</span> argparse.ArgumentParser(description<span class="op">=</span>description)
    parser.add_argument(<span class="st">"--width"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>, default<span class="op">=</span>DEFAULT_COLUMN_WIDTH,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""line width, default is 120"""</span>)
    parser.add_argument(<span class="st">"--directory"</span>,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""directory containing executables, default is</span>
<span class="st">                        the directory containing this command"""</span>)
    parser.add_argument(<span class="st">"--border"</span>, <span class="bu">type</span><span class="op">=</span><span class="bu">int</span>, default<span class="op">=</span>DEFAULT_BORDER,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""default is 20pt"""</span>)
    parser.add_argument(<span class="st">"--foreground"</span>, default<span class="op">=</span>DEFAULT_FOREGROUND_COLOR,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""foreground color, default is white"""</span>)
    parser.add_argument(<span class="st">"--background"</span>, default<span class="op">=</span>DEFAULT_BACKGROUND_COLOR,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""background color, default is black"""</span>)
    parser.add_argument(<span class="st">"--font"</span>, default<span class="op">=</span>DEFAULT_FONT,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""default is Consolas"""</span>)
    parser.add_argument(<span class="st">"--density"</span>, default<span class="op">=</span>DEFAULT_DENSITY,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""used for the -density argument of convert,</span>
<span class="st">                        default is 300"""</span>)
    parser.add_argument(<span class="st">"--size"</span>, default<span class="op">=</span>DEFAULT_SIZE,
                        <span class="bu">help</span><span class="op">=</span><span class="st">"""size of image, default is 1280x800"""</span>)
    args <span class="op">=</span> parser.parse_args()
    kwargs <span class="op">=</span> {k: v <span class="cf">for</span> (k, v) <span class="op">in</span> args.__dict__.items() <span class="cf">if</span> v <span class="op">is</span> <span class="op">not</span> <span class="va">None</span>}

    fd, tmpfilepath <span class="op">=</span> tempfile.mkstemp(suffix<span class="op">=</span><span class="st">".png"</span>, prefix<span class="op">=</span><span class="st">"table-"</span>)
    os.close(fd)
    <span class="cf">with</span> tempfile.TemporaryDirectory(prefix<span class="op">=</span><span class="st">"table-"</span>) <span class="im">as</span> working_directory:
        os.chdir(working_directory)
        <span class="cf">if</span> png_table(<span class="op">**</span>kwargs) <span class="op">==</span> <span class="dv">1</span>:
            cerror(<span class="st">"execution failed"</span>)
            os.remove(tmpfilepath)
        <span class="cf">else</span>:
            os.rename(<span class="st">"table.png"</span>, tmpfilepath)
            cprogress(<span class="st">"saved to:"</span>)
            <span class="bu">print</span>(tmpfilepath)

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:
    main()</code></pre></div>
<p>By the way, the <code>zmwangx.colorout</code> module is <a href="https://github.com/zmwangx/pyzmwangx/blob/41b0bffaad9439888d68097a85c7aed594240283/zmwangx/colorout.py">here</a>, just to ease the printing of progress and errors to tty. You may safely remove all the <code>ccommand</code>, <code>cerr*</code> and <code>cprogress</code> calls.</p>
<p>Here is an example wallpaper reflecting my current <code>~/dev/scripts</code>:</p>
<div class="figure">
<img alt="Command table wallpaper for my secondary display (MBP 13'' builtin display)." src="https://i.imgur.com/mccQu1e.png"/>
<p class="caption">Command table wallpaper for my secondary display (MBP 13'' builtin display).</p>
</div>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>The <code>~/dev</code> directory stands for development, and contains all my source code and almost all local builds. The point is by having a <code>~/dev</code> directory, I no longer need to have <code>bin</code>, <code>include</code>, <code>lib</code>, and <code>share</code> in my <code>HOME</code>, thus saving a few slots. Backing up and restoring is also slightly easier.<a href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>Yeah, I know it's a shitty script, so don't nitpick on style problems.<a href="http://zmwangx.github.io/blog/2015-05-22-using-a-command-table-as-wallpaper.html#fnref2">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Bash: the special slash character in filename expansion</title><link href="http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html"/><updated>2015-05-19T18:33:51-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>It is well-known and common sense that the slash character (<code>/</code>) serves a special role in Bash filename expansion. For instance, the asterisk <code>*</code> certainly won't match <code>/</code> or <code>.</code> when used in filename expansion; otherwise, a standalone <code>*</code> would match everything in the filesystem.</p>
<p>However, it is less clear how a literal slash character<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html#fn1" id="fnref1"><sup>1</sup></a> is treated in extended glob patterns. Naively one would expect it to just match a literal slash, but the real situtation is more complicated than that. Consider the following examples:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">bash-4.3</span>$ shopt -s extglob nullglob
<span class="kw">bash-4.3</span>$ echo /usr/@(bin<span class="kw">|lib</span>)
<span class="kw">/usr/bin</span> /usr/lib
<span class="kw">bash-4.3</span>$ echo /usr@(/bin<span class="kw">|/lib</span>)

<span class="kw">bash-4.3</span>$ [[ /usr/bin == /usr@(/bin<span class="kw">|/lib</span>) ]] <span class="kw">&amp;&amp;</span> <span class="kw">echo</span> matching
<span class="kw">matching</span></code></pre></div>
<p>As seen from this example, patterns with slash simply doesn't work (in filename expansion) when placed in an extended glob pattern list, and there's no error whatsoever. I looked up the <a href="https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching">Bash Reference Manual</a> and the <a href="http://mywiki.wooledge.org/BashGuide/Patterns">Bash Guide</a> but neither mentioned this behavior. One might need to delve into the source code to say for sure what exactly is going on.</p>
<p>In comparison, Zsh and its <a href="http://zsh.sourceforge.net/Doc/Release/Expansion.html#Filename-Generation">docs</a> are much more up front about this issue:</p>
<blockquote>
<p>Note that grouping cannot extend over multiple directories: it is an error to have a &#8216;/&#8217; within a group (this only applies for patterns used in filename generation). ...</p>
</blockquote>
<p>And when we run equivalent code in Zsh:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh">zsh-5.0.5$ <span class="kw">setopt</span> NULL_GLOB
zsh-5.0.5$ <span class="kw">echo</span> /usr/<span class="kw">(</span>bin<span class="kw">|</span>lib<span class="kw">)</span>
/usr/bin /usr/lib
zsh-5.0.5$ <span class="kw">echo</span> /usr<span class="kw">(</span>/bin<span class="kw">|</span>/lib<span class="kw">)</span>
zsh: bad pattern: /usr<span class="kw">(</span>/bin<span class="kw">|</span>/lib<span class="kw">)</span>
zsh-5.0.5$<span class="kw"> [[</span> /usr/bin <span class="ot">==</span> /usr(/bin|/lib)<span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">echo</span> matching
matching</code></pre></div>
<p>The lesson? Be careful not to use a pattern like <code>@(path1|path2|path3)</code> in Bash when the paths are absolute, or relative but contain the slash. Unlike Zsh, Bash just silently fails on a pattern like this, which is rather dangerous in scripts.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Here, "a literal slash character" also applies to one that comes from tilde expansion, parameter expansion or command substitution, since they are performed before filename expansion in Bash.<a href="http://zmwangx.github.io/blog/2015-05-19-bash-the-special-slash-character-in-filename-expansion.html#fnref1">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">storyboard reached 0.1</title><link href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html"/><updated>2015-05-09T00:32:28-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>For quite some time I've been working on a Python project called <a href="https://github.com/zmwangx/storyboard"><code>storyboard</code></a>, and today I finally released the 0.1 stable (or you can think of it as 1.0).</p>
<p>As described on <a href="https://storyboard.readthedocs.org/en/0.1/index.html">the index page</a>,</p>
<blockquote>
<p><code>storyboard</code> is a FFmpeg-based customizable video storyboard generator with metadata reporting directly embedded in the generated images. Reported metadata fields include, but are not limited to, title, filename, file size, SHA-1 digest, container format, duration, pixel dimension, display aspect ratio (DAR), scan type (progressive, interlaced, or telecined), frame rate, and per-stream metadata (type, codec, profile, dimensions, bitrate, etc.).</p>
</blockquote>
<p>And the motivation was</p>
<blockquote>
<p><code>storyboard</code> was inspired by the storyboards I frequently encounter on video-sharing Internet forums, mostly generated by proprietary video players. Those storyboards often come with video/file metadata bundled, which I see as a great all-in-one solution for video sharing, saving one the labor of typing multiple console commands, copying and pasting output, and worrying about the forum&#8217;s crappy formatting. However, I, for one, dislike proprietary players. Also, those storyboards are usually ugly and uninformative, using stupid fonts and lacking crucial information that hackers look for (e.g., hash). Therefore, I developed this customizable storyboard generator for hackers.</p>
</blockquote>
<p>The project itself isn't very important, and I don't see any possibility of it gaining recognition; but its educational value to me was pretty huge. This is the first full package I ever developed, in the sense that it's complete with documentation, test suites, continuous integration and tested portability, as well as distributed to a package index (<a href="https://pypi.python.org/pypi/storyboard">PyPI</a> in this case). Here's what I observed and learned:</p>
<ol style="list-style-type: decimal">
<li><p>It's just really different from casual hacking, where I would try to achieve what I need in the shortest amount of programmer time possible, drop hard-coded values (even OAuth tokens) in scripts, leave things undocumented, etc. I'm a perfectionist so my casual code is usually not so bad, but <code>storyboard</code> is just different &#8212; to ensure quality of API and CLI, I wrote more documentation than actual code. Through this project I realized how hard real-world coding (or idealized real-world coding) is: the initial 10% is excitement, and the rest is just chores (compare that to casual hacking, where at least 30% is excitement).</p></li>
<li><p>Write once, debug everywhere. Not really, but ensuring portability is really difficult. Trying to debug something on a platform which I can't lay my hands upon is insanely frustrating. This afternoon I spent a long time trying to pin down a weird hanging bug on AppVeyor; the complete process is documented in <a href="https://github.com/zmwangx/storyboard/commit/e8a28e5a92f744157fedd03893fa8fe5a5e7d445">this squashed commit</a>. In the end the bug wasn't in my program, but in that specific version of FFmpeg (which I wouldn't believe since FFmpeg is really stable from my experience), or that specific version of FFmpeg combined with AppVeyor, or that specific version of FFmpeg combined with AppVeyor combined with Azure, or... who knows. The only thing I could say is it was not in my program, because I could reproduce the infinite loop in <code>ffprobe</code> even before I launched my program... Anyway, in this case I can lay my hands on the platform, just indirectly and painful. What about real world development where developers need to handle bug reports from users who could have broken everything? I don't want to imagine.</p></li>
<li><p>The project was a clear manifestation of Hofstadter's law:</p>
<blockquote>
<p>It always takes longer than you expect, even when you take into account Hofstadter's Law.</p>
</blockquote>
<p>Enough said; so true. In fact, towards the end of the development cycle I got pretty bogged down<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fn1" id="fnref1"><sup>1</sup></a> and stopped for a while to work on renovating this blog (60% excitement!). Meanwhile, I was too busy with other parts of life, so I rushed towards the stable 0.1 release in the past two days, dropping several ideas I wanted to implement (for completeness). Although I "rushed", it still took at least four times as long as I expected.</p></li>
</ol>
<p>Anyway, here it is, the <a href="https://github.com/zmwangx/storyboard/releases/tag/0.1">0.1</a> <a href="https://pypi.python.org/pypi/storyboard/0.1">release</a>. The badges certainly weren't bad:</p>
<div class="figure">
<img alt="storyboard's got quite a few badges of honor" src="https://i.imgur.com/miOoX5Y.png"/>
<p class="caption"><code>storyboard</code>'s got quite a few badges of honor</p>
</div>
<p>I created <a href="https://asciinema.org/a/19782">an asciinema recording</a> to commemorate the release (the original asciicast is <a href="https://dl.bintray.com/zmwangx/generic/storyboard-0.1-walkthrough-asciicast.json">here</a>):<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fn2" id="fnref2"><sup>2</sup></a></p>
<div style="width: 672px; text-align: center; margin: auto;">

<noscript>
Javascript disabled. Check out the cast <a href="https://asciinema.org/a/19782">here</a>.
</noscript>
</div>
<p>And, just to demonstrate <code>storyboard</code>, I re-screen-recorded the asciinema screencast with QuickTime, saved to <a href="https://dl.bintray.com/zmwangx/generic/storyboard-0.1-walkthrough.mov">an MOV file</a>, and ran it through my <code>metadata</code> and <code>storyboard</code>:</p>
<pre><code>&gt; metadata storyboard-0.1-walkthrough.mov
Filename:               storyboard-0.1-walkthrough.mov
File size:              60418244 (57.7MiB)
Container format:       QuickTime movie
Duration:               00:06:36.30
Pixel dimensions:       672x846
Display aspect ratio:   112:141
Scan type:              Progressive scan
Frame rate:             60 fps
Streams:
    #0: Video, H.264 (Main Profile level 3.2), 672x846 (DAR 112:141), 60 fps, 1213 kb/s

&gt; storyboard storyboard-0.1-walkthrough.mov
Processing storyboard-0.1-walkthrough.mov
Crunching metadata...
Trying to determine scan type...
Inspecting frame 40/40...
Generating main storyboard...
Extracting frame 16/16...
Generating thumbnail 16/16...
Tiling thumbnails...
Generating metadata sheet...
Computing SHA-1 digest...
57.7MiB 0:00:00 [ 571MiB/s] [=================================================================================&gt;] 100%
Generating promotional banner...
Assembling pieces...

storyboard saved to: /tmp/storyboard-se3fbiif.jpg
</code></pre>
<p>Here's the actual image:</p>
<div class="figure">
<img alt="storyboard of storyboard-0.1-walkthrough.mov (1964x2694), generated with the default settings by storyboard 0.1" src="https://i.imgur.com/c3E3M8R.jpg"/>
<p class="caption">storyboard of <code>storyboard-0.1-walkthrough.mov</code> (1964x2694), generated with the default settings by <code>storyboard 0.1</code></p>
</div>
<p>Credit to <code>lolcat</code> for making my storyboard colorful.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>I was implementing stuff that I wouldn't ever need myself &#8212; for completeness, and that was not rewarding in the slightest.<a href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>The screencast's color scheme is actually off in some places, since in my iTerm2 bold font is displayed as bold, not bright.<a href="http://zmwangx.github.io/blog/2015-05-09-storyboard-reached-01.html#fnref2">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Searchable settings are one honking great idea &#8212; let's do more of those!</title><link href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html"/><updated>2015-05-06T19:29:46-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>I had to tweak some iOS settings just now, which wasn't a delightful experience. Since I just renovated my blog inside out and am still in the hype mode, I'll write a post on the interface design of settings or preferences.</p>
<p>The Zen of Python says,</p>
<blockquote>
<p>Namespaces are one honking great idea -- let's do more of those!</p>
</blockquote>
<p>Namespaces are in general great stuff for sure, and I love them a lot.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fn1" id="fnref1"><sup>1</sup></a> But they are not so great when badly designed. One problem is that sometimes things belong to the unexpected namespace. There are already examples in Python's STL, e.g., <code>os.remove</code> and <code>shutil.rmtree</code> &#8212; for Unix guys they're just <code>rm</code> and <code>rm -r</code>, but in Python they live in two separate <del>universes</del> namespaces. The other problem is that if one takes namespaces too far and design several levels of nested namespaces, then either the names are super long and annoying to use, or one needs to leave out part of the hierarchy with <code>from .. import ..</code>, defeating the security of namespaces and making code harder to understand locally.</p>
<p>When designing an interface for settings or preferences, there are also "namespaces", or sections (and subsections), although sections are more about grouping preferences by kind than about avoiding name clashes. However, section structures more often than not suffer from the same problems as badly designed namespace structures. Take iOS Settings for example. There are both unintuitive groupings and very deep nestings.</p>
<p>Regarding unintuitive groupings, there's this top-level section named "General" (among other unintuitive things), which contains many subsections: "About", "Software Update", "Siri", "Spotlight Search", "Handoff &amp; Suggested App" "Accessibility", "Usage", "Background App Refresh"... And others I'm too tired to list. But what does "General" even mean? How are other top level sections like "Notifications", "Control Center", "Display &amp; Brightness", etc. less general than the subsections found in "General"? No clue. I think Apple just wants to put (what they perceive as) the most used sections in the top-level, but sometimes it's hard to remember what's in "General" and what's not without going through both lists one by one (and missing what you are looking for in the first three tries).</p>
<p>Regarding deep nestings, try to find "Frequent Locations". It's "Privacy-&gt;Location Services-&gt;System Services-&gt;Frequent Locations", or if you locked down Location Services with Restrictions,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fn2" id="fnref2"><sup>2</sup></a> "General-&gt;Restrictions-&gt;Location Services-&gt;System Services-&gt;Frequent Locations". Of course it's rarely used, but it still makes me gasp.<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fn3" id="fnref3"><sup>3</sup></a></p>
<p>I think in general <strong>one should be really careful with subsections (i.e., two or more levels of nesting)</strong>, especially in designing a settings interface. There's a reason why most INI files have no hierarchy, just sections. I believe the reason is that <strong>our text processing capability is inherently linear.</strong> Hypertext and jumping interfaces disrupt the linear workflow, but even when faced with a network of stuff, we still process them one at a time, linearly. Linearity is even more important in designing a settings interface since unlike reading articles, one is typically looking for a specific item. <strong>Finding one item linearly in a list of irrelevant distractions is already annoying enough, and you certainly don't want to make it quadratic or even cubic, which is simply unbearable when coupled with unexpected groupings.</strong></p>
<p>I can understand why designing a settings interface for a system as complicated as iOS (yet somehow has to keep all settings in a central place) is hard &#8212; there are too many atomic items, and often items do not fall nicely into categories. But I think it still important to try to reduce nesting. Maybe having long lists, but putting the most commonly used items on top is a good idea. Or maybe... Bypass the linear searching experience altogether?</p>
<h2 id="searchable-settings">Searchable settings</h2>
<p>I'm not sure who invented searchable setting pages, but I first noticed their great efficiency in Google Chrome many years ago, when one had to look for setting items tab after tab in all other major browsers. In fact, even to this day, the Chromium Opera (i.e., Opera 15+) is the only major browser other than Chrome that has adopted searchable settings. (I remember arguing with someone over whether this was a change for the good on <a href="http://blogs.opera.com/desktop/">blogs.opera.com/desktop</a>.) Searchable settings is also available in OS X's System Preferences, which is a joy to use. See screenshots below about how Google and Apple implement a searchable interface. Windows Control Panel is also searchable, and the search feature is capable of turning up deeply buried settings (e.g., "Control Panel-&gt;System and Security-&gt;System-&gt;Advanced system settings-&gt;Environment Variables"), so one point for them also.</p>
<p>As I said above, looking for an item in a list of irrelevant stuff is really annoying. Searchable settings completely bypass this issue by bringing users right to the desired item. This way, unintuitive groupings or deep nestings are no longer that problematic. Just like Google will tell me whether <code>rmtree</code> is in <code>os</code> or <code>shutil</code><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fn4" id="fnref4"><sup>4</sup></a>, System Preferences' search will tell me whether "Dark menu bar or Dock" is in "General" or somewhere else.</p>
<p>In fact, it is somewhat surprising to me that searchable settings are only available in a handful of applications. Seriously, these days we can search for almost anything on our computers and anything on the grand grand Internet, but we can't search the pool of available settings? If we have an INI, Plist XML, JSON, YAML, or whatever text configuration/preference file, then we can search it. Why not in GUI applications?</p>
<p>Of course, designing clear structures (with the principles and pitfalls discussed in the first half of this post) pays. But searchable settings are one honking great idea, and they are just long due in most applications. Come on, let's do more of them.</p>
<div class="figure">
<img alt="How Google designed their award-winning searchable settings." src="https://i.imgur.com/NazieEk.png"/>
<p class="caption">How Google designed their award-winning searchable settings.</p>
</div>
<div class="figure">
<img alt="Apple." src="https://i.imgur.com/aKgW29W.png"/>
<p class="caption">Apple.</p>
</div>
<div class="figure">
<img alt="Microsoft." src="https://i.imgur.com/7zJxr8P.png"/>
<p class="caption">Microsoft.</p>
</div>
<hr/>
<p><strong>May 16, 2015 update:</strong> Ars Technica <a href="http://arstechnica.com/apple/2015/05/what-wed-like-to-see-in-ios-9-at-wwdc-next-month/">published an article today</a> listing "what we'd like to see in iOS 9 at WWDC next month", and "Settings page overhaul" is listed as the third item. Apparently I'm not the only one who's concerned about the iOS Settings maze. In addition, their proposed solution is similar to mine;<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fn5" id="fnref5"><sup>5</sup></a> the key, of course, is search.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Thinking about <a href="http://nshipster.com/namespacing/"><code>NSHell</code></a> and the like kinda creeps me out, although there are quite some reasonable pro-class prefix arguments.<a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>Which you should: what's the point of Find My iPhone when the thief can disable it in Location Services?<a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>This brings another problem of the interface design of iOS Settings. When restricted, one cannot make modifications to "Privacy-&gt;Location Services", and instead has to go to "General-&gt;Restrictions-&gt;Location Services". What's the point? "Restrictions" is about <em>setting restrictions</em>, not about <em>editing restricted items or sections in a central place exclusively"</em>. Ideally one should be able to tap on a lock icon in "Privacy-&gt;Location Services" and enter the restrictions passcode to unlock it, like what we find in OS X's System Preferences.<a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fnref3">&#8617;</a></p></li>
<li id="fn4"><p>This is of course just a metaphor; I'm not dumb enough to be unable to remember <code>shutil.rmtree</code>.<a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fnref4">&#8617;</a></p></li>
<li id="fn5"><p>Which is not at all surprising, since Apple's very own OS X has already set an example.<a href="http://zmwangx.github.io/blog/2015-05-06-searchable-settings-are-one-honking-great-idea-lets-do-more-of-those.html#fnref5">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Graceful handling of SIGINT when using Python's multiprocessing.Process</title><link href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html"/><updated>2015-05-05T22:03:39-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Today I learned something about Python's (at least CPython's) multiprocessing and signal handling, and I would like to share it here. Basically my situation was such (when developing <a href="https://github.com/zmwangx/zmwangx.github.io/blob/source/pyblog"><code>pydoc</code></a> that powers this blog):</p>
<ul>
<li>I would like to serve the blog with an HTTP server while auto-regenerating for changes;</li>
<li>The auto-regeneration is handled in the main process with a while loop, whereas the HTTP server (requiring little human intervention) is put in a <code>multiprocessing.Process</code> and launched with <code>http.server.HTTPServer.serve_forever()</code>;</li>
<li>Upon sending <code>SIGINT</code>, both processes need to clean up and quit; in particular, the server needs to exit its <code>serve_forever()</code> loop (which can be done via <code>shutdown()</code>, but how to invoke the method is a problem, since <code>serve_forever()</code> blocks);</li>
<li>Handling of <code>SIGINT</code> must be graceful in the main process &#8212; there might be an ongoing build that must not be interrupted until finishing.</li>
</ul>
<p>Given this context, I learned the following two critical concepts (at least true in the current version of CPython) through trial and error:</p>
<ol style="list-style-type: decimal">
<li><strong>A user-triggered <code>SIGINT</code> is sent to both processes</strong> &#8212; the main process and the <code>multiprocessing.Process</code> instance;</li>
<li><strong>Except for the defined interfaces, a <code>multiprocessing.Process</code> instance is almost completely separated from the main process, sharing as little resources as possible</strong>; by "defined interfaces" I mean the defined attributes and methods of a <code>Process</code> instance, as well as defined communication channels like <code>multiprocessing.Pipe</code> or <code>multiprocessing.Queue</code>. And to expand on resource sharing: yes, the two processes have their own copies of global variables, so using global variables as state registers is a no-go.</li>
</ol>
<p>Both concepts can be used to one's benefit or detriment. Below is how I solved my problem, using the two concepts. Observe that without a custom handler, Python translates a <code>SIGINT</code> to a <code>KeyboardInterrupt</code> exception; therefore, I use the default <code>KeyboardInterrupt</code> to interrupt the HTTP server in its own process (through handling the exception and calling <code>shutdown()</code>), but instead install a custom <code>SIGINT</code> handler in the main process that translates <code>SIGINT</code> to setting a <code>sigint_raised</code> flag that can be picked up by the while loop once the current build (if any) is finished. The proof of concept script is as follows (the production code is <a href="https://github.com/zmwangx/zmwangx.github.io/blob/a7a0b2073f30b1d0214c3152998d95e40a39b438/pyblog#L567-L635">here</a>):</p>
<div class="sourceCode"><pre class="sourceCode python"><code class="sourceCode python"><span class="co">#!/usr/bin/env python3</span>

<span class="im">import</span> http.server
<span class="im">import</span> multiprocessing
<span class="im">import</span> signal
<span class="im">import</span> sys
<span class="im">import</span> time

<span class="kw">class</span> HTTPServerProcess(multiprocessing.Process):
    <span class="kw">def</span> run(<span class="va">self</span>):
        httpd <span class="op">=</span> http.server.HTTPServer(
            (<span class="st">""</span>, <span class="dv">8000</span>), http.server.SimpleHTTPRequestHandler)
        <span class="cf">try</span>:
            httpd.serve_forever()
        <span class="cf">except</span> <span class="pp">KeyboardInterrupt</span>:
            httpd.shutdown()

<span class="kw">def</span> do_things():
    <span class="cf">for</span> i <span class="op">in</span> <span class="bu">range</span>(<span class="dv">10</span>):
        sys.stderr.write(<span class="st">"."</span>)
        sys.stderr.flush()
        time.sleep(<span class="dv">1</span>)
    sys.stderr.write(<span class="st">"</span><span class="ch">\n</span><span class="st">"</span>)

<span class="kw">def</span> main():
    server_process <span class="op">=</span> HTTPServerProcess()
    server_process.start()

    <span class="co"># define and install custom SIGINT handler</span>
    sigint_raised <span class="op">=</span> <span class="va">False</span>

    <span class="kw">def</span> sigint_mitigator(signum, frame):
        <span class="kw">nonlocal</span> sigint_raised
        sigint_raised <span class="op">=</span> <span class="va">True</span>

    signal.signal(signal.SIGINT, sigint_mitigator)

    <span class="cf">while</span> <span class="op">not</span> sigint_raised:
        do_things()

    server_process.join()

<span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">"__main__"</span>:
    main()</code></pre></div>
<p>Beware that with this solution, if there are external programs or OS level operations happening in the main process, then the operation at the time of <code>SIGINT</code> will still be interrupted<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fn1" id="fnref1"><sup>1</sup></a> (for example, in the script above, the <code>time.sleep(1)</code> at the exact point of <code>SIGINT</code> is still interrupted, but otherwise <code>do_things</code> is carried on to its completion). I'm not sure how to explain this &#8212; maybe the handler isn't capturing the signal fast enough?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fn2" id="fnref2"><sup>2</sup></a> Anyway, one single early interruption is at least more acceptable than a completely corrupted build<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fn3" id="fnref3"><sup>3</sup></a>, and certainly more graceful.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p><a href="https://hg.python.org/cpython/file/1320ec1b24af/Modules/_multiprocessing">CPython's <code>multiprocessing</code> is written in C</a>, so the behavior might depend on the OS. I'm talking about OS X here. I haven't inspected and won't inspect the C source code.<a href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>That's awfully naive and layman-sounding, I know, but I <em>am</em> almost a layman when it comes to system-level programming.<a href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>That's assuming your build isn't interdependent in which any single failure corrupts everything. In that case, what can we do? I honestly see no way of injecting signal handling in <code>subprocess.Popen</code>.<a href="http://zmwangx.github.io/blog/2015-05-05-graceful-handling-of-sigint-when-using-pythons-multiprocessingprocess.html#fnref3">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">New blog, new start</title><link href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html"/><updated>2015-05-05T02:42:44-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Octopress has been serving me for the past six months, during which even Octopress itself underwent major changes &#8212; in fact, <a href="https://github.com/octopress/octopress/releases/tag/v3.0.0">Octopress 3.0.0</a> was only released 3 days ago, which I never got to try. Anyway, Octopress's heavily colored interface grew old on me fairly quickly. I'm especially unhappy with the inline <code>&lt;code&gt;</code> tag, which is always wrapped in a white box and stands out too much (worse still, there's no visual difference when such a <code>&lt;code&gt;</code> tag is placed inside an <code>&lt;a&gt;</code> tag). Since I use inline code/verbatim a lot, many of my articles were littered with arbitrary boxes everywhere.</p>
<div class="figure">
<img alt="Farewell, Octopress." src="https://i.imgur.com/hxfSnOk.png"/>
<p class="caption">Farewell, Octopress.</p>
</div>
<p>Apparently I need something simpler. Because</p>
<blockquote>
<p>Simplicity is the ultimate sophistication.</p>
</blockquote>
<p>But how? Simiplicity 101: get rid of the "platform". There's no reason why I need a blogging platform like Jekyll (let alone the WordPress monster). When I initially switched to Octopress, I thought code highlighting was something fancy that I need heavy machinery to achieve, but it turned out that Pandoc is battery-included when it comes to syntax highting,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fn1" id="fnref1"><sup>1</sup></a> so all I need is to specify a highlight style, e.g., Pygments:</p>
<pre><code>pandoc input.md --highlight-style=pygments --template template.html --output output.html</code></pre>
<p>That's it. Write the Markdown, compile with Pandoc, instantly awesome. So the HTML posts are there (assuming the HTML template is written, which is not hard to kick off).</p>
<p>The rest of the job is to design the stylesheets and compile the posts into a coherent blog &#8212; basically, generate an index. I was able to realize both in several hours. For the former task, I borrowed a lot from <a href="http://mort.ninja/">mort.ninja</a> by <a href="https://github.com/soimort">Mort Yao</a>. Interestingly, we were born in the same city (Nanjing, China), and I benefit from at least two of his open source projects: <a href="https://github.com/soimort/you-get">you-get</a> and <a href="https://github.com/soimort/translate-shell">translate-shell</a>. The latter task is more interesting but also not hard. I'm rolling my own toolchain in Python, which you can find in <a href="https://github.com/zmwangx/zmwangx.github.io/blob/source/pyblog"><code>pyblog</code></a>. In fact, the complete source of this blog (down to how image assets are generated) are in the <a href="https://github.com/zmwangx/zmwangx.github.io/tree/source"><code>source</code> branch</a> of my GitHub Pages repo, so you may take a look if you're interested. <code>pyblog</code> is highly specialized<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fn2" id="fnref2"><sup>2</sup></a> and is still a work in progress at the time of writing, but it's already well capable of generating the blog &#8212; currently missing are auto gen-deploy and preview (with auto-update), which will also come soon.</p>
<p>By the way, the most annoying thing in the development process was working with XML and generating <a href="http://zmwangx.github.io/atom.xml">the Atom feed</a>. Standard library <code>xml.etree.ElementTree</code> doesn't support the <code>![CDATA[</code> tag, and in the end I had to hack <a href="https://github.com/zmwangx/zmwangx.github.io/blob/source/pyblog#L34-L54">library internals</a>, which is likely to break in future versions. Remember the quotes?</p>
<blockquote>
<p>XML is a classic political compromise: it balances the needs of man and machine by being equally unreadable to both.</p>
</blockquote>
<blockquote>
<p>XML combines the efficiency of text files with the readability of binary files.</p>
</blockquote>
<p>Sigh.</p>
<p>Anyway, here is my new shiny blog.</p>
<div class="figure">
<img alt="Welcome to the completely revamped dl? cmplnts?" src="https://i.imgur.com/VS5f9eJ.png"/>
<p class="caption">Welcome to the completely revamped dl? cmplnts?</p>
</div>
<p>It looks ten times better than Octopress, and ever builds much faster than Octopress<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fn3" id="fnref3"><sup>3</sup></a>. As a bonus, the codebase is so small that it's super trivial to hack (no, not <em>that</em> hack).</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>Well, Pandoc is heavy-machinery, but it's both generic and self-contained, unlike a specialized blogging platform.<a href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>Which is fine since I don't expect anyone else to use it, anyway.<a href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>I have the impression that a complete build of all posts (about fifty of them) with <code>pyblog</code> is faster than regenerating for a single modified post in Octopress. That's in the context of absolutely no categories; when you have a dozen or more categories, Octopress slows down to a halt.<a href="http://zmwangx.github.io/blog/2015-05-05-new-blog-new-start.html#fnref3">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Why Oh My Zsh is completely broken</title><link href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html"/><updated>2015-05-03T17:15:49-07:00</updated><id>http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Today I moved from <a href="https://github.com/robbyrussell/oh-my-zsh">Oh My Zsh</a> to <a href="https://github.com/sorin-ionescu/prezto">Prezto</a>, after using Oh My Zsh for about three years since 2012. I'll try to shed some light on the reasons in this post.</p>
<p>Zsh is a rather complicated shell (compared to Bash), with a hell lot of builtins and a complex completion system. The complexity makes it powerful, but also makes it intimidating to mortals; moreover, it doesn't look as sweet as it could be out of box. Most mortals, me included, want an interactive shell that's sweet and "just works", so we need wizards to guide us in configuring this beast. Oh My Zsh and Prezto are just two of such configuration frameworks. Oh My Zsh is somewhat older: the first commit of Oh My Zsh dates back to <a href="https://github.com/robbyrussell/oh-my-zsh/commit/e20401e04e057a39c228dbb99dda68ec7fa4235a">August 2009</a>, while Prezto was forked from Oh My Zsh in <a href="https://github.com/sorin-ionescu/prezto/commit/8d487d4f6c2d38cb108d7c8c0c2de9f0385da402">February 2011</a>, and has since been completely rewritten. <code>robbyrussell/oh-my-zsh</code> as of today has 23,610 stars on GitHub, while <code>sorin-ionescu/prezto</code> has 4,069. This doesn't imply Oh My Zsh is any better &#8212; I guess the fancy name of Oh My Zsh earned it a lot more undeserved stars; you'll see why soon.</p>
<p>I was hardly involved in Oh My Zsh development, and I haven't even carefully inspected Oh My Zsh's source code until yesterday, so my soon-to-come complaints about Oh My Zsh might not be completely true. But here it is: <strong>Oh My Zsh brings the worst of community-driven development, where the "community" knows not of what it is doing, and just wants to get things done in the sloppiest way possible.</strong> Let's look at some examples. All discussions are based on <a href="https://github.com/robbyrussell/oh-my-zsh/commit/140034605edd0f72c548685d39e49687a44c1b23"><code>1400346</code></a>, the latest commit at the time of writing.</p>
<h2 id="the-core-lib-hodgepodge">The core lib hodgepodge</h2>
<p>First, look at Oh My Zsh's core <a href="https://github.com/robbyrussell/oh-my-zsh/tree/140034605edd0f72c548685d39e49687a44c1b23/lib">lib</a>:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">&gt;</span> <span class="kw">ls</span> lib
bzr.zsh         directories.zsh  grep.zsh          misc.zsh                   spectrum.zsh
completion.zsh  functions.zsh    history.zsh       nvm.zsh                    termsupport.zsh
correction.zsh  git.zsh          key-bindings.zsh  prompt_info_functions.zsh  theme-and-appearance.zsh</code></pre></div>
<p>Wait, why do I see <code>bzr.zsh</code>, <code>git.zsh</code>, and even <code>nvm.zsh</code> in the core lib? Why are all of these mandatory (all files in <code>lib</code> are sourced from <code>oh-my-zsh.sh</code>)? Why should I load <code>bzr.sh</code> and <code>nvm.zsh</code> when I don't use Bazaar or NVM at all?<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fn1" id="fnref1"><sup>1</sup></a> Moreover, since we already have <code>bzr.sh</code>, <code>git.zsh</code> and <code>nvm.zsh</code> in the core library, why don't we also have <code>hg.zsh</code>, <code>rvm.zsh</code>, <code>svn.zsh</code> and <code>virtualenv.zsh</code>, just to name a few?</p>
<p>I suppose these marginal scripts are in the core because they define functions (<code>bzr_prompt_info</code>, <code>git_prompt_info</code>, <code>nvm_prompt_info</code>, etc.) that are called from many themes; well, at least this is the case for <code>git.zsh</code>. But that doesn't answer any of the questions above. <strong>The underlying question is: why aren't they simply plugins?</strong><a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fn2" id="fnref2"><sup>2</sup></a> Loading a plugin in Oh My Zsh isn't sophiscated at all (compared to Prezto; see discussion below), just annoying to type in full, which <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/oh-my-zsh.sh#L68-L72">boils down to</a>:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">if [</span> <span class="ot">-f</span> <span class="ot">$ZSH_CUSTOM</span>/plugins/<span class="ot">$plugin</span>/<span class="ot">$plugin</span>.plugin.zsh<span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">source</span> <span class="ot">$ZSH_CUSTOM</span>/plugins/<span class="ot">$plugin</span>/<span class="ot">$plugin</span>.plugin.zsh
<span class="kw">elif [</span> <span class="ot">-f</span> <span class="ot">$ZSH</span>/plugins/<span class="ot">$plugin</span>/<span class="ot">$plugin</span>.plugin.zsh<span class="kw"> ]</span>; <span class="kw">then</span>
    <span class="kw">source</span> <span class="ot">$ZSH</span>/plugins/<span class="ot">$plugin</span>/<span class="ot">$plugin</span>.plugin.zsh
<span class="kw">fi</span></code></pre></div>
<p>where <code>$plugin</code> is the name of the plugin. They can easily wrap this in a function and let theme authors painlessly load plugins,<a class="footnoteRef" href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fn3" id="fnref3"><sup>3</sup></a> but they just don't. Also, the consistency issue (think of my question about <code>hg</code>, <code>rvm</code>, <code>svn</code> and <code>virtualenv</code>) is beyond my grasp. The only way I could make sense of this situation is that all the mess was created by clueless community contributions that didn't think about the code base as a whole (the code base is small!), and maintainers didn't care either.</p>
<p>Meanwhile, Prezto does it right. Prezto is highly modular, with the <code>pmodload</code> function defined in <a href="https://github.com/sorin-ionescu/prezto/blob/08676a273eba1781ddcb63c4f89cfff9bd62eac4/init.zsh"><code>init.zsh</code></a> to load modules (doing things like sourcing module init scripts and marking module functions for autoloading). That's about the entirety of Prezto's core; everything else are in optional <a href="https://github.com/sorin-ionescu/prezto/blob/08676a273eba1781ddcb63c4f89cfff9bd62eac4/modules">modules</a>, including essential configs like <code>editor</code> (ZLE configs), <code>completion</code>, and <code>prompt</code>. Note that module loading order matters in some cases, but still, working with Prezto's modular structure is a joy. Apart from <code>init.zsh</code> and the <code>modules</code> directory, the Prezto repo does contain one other <a href="https://github.com/sorin-ionescu/prezto/tree/08676a273eba1781ddcb63c4f89cfff9bd62eac4/runcoms"><code>runcoms</code></a> directory with rc files, but those are just recommendations that one may safely ignore. In fact, there are a total of eight lines related to Prezto in my <code>.zshrc</code>, and nowhere else (note that I only switched to Prezto today, so this freshly baked <code>.zshrc</code> is subject to change):</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="co"># prezto</span>
<span class="kw">zstyle</span> <span class="st">':prezto:*:*'</span> color <span class="st">'yes'</span>
<span class="kw">zstyle</span> <span class="st">':prezto:environment:termcap'</span> color <span class="st">'no'</span> <span class="co"># disable coloring of less, which looks horrible</span>
<span class="kw">zstyle</span> <span class="st">':prezto:load'</span> pmodule environment editor <span class="kw">history</span> directory utility colors spectrum git completion prompt ruby
<span class="kw">zstyle</span> <span class="st">':prezto:module:editor'</span> key-bindings <span class="st">'emacs'</span>
<span class="kw">zstyle</span> <span class="st">':prezto:module:prompt'</span> theme <span class="st">'zmwangx'</span>
<span class="kw">[[</span> <span class="st">"</span><span class="ot">$OSTYPE</span><span class="st">"</span> <span class="ot">==</span> darwin*<span class="kw"> ]]</span> <span class="kw">&amp;&amp;</span> <span class="kw">export</span> <span class="ot">BROWSER=</span><span class="st">'open'</span>
<span class="kw">source</span> ~/.zprezto/init.zsh</code></pre></div>
<p>Here <code>zmwangx</code> is my <a href="https://github.com/zmwangx/prezto/blob/master/modules/prompt/functions/prompt_zmwangx_setup">personal theme</a> that looks like <a href="https://i.imgur.com/nCBK8ZB.png">this</a>.</p>
<h2 id="incredibly-poor-code-quality">Incredibly poor code quality</h2>
<p>Oh My Zsh's code quality is incredibly poor. Even within the core library. Pick any file from <code>lib/</code>, and you'll be amazed by the hot mess in front of your eyes. There's no coding standard whatsoever:</p>
<ul>
<li>You can find four-space indents and two-space indents mixed <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/functions.zsh">in the same file</a>;</li>
<li>You can find function definitions with the <code>function</code> keyword and without <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/git.zsh">in the same file</a>;</li>
<li>You can find <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/functions.zsh#L2">167-character-long lines</a> mixed with early-broken lines (yes, sometimes <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/git.zsh#L69">in the same file</a>);</li>
<li>You can find completely commented out blocks of code <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/key-bindings.zsh#L70-L87">in the core lib</a>, where the average user is not supposed to touch;</li>
</ul>
<p>I guess the list could go on; I didn't spend more time inspecting this crap.</p>
<p>We were discussing styles, but obviously style isn't the only problem with this code base. Next onto a case study of how Oh My Zsh does something in the most inefficient way possible. Let's have a look at <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/git.zsh"><code>git.zsh</code></a>. It suffers from almost all problems we have talked about so far, but let's focus specifically on <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/git.zsh#L78-L122">the <code>git_prompt_status</code> function</a>:</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="fu">git_prompt_status()</span> <span class="kw">{</span>
  <span class="ot">INDEX=$(</span><span class="kw">command</span> git status --porcelain -b <span class="kw">2&gt;</span> /dev/null<span class="ot">)</span>
  <span class="ot">STATUS=</span><span class="st">""</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">command</span> <span class="kw">grep</span> -E <span class="st">'^\?\? '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^A  '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_ADDED$STATUS</span><span class="st">"</span>
  <span class="kw">elif</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^M  '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_ADDED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^ M '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS</span><span class="st">"</span>
  <span class="kw">elif</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^AM '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS</span><span class="st">"</span>
  <span class="kw">elif</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^ T '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^R  '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^ D '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_DELETED$STATUS</span><span class="st">"</span>
  <span class="kw">elif</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^D  '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_DELETED$STATUS</span><span class="st">"</span>
  <span class="kw">elif</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^AD '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_DELETED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">command</span> git rev-parse --verify refs/stash <span class="kw">&gt;</span>/dev/null <span class="kw">2&gt;&amp;1</span><span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_STASHED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^UU '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^## .*ahead'</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_AHEAD$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^## .*behind'</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_BEHIND$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">if</span> <span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^## .*diverged'</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span>; <span class="kw">then</span>
    <span class="ot">STATUS=</span><span class="st">"</span><span class="ot">$ZSH_THEME_GIT_PROMPT_DIVERGED$STATUS</span><span class="st">"</span>
  <span class="kw">fi</span>
  <span class="kw">echo</span> <span class="ot">$STATUS</span>
<span class="kw">}</span></code></pre></div>
<p><strong>This one single function intended to be invoked from a precmd hook (basically executed every time the prompt is printed), calls <code>grep</code> a staggering 14 times inside command substitutions, forking the process 28 times &#8212; while all the greps can be replaced with pattern/regex matching right within the shell.</strong> (Keep in mind that forking is the most expensive operation of the shell.) For instance,</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="ot">$(</span><span class="kw">echo</span> <span class="st">"</span><span class="ot">$INDEX</span><span class="st">"</span> <span class="kw">|</span> <span class="kw">grep</span> <span class="st">'^A  '</span> <span class="kw">&amp;&gt;</span> /dev/null<span class="ot">)</span></code></pre></div>
<p>may well be replaced with</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">[[</span> <span class="ot">$INDEX</span> <span class="ot">==</span> *<span class="st">$'</span><span class="dt">\n</span><span class="st">A  '</span>*<span class="kw"> ]]</span></code></pre></div>
<p>or</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">[[</span> <span class="ot">$INDEX</span> =~ <span class="st">$'</span><span class="dt">\n</span><span class="st">A  '</span><span class="kw"> ]]</span></code></pre></div>
<p>(Note that the <code>git status --porcelain -b</code> call always prints the branch info such as <code>## master...origin/master</code> in the first line, so "<code>A </code>", if present at the beginning of any line, must be preceded by a newline; that's why the above works.) All other grep calls can be similarly replaced with pattern/regex matching. No forking.</p>
<p>By the way, whoever wrote this function seems to be unaware of the <code>-q,--quite,--silent</code> switch of <code>grep</code> (which should be available in all implementations), and every call is littered with <code>&amp;&gt; /dev/null</code>. In fact, using the <code>-q</code> switch is even (slightly) faster: a reasonable implementation of <code>-q</code> exits immediately when a match is found, while what is written here waits until all input is processed.</p>
<p>I haven't exhausted the problems with this function just yet. As a bonus: despite being awfully inefficient, <strong>this function <em>can't even be used</em> in many cases for which it is designed.</strong> You might have noticed that the order of different status bits is completely fixed by whoever wrote this function (by the way, all those <code>$ZSH_THEME_GIT_PROMPT_*</code> variables are documented nowhere, so one who wants to write a theme has to dig into the source &#8212; only to find the function useless expect for polluting the namespace). If one wants to use a different order, or put some of the bits in <code>RPROMPT</code>, one has to roll his own (or good luck parsing the output of <code>git_prompt_status</code>). In fact, even a <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/lib/git.zsh#L2-L8">dumbed down function <code>git_prompt_info</code></a>, which only prints the branch name and whether it's dirty, is similarly uncustomizable; <a href="https://github.com/robbyrussell/oh-my-zsh/blob/140034605edd0f72c548685d39e49687a44c1b23/themes/gallois.zsh-theme">the <code>gallois</code> theme</a>, my first theme and on which I later based my own theme, needs to define a <code>git_custom_status</code> function to achieve what it needs &#8212; otherwise something as simple as adding a pair of brackets around the branch name is super painful.</p>
<p>One might wonder how Prezto solves the same problem. The answer is in <a href="https://github.com/sorin-ionescu/prezto/blob/08676a273eba1781ddcb63c4f89cfff9bd62eac4/modules/git/functions/git-info"><code>modules/git/functions/git-info</code></a>. The <code>git-info</code> function does more, and again in a highly modular way (without grep calls, for God's sake): status bits or their combinations are <a href="https://github.com/sorin-ionescu/prezto/blob/08676a273eba1781ddcb63c4f89cfff9bd62eac4/modules/git/functions/git-info#L393-L416">formatted on demand with <code>zformat</code> and stored in an associative array <code>git_info</code></a>, where users specify format strings via <code>zstyle</code> with <a href="https://github.com/sorin-ionescu/prezto/tree/08676a273eba1781ddcb63c4f89cfff9bd62eac4/modules/git#theming">thoroughly documented escape sequences</a>. Very beautiful solution.</p>
<h2 id="the-completely-broken-community-contribution-process">The completely broken community contribution process</h2>
<p>I'm not sure if the project maintainers are Zsh wizards (I'm afraid not). I'll just assume that most of the code with incredibly poor quality came from community contribution. Okay, community. But even the community contribution process is completely broken.</p>
<p>At the time of writing there are 159 open issues and 446 open pull requests in <code>robbyrussell/oh-my-zsh</code> (the stats are 13/35 in <code>sorin-ionescu/prezto</code> &#8212; not proportional to the number of stars or forks). There's even <a href="https://github.com/robbyrussell/oh-my-zsh/pull/3809">a PR called "Easy-to-Merge"</a> that is said to collect PRs that are either extremely simple fixes or have been discussed&#8211;tested&#8211;and&#8211;signed-off (wait, then why aren't they already merged?). This makes it almost impossible to open new, substantial PRs (such as a complete rewrite of the <code>git_prompt_status</code> criticized above) &#8212; God knows whether other people have already proposed the same fix, or a different fix for the same problem, whether it's been discussed&#8211;tested&#8211;and&#8211;signed-off, and how much discussion will be needed for a new PR.</p>
<p>You might infer from the above that the actually merged PRs are discussed&#8211;tested&#8211;and&#8211;signed-off. Well, of course not (think about the code quality), and here's one more case study.</p>
<p>The only time I <a href="https://github.com/robbyrussell/oh-my-zsh/pull/3591">submitted a PR</a> is when <a href="https://github.com/robbyrussell/oh-my-zsh/pull/3564">a previous PR</a> broke aliases of the <code>ls</code> family, which most of us run tens to hundreds of times every day. The <code>-h</code> option was stripped from all aliases but one (which was ridiculous since the option seemed to be lost during copy/paste), and anyone who used the affected aliases regularly and lived with the PR for ten minutes should notice. Apparently nobody looked at the diffs before merging, or nobody cared (before I and one other guy jumped in). My PR was merged three days later; the delay was okay.</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/pull/3341">In another instance</a>, the delay was totally unbearable. <a href="https://savannah.gnu.org/forum/forum.php?forum_id=8152">grep 2.21</a> was released on November 23, 2014, and it deprecated <code>GREP_OPTIONS</code>. Oh My Zsh was using <code>GREP_OPTIONS</code> back then, so anyone who upgraded to grep 2.21 and used grep regularly was getting a lot of deprecation warnings (oh, before you ask, <code>grep.zsh</code> is in the core lib). Core lib stuff spitting deprecation warnings on all platforms all the time is a pretty big thing, right? There were multiple ways to fix this problem, all of them trivial to the reasonably trained eyes; and they won't break user scripts, unless someone was doing something insane in the first place (like relying on exported <code>GREP_OPTIONS</code> for certain behaviors in a script). However, there were quite a bit of discussion spanning multiple issues and PRs (most notably <a href="https://github.com/robbyrussell/oh-my-zsh/pull/3341">this one</a>), and despite all the discussions, not a single maintainer or collaborator joined or showed any interest. <a href="https://github.com/robbyrussell/oh-my-zsh/pull/3403">A fix was merged not until December 14, 2014</a>. Of course there were temporary fixes (remember, the issue was trivial to begin with), but the problem must have been confusing to the less-proficient Zsh users during the twenty day window.</p>
<h2 id="easter-egg">Easter egg</h2>
<p>One more thing, among countless other problems: the recommended way to install Oh My Zsh is either</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh">curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh <span class="kw">|</span> <span class="kw">sh</span></code></pre></div>
<p>or</p>
<div class="sourceCode"><pre class="sourceCode zsh"><code class="sourceCode zsh"><span class="kw">wget</span> https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O <span class="kw">-</span> <span class="kw">|</span> <span class="kw">sh</span></code></pre></div>
<p>Cool, huh? How many of you have the <code>--no-check-certificate</code> option of <code>wget</code> automatically turned on? Thankfully there's no <code>sudo</code> in front.</p>
<h2 id="summary">Summary</h2>
<p>Oh My Zsh was a great idea when it took off. Over the years however, through low-quality community contributions from people who barely understand Zsh (and shell scripting idioms and best practices in general), it evolved into a beast that no one except the maintainers could fix or seriously contribute to; yet the maintainers seem to be pretty satisfied with it.</p>
<p>Therefore, I'm moving to Prezto, the project with far better modularity and code quality. In fact, this rant all began from yesterday, when I was about to embark on a stripped down Zsh configuration system for myself. I was thinking about borrowing code from both Oh My Zsh and Prezto; but after reading some code from both projects, I soon realized that Oh My Zsh is totally crap and Prezto can be taken almost unmodified. I hope that more people will take a look at Prezto, realize how awesome it is (especially in comparison to the famed Oh My Zsh), fork it, and possibly submit patches.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn1"><p>This is not entirely true. I use <a href="https://github.com/felipec/git-remote-bzr">git-remote-bzr</a> when I have to clone a Bazaar repo for some reason.<a href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fnref1">&#8617;</a></p></li>
<li id="fn2"><p>Note that outside the core, there are additional plugins for <code>git</code> and <code>nvm</code>. Oh well.<a href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fnref2">&#8617;</a></p></li>
<li id="fn3"><p>Whether aliases defined in a plugin (e.g. for <code>git</code>) should be loaded can be easily controlled via a switch.<a href="http://zmwangx.github.io/blog/2015-05-03-why-oh-my-zsh-is-completely-broken.html#fnref3">&#8617;</a></p></li>
</ol>
</div>

]]></content></entry><entry><title type="html">Using Python 3 with Emacs Jedi</title><link href="http://zmwangx.github.io/blog/2015-04-26-using-python-3-with-emacs-jedi.html"/><updated>2015-04-26T21:19:14-07:00</updated><id>http://zmwangx.github.io/blog/2015-04-26-using-python-3-with-emacs-jedi.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Recently I'm working on <a href="https://github.com/zmwangx/storyboard">a hobby project in Python</a>, which means editing Python source files a lot. I've been using <a href="https://github.com/tkf/emacs-jedi">Emacs Jedi</a> for almost as long as I've been writing Python, and it has been pretty helpful at completing away long names.</p>
<p>However, Jedi uses <code>python</code> by default, which means <code>python2</code> on most of our systems at this point. Occasionally I'm writing Python 3 specific code but Jedi completes to Python 2 or refuses to complete; for the record, I enjoy writing and debugging Python 3.3+ much better than 2.7 (I realized this after trying to create a code base that is backward compatible with 2.7, which means reinventing the wheel or introducing annoying branches from time to time). So naturally I'm looking into using Python 3 in Jedi.</p>
<p>The <a href="https://tkf.github.io/emacs-jedi/latest/#how-to-use-python-3-or-any-other-specific-version-of-python">official docs</a> has been confusing and unhelpful at least for me, since it insists on setting up the virtualenv from within Emacs, and it failed for me. Why can't I set up the virtualenv myself? Turns out I can, and it's incredibly simple. The commands below assume that you have installed Jedi and friends (well, dependencies) using <code>package.el</code>.</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="kw">mkdir</span> -p ~/.emacs.d/.python-environments
<span class="kw">virtualenv</span> -p /usr/local/bin/python3 ~/.emacs.d/.python-environments/jedi  <span class="co"># or whatever your python3 path is</span>
<span class="co"># If you feel like installing the server with 'M-x jedi:install-server', also do the following</span>
<span class="kw">~/.emacs.d/.python-environments/jedi/bin/pip</span> install --upgrade ~/.emacs.d/elpa/jedi-20150109.2230/  <span class="co"># you might need to change the version number</span></code></pre></div>
<p>And that's it. Put the following in your <code>~/.emacs</code>:</p>
<div class="sourceCode"><pre class="sourceCode commonlisp"><code class="sourceCode commonlisp">(add-hook 'python-mode-hook 'jedi:setup)
(<span class="kw">setq</span> jedi:complete-on-dot <span class="kw">t</span>)
(<span class="kw">setq</span> jedi:environment-root <span class="st">"jedi"</span>)</code></pre></div>
<p>where the first two lines should be there whether you want to use Python 3 or not &#8212; so only the third line is new, and its meaning is obvious.</p>
<p>At last, start Emacs and do <code>M-x jedi:install-server</code> if you haven't run the <code>pip</code> command above yet. Restart Emacs (if necessary). That's it. Enjoy your Jedi with Python 3. (Type <code>import conf</code>, for instance, to be convinced that you're really autocompleting Python 3).</p>

]]></content></entry><entry><title type="html">Back up OS X app icons</title><link href="http://zmwangx.github.io/blog/2015-03-22-back-up-os-x-app-icons.html"/><updated>2015-03-22T16:58:50-07:00</updated><id>http://zmwangx.github.io/blog/2015-03-22-back-up-os-x-app-icons.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>OS X application icons are valuable assets, and it's interesting to see how they evolve over time. This is especially the case when we upgraded to OS X 10.10 Yosemite, when Apple and many design-aware third party developers overhauled (mainly flattened) their icons.</p>
<p>However, we lose all the old icons when we do a major OS upgrade. Technically they still live in Time Machine backups, but those are a pain to pull out. Therefore, I wrote a script just now to back up app icons of all applications living in <code>/Applications</code> (including those symlinked to <code>/Applications</code>, e.g., apps installed through <code>brew cask</code>) and its level-one subdirectories, and <code>/System/Library/CoreServices</code> (for <code>Finder.app</code> and such). Here's the script:</p>
<div class="sourceCode"><pre class="sourceCode bash"><code class="sourceCode bash"><span class="co">#!/usr/bin/env bash</span>
<span class="kw">function</span><span class="fu"> app_version</span>
<span class="kw">{</span>
    <span class="co"># $1 is the path to the app</span>
    <span class="kw">/usr/libexec/PlistBuddy</span> -c <span class="st">"print CFBundleShortVersionString"</span> <span class="st">"</span><span class="ot">$1</span><span class="st">"</span>/Contents/Info.plist <span class="kw">2&gt;</span>/dev/null <span class="kw">||</span> <span class="kw">date</span> +%Y%m%d
<span class="kw">}</span>

<span class="kw">function</span><span class="fu"> app_icon_path</span>
<span class="kw">{</span>
    <span class="co"># $1 is the path to the app</span>
    <span class="ot">filename=$(</span><span class="kw">/usr/libexec/PlistBuddy</span> -c <span class="st">"print CFBundleIconFile"</span> <span class="st">"</span><span class="ot">$1</span><span class="st">"</span>/Contents/Info.plist <span class="kw">2&gt;</span>/dev/null<span class="ot">)</span>
   <span class="kw"> [[</span> <span class="ot">-n</span> <span class="ot">${filename}</span><span class="kw"> ]]</span> <span class="kw">||</span> <span class="kw">return</span>
    <span class="ot">filename=$(</span><span class="kw">basename</span> <span class="st">"</span><span class="ot">${filename}</span><span class="st">"</span> .icns<span class="ot">)</span>
    <span class="kw">echo</span> <span class="st">"</span><span class="ot">$1</span><span class="st">/Contents/Resources/</span><span class="ot">${filename}</span><span class="st">.icns"</span>
<span class="kw">}</span>

<span class="kw">function</span><span class="fu"> process_app</span>
<span class="kw">{</span>
    <span class="co"># $1 is the path to the app</span>
    <span class="ot">name=$(</span><span class="kw">basename</span> <span class="st">"</span><span class="ot">$1</span><span class="st">"</span> .app <span class="kw">|</span> <span class="kw">tr</span> -d <span class="st">' '</span><span class="ot">)</span>
    <span class="ot">path=$(</span><span class="kw">realpath</span> -e <span class="st">"</span><span class="ot">$1</span><span class="st">"</span><span class="ot">)</span> <span class="kw">||</span> <span class="kw">{</span> <span class="kw">echo</span> <span class="st">"</span><span class="ot">${RED}</span><span class="st">error: broken link '</span><span class="ot">${path}</span><span class="st">'</span><span class="ot">${RESET}</span><span class="st">"</span> <span class="kw">&gt;&amp;2;</span> <span class="kw">return</span> 1<span class="kw">;</span> <span class="kw">}</span>
    <span class="ot">version=$(</span><span class="kw">app_version</span> <span class="st">"</span><span class="ot">${path}</span><span class="st">"</span><span class="ot">)</span>
    <span class="ot">icon_path=$(</span><span class="kw">app_icon_path</span> <span class="st">"</span><span class="ot">${path}</span><span class="st">"</span><span class="ot">)</span>
   <span class="kw"> [[</span> <span class="ot">-n</span> <span class="ot">${icon_path}</span><span class="kw"> ]]</span> <span class="kw">||</span> <span class="kw">{</span> <span class="kw">echo</span> <span class="st">"</span><span class="ot">${YELLOW}</span><span class="st">warning: '</span><span class="ot">$1</span><span class="st">' has no app icon</span><span class="ot">${RESET}</span><span class="st">"</span><span class="kw">;</span> <span class="kw">return</span> 1<span class="kw">;</span> <span class="kw">}</span>
   <span class="kw"> [[</span> <span class="ot">-f</span> <span class="ot">${icon_path}</span><span class="kw"> ]]</span> <span class="kw">||</span> <span class="kw">{</span> <span class="kw">echo</span> <span class="st">"</span><span class="ot">${RED}</span><span class="st">error: '</span><span class="ot">${icon_path}</span><span class="st">' does not exist</span><span class="ot">${RESET}</span><span class="st">"</span> <span class="kw">&gt;&amp;2;</span> <span class="kw">return</span> 1<span class="kw">;</span> <span class="kw">}</span>
    <span class="kw">cp</span> <span class="st">"</span><span class="ot">${icon_path}</span><span class="st">"</span> <span class="st">"</span><span class="ot">${name}</span><span class="st">-</span><span class="ot">${version}</span><span class="st">.icns"</span>
    <span class="kw">echo</span> <span class="st">"</span><span class="ot">${name}</span><span class="st">-</span><span class="ot">${version}</span><span class="st">.icns"</span>
<span class="kw">}</span>

<span class="kw">find</span> /Applications -maxdepth 2 -name <span class="st">'*.app'</span> <span class="kw">|</span> <span class="kw">while</span> <span class="kw">read</span> <span class="ot">app</span>; <span class="kw">do</span> <span class="kw">process_app</span> <span class="st">"</span><span class="ot">${app}</span><span class="st">"</span><span class="kw">;</span> <span class="kw">done</span>
<span class="kw">find</span> /System/Library/CoreServices -maxdepth 1 -name <span class="st">'*.app'</span> <span class="kw">|</span> <span class="kw">while</span> <span class="kw">read</span> <span class="ot">app</span>; <span class="kw">do</span> <span class="kw">process_app</span> <span class="st">"</span><span class="ot">${app}</span><span class="st">"</span><span class="kw">;</span> <span class="kw">done</span></code></pre></div>
<p>The script is also available as a <a href="https://gist.github.com/zmwangx/fad97e085045a21ebc1d">gist</a>.</p>

]]></content></entry><entry><title type="html">The new OneDrive API</title><link href="http://zmwangx.github.io/blog/2015-02-24-the-new-onedrive-api.html"/><updated>2015-02-24T18:31:19-08:00</updated><id>http://zmwangx.github.io/blog/2015-02-24-the-new-onedrive-api.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Microsoft released the new OneDrive API today. See the blog post announcement <a href="https://blog.onedrive.com/the-new-onedrive-api/">here</a>. One highlight is that <a href="http://onedrive.github.io/items/upload_large_files.htm">large file upload</a> is now officially supported. Previously, large file upload was handled with a semi-official API using the BITS protocol; the only documentation was a <a href="https://gist.github.com/rgregg/37ba8929768a62131e85">gist</a>. Now it is handled through standard HTTP <code>POST</code>. With this major release, there's likely a lot of work to be done with <a href="https://github.com/mk-fg/python-onedrive">python-onedrive</a>. I have opened an issue: <a href="https://github.com/mk-fg/python-onedrive/issues/52">mk-fg/python-onedrive#52 &#8212; New OneDrive API support</a>.</p>
<p>Interestingly, the new OneDrive API doc is hosted on GitHub Pages &#8212; <a href="http://onedrive.github.io">onedrive.github.io</a>, rather than MSDN. Exactly a week ago I wrote a piece, "<a href="http://zmwangx.github.io/blog/2015-02-17-microsoft-is-getting-cool-but-not-its-website.html">Microsoft is getting cool (but not its website)</a>". Looks like they are doing something about their website (or better put, their online identity), too.</p>

]]></content></entry><entry><title type="html">All is not lost</title><link href="http://zmwangx.github.io/blog/2015-02-21-all-is-not-lost.html"/><updated>2015-02-21T17:12:32-08:00</updated><id>http://zmwangx.github.io/blog/2015-02-21-all-is-not-lost.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Lubos Motl always attacks the Many-Worlds Interpretation as if it is on the same level as anti-scientific claims. He even went on to attack Hugh Everett (the guy who first formulated this interpretation) personally; <em>ad hominem</em> is of course typical Motl shit, and I don't bother to find those posts. Anyway, here's yet another one: <a href="http://motls.blogspot.com/2015/02/many-worlds-rozali-carroll-exchange.html">Many worlds: a Rozali-Carroll exchange</a>.</p>
<p>Disclaimer: I'm not really a proponent of Many-Worlds, at least not of the part of it that says history really <em>branches</em> into <em>many</em> worlds. Well, Lubos is at least right about one thing: "many worlds", taken literally, can't even be well-defined. However, I do believe that the world is can be described by a "universal wavefunction" (I prefer to call it the "universal state vector") in some gargantuan Hilbert space. And the universal state vector has to evolve deterministically. The reason is simple: <strong><em>all information is not lost</em></strong>. This principle is fundamental to physics and it's simply not on the same level as falsifiability, which is little more than a philosopher's toy and a nice thing to have. In quantum mechanics' terms, <em>unitarity must be respected</em>; this is why the Copenhagen Interpretation, or at least the wavefunction-collapsing part of it, cannot hold up to serious scrutiny &#8212; no operator can ever collapse the wavefunction and break unitarity. Those who hold the Copenhagen Interpretation are confusing <em>their</em> lack of knowledge (albeit a fundamental one, as they were entangled into the system when they make an observation) with the fundamental loss of information (which is not possible).</p>
<p>One may question that if the universal state vector is <em>real</em>, then where's all the unavailable information stored (why is there a <em>fundamental</em> lack of knowledge)? Well, who told you that all information in this universe can be observed or written down? Everything outside our event horizon is also unavailable to us, yet modern physics knows for sure that some of those <em>do</em> exist. Of course we have a hierarchy of belief in the existence of different things, with the universal state vector being hard to believe (and very hard to not believe) or make sense of. But there's no hard cut, and we might some day be able to reason about it.</p>
<p>I don't know how exactly the observed universe is the way it is (i.e., how exactly it fell &#8212; or "collapsed", which is a convenient word for communication &#8212; into the eigenstate that we observed). I'm not even sure if the observed universe is the way it is in the objective (ontological) sense &#8212; if there were no observers, would it just be an "uncollapsed" state vector? I suspect that this problem has something to do with consciousness, and I suspect that we are at least hundreds of years from understanding consciousness. (Of course this kind of predictions are all nonsense &#8212; no one can look thirty years into the future). At the very least, we may eliminate some possibilities when we know more about consciousness. At any rate, this is an interesting problem that might be outside the capability of human reason, or might not. One may hate it and refuse to talk about it, but one cannot dismiss it as unphysical.</p>
<p>When Lubos dismisses <em>ontology</em> as "exactly the same thing" as classical physics, he's dismissing the problem above, and making a hard compromise. He's basically saying that we cannot and should not reason about anything outside of what we can observe (this is also a crude classification because obviously he reasons beyond black hole horizons every day). This compromise is very dangerous for physics &#8212; sometimes one has to reason beyond one's horizon to formulate a complete and consistent answer. Black holes are one good example of getting of the limit. If we can extend spacetime beyond our event horizon, then why can't we accept <strong><em>the possibility of existence</em></strong> outside our "existence horizon", i.e., outside our perceived existence of the universal (and the first hand experience of our own existence inside it)? It's a wild and not well-defined idea, but all new physics starts out not well-defined.</p>
<p>I still remember the last lecture of my first quantum mechanics course in my freshman year, taught by Prof. Michael Peskin. He discussed the interpretations of quantum mechanics. I forgot the exact arguments, but after rejecting other interpretations (including Copenhagen and hidden variable), he resorted to Many-Worlds, citing "Once you eliminate the impossible, whatever remains, no matter how improbable, must be the truth." I was not particularly satisfied. To me, once you eliminate the impossible, if whatever remains is still improbable, then maybe your imagination is not wild enough. I also remember the second time I took QM I, this time the graduate version, taught by Prof. Lenny Susskind. He stressed unitarity so much and showed us how wavefunction-collapsing is unnecessary (it was never well-defined anyway, unless you impose it). Unitarity is so important that triggered his "black hole war".</p>
<p>The point of mentioning my two professors is that the interpretation problem of quantum mechanics has never been settled, and people who hold opinions contrary to Copenhagen should be respected. Lubos, on the other hand, tries to convince people that this problem has been settled, and actually settled for ninety years. He is either lying or delusional himself.</p>

]]></content></entry><entry><title type="html">My dock and updated OmniFocus</title><link href="http://zmwangx.github.io/blog/2015-02-20-my-dock-and-updated-omnifocus.html"/><updated>2015-02-20T16:16:10-08:00</updated><id>http://zmwangx.github.io/blog/2015-02-20-my-dock-and-updated-omnifocus.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<blockquote>
<p>Simplicity is the ultimate sophistication.</p>
</blockquote>
<p>Here's a screenshot of my dock at the moment.</p>
<div class="figure">
<img alt="My dock" src="https://i.imgur.com/EhaJw57.png" title="My current dock. Left to right: Finder (TotalFinder), Mail, Safari, Chrome, iTunes, OmniFocus, iTerm2, Activity Monitor, and mpv. Everything except mpv is persistent."/>
<p class="caption">My dock</p>
</div>
<p>Left to right: Finder (TotalFinder), Mail, Safari, Chrome, iTunes, OmniFocus, iTerm2, Activity Monitor, and mpv. Everything except mpv is persistent; mpv is there because I happen to be looping a piece of music with mpv that I don't plan to add to the iTunes library. The point is that it never looked this good, mainly due to the updated OmniFocus icon. Finally they put some serious thought into graphics design! Just compare <a href="https://dl.bintray.com/zmwangx/generic/omnifocus-v2.1.icns">the v2.1 icon</a> to <a href="https://dl.bintray.com/zmwangx/generic/omnifocus-v2.0.icns">the v2.0 version</a>.</p>
<div class="figure">
<img alt="OmniFocus Mac app icon, v2.0 vs v2.1" src="https://i.imgur.com/KeTz5wK.png"/>
<p class="caption">OmniFocus Mac app icon, v2.0 vs v2.1</p>
</div>
<p>Obviously the overpolished (and honestly, badly polished) 2.0 one belongs to the past. It "stood out" even among Mavericks dock icons (in terms of color), not to mention among the flattened-down Yosemite ones. Today, it finally becomes a native member of the dock. (Well, actually not today &#8212; I've been using the beta for a while, so the new icon didn't come as a surprise.) In fact, this time the Omni Group seems to be on a graphics design streak these days, and today they have a really impressive App Store feature banner:</p>
<div class="figure">
<img alt="OmniFocus's MAS feature banner" src="https://i.imgur.com/tILmveQ.png"/>
<p class="caption">OmniFocus's MAS feature banner</p>
</div>

]]></content></entry><entry><title type="html">Microsoft is getting cool (but not its website)</title><link href="http://zmwangx.github.io/blog/2015-02-17-microsoft-is-getting-cool-but-not-its-website.html"/><updated>2015-02-17T18:57:19-08:00</updated><id>http://zmwangx.github.io/blog/2015-02-17-microsoft-is-getting-cool-but-not-its-website.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Microsoft is getting kind of cool. For instance, open sourcing .NET last year caused quite a buzz. Ars has a good piece about this: <a href="http://arstechnica.com/information-technology/2015/02/microsofts-continuing-efforts-to-be-cool/">Microsoft&#8217;s continuing efforts to be cool</a>.</p>
<p>Three weeks ago Microsoft made another minor but totally unexpected move: they integrated AgileBits' <code>onepassword-app-extension</code> (<a href="https://github.com/AgileBits/onepassword-app-extension">GitHub</a>) into the 5.0 release of the OneDrive iOS app. I didn't realize this until I read <a href="https://blog.onedrive.com/onedrive_secure_password/">yesterday's blog post on the OneDrive Blog</a>. This is really amazing when you put it in context: I mean, take a look at <a href="https://blog.agilebits.com/1password-apps/">Apps that love 1Password</a>, i.e., apps that have integrated that extension. Out of the ninety apps listed to date, there are only a dozen apps that I've heard of, and the only brands bigger than 1Password are Microsoft, Tumblr, Uber (infamous), and Walmart (what?). Microsoft embracing third party is surely an interesting phenomenon.</p>
<p>Meanwhile,</p>
<ul>
<li>Microsoft still won't let us use our password managers to its fullest (of course we can't blame it on the OneDrive folks): 16 characters max in this day and age (screenshot taken today)? Hmm. And I remember Microsoft recently said password length isn't the main source of vulnerability of its customers. WTF. Who cares about <em>your</em> stupid customers. I just want to protect <em>my own</em> data, and make sure that in case of a breach on <em>your</em> side, I won't face the same loss as your technologically illiterate customers. But that's not currently possible with Microsoft.</li>
</ul>
<div class="figure">
<img alt="It's 2015, yet &quot;your password can't be longer than 16 characters&quot;." src="https://i.imgur.com/CNv76zw.png"/>
<p class="caption">It's 2015, yet "your password can't be longer than 16 characters".</p>
</div>
<ul>
<li>Microsoft's UI design is still shit, <a href="http://zmwangx.github.io/blog/2015-01-21-web-design-microsoft-vs-apple.html">as well as their website</a>; I mean, seriously:</li>
</ul>
<div class="figure">
<img alt="What the heck are those blue blocks?" src="https://i.imgur.com/wu66zZc.png"/>
<p class="caption">What the heck are those blue blocks?</p>
</div>

]]></content></entry><entry><title type="html">Monitor progress of your Unix pipes with pv</title><link href="http://zmwangx.github.io/blog/2015-02-10-monitor-progress-of-your-unix-pipes-with-pv.html"/><updated>2015-02-10T02:18:30-08:00</updated><id>http://zmwangx.github.io/blog/2015-02-10-monitor-progress-of-your-unix-pipes-with-pv.html</id><author><name>Zhiming Wang</name><uri>http://zmwangx.github.io/</uri><email>zmwangx@gmail.com</email></author><content type="html"><![CDATA[

<p>Recently I found a very useful utility called <code>pv</code> (for "pipe viewer"). <a href="http://www.ivarch.com/programs/pv.shtml">Here</a> is its home page, and it can be easily installed with <code>brew</code>. According to its man page,</p>
<blockquote>
<p><code>pv</code> shows the progress of data through a pipeline by giving information such as time elapsed, percentage completed (with progress bar), current throughput rate, total data transferred, and ETA.</p>
</blockquote>
<p>For more info, see its home page (linked above) and <a href="http://linux.die.net/man/1/pv">man page</a>.</p>
<p>Why is it useful? Well, pretty obvious if you are in the right audience. For me, one particularly important use case is with <code>openssl sha1</code>. I deal with videos on a daily basis, and back up all of them to OneDrive (ever since OneDrive went unlimited). To ensure integrity of transfer (in future downloads), I append the first seven digits of each video to its filename. This should be more than enough to reveal any error in transfer except for active attacks. One additional advantage is that I can now have multiple versions of a same show, event, or whatever and don't have to worry about naming conflicts (and don't have to artificially say <code>-ver1</code>, <code>-ver2</code>, etc.). This little merit turns out to be huge and saves me a lot of trouble, since naming things is intrinsically hard:</p>
<blockquote>
<p>There are only three hard things concurrency, in computer science: cache invalidation, naming things, and off-by-one errors.</p>
</blockquote>
<p>(I learned this beefed up version of two hard things only recently.) Well, too much digression. So SHA-1 sum is useful. (By the way, I learned in my crypto class that SHA-1 is broken as a collision-resistant hash function &#8212; not HMAC, which doesn't assume collision-resistance &#8212; and SHA-256 should be used instead. However, I'm not protecting against active attacks &#8212; I won't be able to without a shared secret key anyway &#8212; so the faster SHA-1 is good for my purpose.) But at the same time, SHA-1 is slow. Maybe what's actually slow is my HDD. Whatever the bottleneck, generating a SHA-1 digest for a 10 GB video file isn't fun at all; it's even more of a torture when there's no progress bar and ETA. But hopelessly waiting has become a thing of the past with the advent (well, discovery in my case) of <code>pv</code>. Now I have nice and informative progress bars, which reduces the anxiety of waiting by an order of magnitude.</p>
<p>For the record, here's the current version of my ruby script that attaches the first seven digits of the SHA-1 digests of the given files to their filenames:</p>
<div class="sourceCode"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span class="kw">#!/usr/bin/env ruby</span>

require <span class="st">'fileutils'</span>

<span class="kw">def</span> rename(items)
  num_items = items.length
  num_done = <span class="dv">0</span>
  items.each {|path|
    printf(<span class="dt">$stderr</span>, <span class="st">"%d/%d: %s\n"</span>, num_done + <span class="dv">1</span>, num_items, <span class="dt">File</span>.basename(path))

    <span class="kw">if</span> ! <span class="dt">File</span>.directory?(path)
      extname = <span class="dt">File</span>.extname(path)
      basename = <span class="dt">File</span>.basename(path, extname)
      dirname = <span class="dt">File</span>.dirname(path)
      sha1sum = <span class="st">`pv '</span><span class="ot">#{</span>path<span class="ot">}</span><span class="st">' | openssl sha1`</span>
      new_basename = basename + <span class="st">"__"</span> + sha1sum[<span class="dv">0</span>,<span class="dv">7</span>]
      new_path = <span class="dt">File</span>.join(dirname, new_basename + extname)
      <span class="dt">FileUtils</span>.mv(path, new_path)
    <span class="kw">else</span>
      <span class="dt">STDERR</span>.puts(<span class="st">"</span><span class="ot">#{</span>path<span class="ot">}</span><span class="st">: directory ignored"</span>)
    <span class="kw">end</span>

    num_done += <span class="dv">1</span>
  }
<span class="kw">end</span>

rename(<span class="dt">ARGV</span>)</code></pre></div>
<p>You might ask why I used ruby (littered with bash) when it's obviously a job for bash or perl. Well, the reason is that I first wrote this thing in ruby as a <a href="https://gist.github.com/zmwangx/d6406fb8bf51ac768770">Dropzone 3 action</a>. I'm lazy, so I just borrowed that script and modified its printout for shell use.</p>
<hr/>
<p>By the way, I also found a project called <code>cv</code> (Coreutils Viewer), which is <a href="https://github.com/Xfennec/cv">officially described as</a></p>
<blockquote>
<p>... a Tiny, Dirty, Linux-Only C command that looks for coreutils basic commands (cp, mv, dd, tar, gzip/gunzip, cat, etc.) currently running on your system and displays the percentage of copied data.</p>
</blockquote>
<p>I'll look into it when I have time, but it from its description, it seems to be limited to coreutils, and OS X support might not be too awesome (at this point).</p>

]]></content></entry></feed>
