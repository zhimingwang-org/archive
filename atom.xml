<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daily (?) Complaints (?)]]></title>
  <link href="http://zmwangx.github.io/atom.xml" rel="self"/>
  <link href="http://zmwangx.github.io/"/>
  <updated>2014-12-22T17:52:03-08:00</updated>
  <id>http://zmwangx.github.io/</id>
  <author>
    <name><![CDATA[Zhiming Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10k Images on Imgur]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/22/10k-images-on-imgur/"/>
    <updated>2014-12-22T12:42:16-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/22/10k-images-on-imgur</id>
    <content type="html"><![CDATA[<p>I happened to check my imgur account just now (haven&rsquo;t been to the web interface for ages), and you know what, I have uploaded 10,744 images since I created the account in February this year! (I&rsquo;ve been using imgur for longer than that; previously I uploaded images anonymously.) Most of the 10k images were uploaded via scripts using the API. This again demonstrates the importance of a good API — without the imgur API I wouldn&rsquo;t have been able to upload hundreds of images with a few keystrokes all in a snap, and getting links would be a huge pain in the ass. There are myriad image hosting services out there, but imgur rules &lsquo;em all, thanks to its decent API (and also its good CDN and direct image links, of course).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Suggestion: Dropzone 3]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/19/app-suggestion-dropzone-3/"/>
    <updated>2014-12-19T14:08:57-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/19/app-suggestion-dropzone-3</id>
    <content type="html"><![CDATA[<p>I recently tried and purchased <a href="https://aptonic.com/dropzone3/">Dropzone 3</a>. See a list of features on the linked official website. In short, Dropzone 3 provides an intermediate zone for drag-n-drop. You can use it as a stash (called &ldquo;Drop Bar&rdquo; — stacking is available), use it as a shortcut by putting frequently used folders and applications there, or trigger actions by dropping. There are a dozen builtin actions and <a href="https://aptonic.com/dropzone3/actions/">an additional list of readily available actions</a>, covering common web drives, SNS and file sharing sites. <strong>Better yet, you can develop your custom actions with the easy-to-use <a href="https://github.com/aptonic/dropzone3-actions/blob/master/README.md#dzalerttitle-message">Ruby API</a>.</strong> For instance, I wrote a simple Google Translate action, <code>Google Translate.dzbundle</code> (<a href="https://gist.github.com/zmwangx/b27f106a8ba47468a43d">link</a>), based on <a href="https://github.com/soimort/translate-shell">translate-shell</a>. (You know, it&rsquo;s Ruby, so calling external commands and concatenating strings feel at home, as if you are coding in Perl or directly in shell; unlike Python, where you at least need to <code>import subprocess</code> then <code>subprocess.check_output</code> to get the output of an external command, and have to use a bunch of stupid <code>+</code>&rsquo;s to get your goddamn message to print.)</p>

<p>Although I use the terminal for most tasks, drag-n-drop is still useful and convenient at times, not to mention the custom actions. (And the stock drag-n-drop is kinda hit-and-miss, especially for people like me who are mostly working with windows maximized — except terminal windows.) After using Dropzone 3 for a while, I found it well worth $4.99.</p>

<p>Wait, I didn&rsquo;t mention the pricing? Dropzone 3 is only <a href="https://itunes.apple.com/us/app/dropzone-3/id695406827?ls=1&amp;mt=12">$4.99 on MAS</a>, so get it while supplies last. (Somehow the license is $10 on the developer&rsquo;s online store, so definitely buy from MAS and change to the <a href="https://aptonic.com/dropzone3/sandboxing.php">unsandboxed version</a> later — de-sandboxing is free.) There&rsquo;s also a 15-day free trial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Google Chrome Comic — a Classic]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/14/the-google-chrome-comic-a-classic/"/>
    <updated>2014-12-14T17:42:55-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/14/the-google-chrome-comic-a-classic</id>
    <content type="html"><![CDATA[<p>I was cleaning up my Opera bookmarks just now — I&rsquo;m semi-officially leaving Opera for Safari. Of course, Safari still can&rsquo;t handle everything (e.g., Adblock Plus is still not so good on Safari, YouTubeCenter lags behind and I don&rsquo;t bother to compile myself — yes, I have a certificate, and some power user features simply don&rsquo;t exist), so I&rsquo;m still going to Opera/Opera beta/Chrome/Firefox for certain tasks. But Safari is very nice. For the first time.</p>

<p>I started out as a Chrome user (well, don&rsquo;t want to recall the IE days), branched out to the Chromium Opera, and now ended up in Safari. Not sure about the future. When I look back, something nostalgic pops up in mind — <a href="http://www.google.com/googlebooks/chrome/">the Google Chrome Comic</a>. I enjoyed it more than once, but I never seemed to have archived it. So here it is, combined into <a href="http://zmwangx.github.io/pdf/2008-chrome-comic.pdf">one PDF</a>. In fact, you can create the PDF yourself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seq 0 39 | parallel wget -q http://www.google.com/googlebooks/chrome/images/big/{}.jpg
</span><span class='line'>convert $(ls -v *.jpg) 2008-chrome-comic.pdf</span></code></pre></td></tr></table></div></figure>


<p>Here I was a bit lazy and used a GNU <code>ls</code> feature: <code>-v</code> for natural sorting of numbers (doesn&rsquo;t work for BSD <code>ls</code>).</p>

<p>And here&rsquo;s page 1 of the comic as a teaser:</p>

<p><img src="http://i.imgur.com/W5pJTjl.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up Emacs With Emacsclient]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/14/speeding-up-emacs-with-emacsclient/"/>
    <updated>2014-12-14T10:06:02-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/14/speeding-up-emacs-with-emacsclient</id>
    <content type="html"><![CDATA[<p>Emacs is notorious for its loading time. For me, this is especially annoying when I&rsquo;m editing LaTeX files — AUCTeX takes about five seconds to load, and once I exit Emacs (especially after a quick edit), all that work is wasted, and next time I want to do some quick editing with that same LaTeX file — sorry, another five seconds.</p>

<p>This problem can be solved by &ldquo;using that same Emacs&rdquo;, i.e., running Emacs in server mode, then connecting to the server via <code>emacsclient</code>. Below is my script, which I call <code>emc</code>, to make <code>emacsclient</code> more user-friendly. <code>emc</code> opens a file (given as <code>$1</code>) on the server, launching one on its way if none is detected. Note that I used <code>-cqta=</code> for <code>emacsclient</code>. The <code>-c</code> option is <code>--create-frame</code>, i.e., create a new frame (in the current tty, for instance) instead of using the existing frame (in another tty, for instance); this allows for multiple frames accross different ttys. The <code>-q</code> option is for <code>--quiet</code>, suppressing messages like &ldquo;Waiting for Emacs&hellip;&rdquo; The <code>-t</code> option is for <code>--tty</code>, or equivalently, the familiar <code>-nw</code> option of <code>emacs</code>. The <code>-a=</code> options is <code>--alternate-editor=</code>; according to the manpage, <code>-a, --alternate-editor=EDITOR</code> has the following effect:</p>

<blockquote><p>if the Emacs server is not running, run the specified editor instead. This can also be specified via the `ALTERNATE_EDITOR&#8217; environment variable. If the value of EDITOR is the empty string,  run `emacs &ndash;daemon&#8217; to start Emacs in daemon mode, and try to connect to it.</p></blockquote>

<p>Note that <code>emacsclient</code> requires a filename, so my script prompts for one if <code>$1</code> is empty.</p>

<figure class='code'><figcaption><span>emc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nv">file</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">[[</span> -z <span class="k">${</span><span class="nv">file</span><span class="k">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">read</span> -p <span class="s1">&#39;filename: &#39;</span> file
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>emacsclient -cqta<span class="o">=</span> <span class="s2">&quot;${file}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that using <code>emacsclient</code> has the additional benefit that the same buffer is simultaneously updated accross different ttys (See screenshot, where I opened the current post in two different ttys). This way, you won&rsquo;t face the nasty &ldquo;file changed on disk&rdquo; problem when you accidentally edited the same file in another tty session.</p>

<p><img src="http://i.imgur.com/9KxEWKq.png" alt="screen shot of multiple copies of the same buffer" /></p>

<p>By the way, remember to re-configure your other programs that uses an external editor. For instance, change <code>$EDITOR</code> to <code>emacsclient -cqta=</code> in your <code>env</code>, and <code>core.editor</code> to <code>emacsclient -cqta=</code> in your <code>~/.gitconfig</code>.</p>

<p><em>Note</em>: if you use <code>emacsclient</code> to edit git commit messages in Git Commit Mode, remember to use <code>C-c C-c</code> (<code>git-commit-commit</code>) to save the commit message rather than using <code>server-edit</code> or <code>C-x C-c</code> to exit Emacs. Otherwise, the <code>COMMIT_EDITMSG</code> buffer will persist in the Emacs server, and you&rsquo;ll be prompted to revert buffer the next time you edit another commit message, which is pretty annoying.</p>

<p>I just started using <code>emacsclient</code>, so the above script might be buggy in certain edge cases. I&rsquo;ll report when I run into issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Mac-like Evernote]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/13/the-mac-like-evernote/"/>
    <updated>2014-12-13T21:47:31-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/13/the-mac-like-evernote</id>
    <content type="html"><![CDATA[<p>Once in a while (maybe a year, maybe several months — not set in stone), I give big name free services not in use a chance to convince me. Evernote is one such service. The interface used to look very cheap and cluttered. I hated it. However, this time I&rsquo;m sold. Now everything Evernote, from its Mac app to its iOS app to its web design to its physical products, looks distinctively Mac-like. (I use Mac-like to refer to Apple&rsquo;s design philosophy, including iOS. Well, I guess the Android and Windows apps aren&rsquo;t Mac-like.) I mean, just look at the screenshots:</p>

<p><img src="http://i.imgur.com/AZelofm.png" alt="Web UI, beta" />
<img src="http://i.imgur.com/tZuWBlY.png" alt="Evernote Market, Pfeiffer Collection" />
<img src="http://i.imgur.com/R4QF8OM.png" alt="Mac app" /></p>

<p>Bright, simplistic, elegant, clutter-free. Mac-like. The Mac app takes advantage of the translucent material of Yosemite, and it looks gorgeous. The iOS app also feels great on a full HD Retina screen; I didn&rsquo;t bother to take a screenshot. Now it&rsquo;s much likely that I&rsquo;ll put it into good use — cluttered and cheap-looking interfaces give me nightmares and actually hinders my productivity, and now they are gone.</p>

<p>No one can argue that Apple products make great screenshots. They are also much more intuitive, functional, and productive than most Windows folks are willing to believe. I hope our world is more Mac-like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniFocus: Change Sync Behavior, Mac and iOS]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/10/omnifocus-change-sync-behavior-mac-and-ios/"/>
    <updated>2014-12-10T22:45:34-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/10/omnifocus-change-sync-behavior-mac-and-ios</id>
    <content type="html"><![CDATA[<p>On OS X, the following URIs are relevant:</p>

<ul>
<li><a href="omnifocus:///change-preference?MaximumTimeBetweenSync=30">omnifocus:///change-preference?MaximumTimeBetweenSync=30</a></li>
<li><a href="omnifocus:///change-preference?TimeFromFirstEditToSync=2">omnifocus:///change-preference?TimeFromFirstEditToSync=2</a></li>
</ul>


<p>What they do are self-evident.</p>

<p>On iOS, use the following URIs instead:</p>

<ul>
<li><a href="x-omnifocus-debug:set-default:MaximumTimeBetweenSync:60">x-omnifocus-debug:set-default:MaximumTimeBetweenSync:60</a></li>
<li><a href="x-omnifocus-debug:set-default:TimeFromFirstEditToSync:2">x-omnifocus-debug:set-default:TimeFromFirstEditToSync:2</a></li>
</ul>


<p>Source: <a href="http://www.macstories.net/links/change-default-sync-times-of-omnifocus-for-mac-and-ios/">Change Default Sync Times of OmniFocus For Mac and iOS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distraction Free Writing]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/05/distraction-free-writing/"/>
    <updated>2014-12-05T21:09:10-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/05/distraction-free-writing</id>
    <content type="html"><![CDATA[<p>This is not the first time that a distraction free writing app is featured on the Mac App Store. This time the candidate is <a href="https://itunes.apple.com/us/app/desk/id915839505?mt=12">Desk</a>. The official website is <a href="http://desk.pm">here</a>, but licensing is MAS-exclusive. The icon looks like this:</p>

<p><img src="http://i.imgur.com/OprXSEU.png" alt="" /></p>

<p>Skeuomorphism, oh man. And this is the only screenshot I can find on the official website:</p>

<p><img src="http://i.imgur.com/WBaYzho.png" alt="" /></p>

<p>I can find a few other screenshots on MAS, but you know how shitty MAS screenshots are, plus the screenshots of this app only focus on specific UI elements. The official website also features an intro video (which provides no information at all) and a brief feature list with no further details, all on one page. The MAS description is somewhat more comprehensive, but again, &ldquo;WordPress integration&rdquo; and the like are not so informative. So, after a certain amount of research, I have to say I know little about this app. To do the app justice, there&rsquo;s an <a href="http://blog.desk.pm">accompanying blog</a>, with all kinds of noise though — like what a good blog should be, no complaint about that. So I guess anyone who wants to know more about this app should go digging there. Not me, so I didn&rsquo;t read.</p>

<p>Strangely enough, reception is great, although the price tag is currently set at $30 — definitely a premium price. John Gruber <a href="http://daringfireball.net/linked/2014/11/22/desk">has a piece</a>, but I think &ldquo;My thanks to Johb Saddington for sponsoring this weeks&#8217; DF RSS feed to promote Desk, his blogging app for the Mac&rdquo; kind of defeats credability. MAS featuring is also a good sign (although not always). Out of the 55 MAS ratings at the time of writing (9:42 PM, Friday, December 5, 2014), 45 are five stars.</p>

<p>That brings home my curiosity about &ldquo;distraction free writing apps&rdquo; in general. <em>Why would anyone pay $30 for a &ldquo;distraction free writing app&rdquo; (which basically justifies any lack of feature — &ldquo;we deliberately give you no choice for anything so you can focus on writing!&rdquo;), <strong>without even a trial</strong>?</em> MAS is such a bad model for utility and productivity software since you can&rsquo;t just look at five screenshots (seriously?) and decide &ldquo;this is for me!&rdquo; Yet I have the impression that more developers prefer this model nowadays, especially in this focused-writing business, another example being IA Writer. Sure it makes licensing and combating piracy simple, but again, I need to feel it to decide if it&rsquo;s the right tool for me, especially for a feature-deprived focused-writing app. (This is a general thought — in this case I don&rsquo;t need to feel it to tell that it&rsquo;s not for me.)</p>

<p>More specifically, let&rsquo;s think about distraction free writing. What does IA Writer, or Desk, or other apps offer that&rsquo;s not already available to you with your OS? They support Markdown syntax highlighting, or even WYSYWYG (but only the very simple kind of WYSYWYG limited by the Markdown feature set), sure. They support some select-and-click type of formatting (by the way, Desk&rsquo;s formatting tools look a lot like those found on medium.com), which is good for some who are not competent enough to type simple markups, I guess. Desk supports drag-and-drop of media (although I&rsquo;m sure it&rsquo;s limited to certain platforms and not portable at all — I always upload images to Imgur and embed the Imgur links, which is super simple for me since I have several homemade scripts to take care of that). So are these features essential? Not at all. For the general public, plain Markdown without rendering should be more than enough, since Markdown was designed to be human-readable as plain text in the first place. Markdown only gets ugly when you have a lot of inline hyperlinks, or worse still, plain HTML tags, but that&rsquo;s not what I would expect from the general public. The technical population who do probably need the rendering, on the other hand, aren&rsquo;t the target audience of these apps; certain needs of the technical folks are hardly ever addressed by these feature-deprived focused-writing apps — e.g., where are my keybindings (full-featured, not just C-k, C-y, C-p, C-n, C-b, C-f, M-del, etc.; in particular, what about M-d, M-b, etc.)? What about custom Markdown engine? What about Jekyll integration (no need for that, actually — I&rsquo;m happy with tty)? So, to sum up, for the target audience, realtime rendering isn&rsquo;t necessary, although I guess people with technophobia hate to see markups like <code>**</code> so no rendering will kill them. Second point, select-and-click type of formatting, is already dismissed. Third point, drag-and-drop of media might be useful for some people, but not all. After all, Desk uses a typewriter as its icon, and there&rsquo;s no way you could throw photos into your typewriter. It&rsquo;s about writing, and most of the time writing is enough.</p>

<p>I have dismissed the &ldquo;additional features&rdquo; of focused-writing apps as non-essential. And I can argue that they are actually sources of distraction — as soon as you have WYSYWYG and formatting and mouse, you could, in principle, begin to fiddle. But when I say &ldquo;additional features&rdquo;, you might ask, &ldquo;additional&rdquo; compared to what? Okay here&rsquo;s the magic. The magic is designed by Apple in California®, and it&rsquo;s present on every single Mac running OS X. It&rsquo;s called TextEdit.app. Distraction free? How can you be more distraction free than this:</p>

<p><img src="http://i.imgur.com/z3LEu0U.png" alt="" /></p>

<p>It&rsquo;s either text or blank. Nothing else. It&rsquo;s more than capable of handling plain text, our best friend (and computer&rsquo;s best friend — the universal interface). You can customize the font once and for all, or you can even live with the factory setting. That&rsquo;s better than having a font you don&rsquo;t like forced upon you, as many of those focused-writing apps do. You can even auto save to iCloud if you&rsquo;d like to. Of course there&rsquo;s no one click publishing or timeline management or whatever, but you could leave that to a publishing app (like Desk, when used as a publishing app). Better yet, you can use Jekyll or Octopress or whatever command line solution, where everything is at your fingertip, a few keystrokes away. No limitation whatsoever. But that&rsquo;s out of question for most people. (The easy-to-use command line interface, and not needing to worry about hosting myself, are two of the primary reasons that brought me to Octopress on GitHub Pages, rather than wordpress.com or self-hosted wordpress.org).</p>

<p>Of course I&rsquo;m not saying TextEdit is good enough as a text editor (it is good enough for most people, though), or it is my text editor of choice. My text editor has always been Emacs, which can be distraction free when I need it to be (I&rsquo;ve hidden everything I feel like to hide), and which can be an almost feature-complete operating system when I need it to be. Apart from a slightly frustrating loading time, there&rsquo;s no such bullshit as &ldquo;we deliberately left no feature and no choice to you so you won&rsquo;t fiddle.&rdquo; Mostly importantly, it is extensible — I can start writing Elisp right away, and every single line of code I write can potentially save me thousands of keystrokes in the future; I don&rsquo;t need to submit a feature request to the developer and wait forever (usually power users&#8217; feature requests are ignored, unless the software was built for power users to begin with or mainly popular within power users). Plus Emacs is free (both as in beer and in speech), rather than being proprietary and costing $30. At any rate, when I&rsquo;m writing in Emacs, most of the time I&rsquo;m just furiously typing away — no distraction whatsoever. That&rsquo;s the ideal state of writing, and I feel really good at those moments. That&rsquo;s the main charm of writing, at least to me.</p>

<p><img src="http://i.imgur.com/2Jx9Mpv.png" alt="" /></p>

<p>The whole command line experience is awesome (most of what I do with the computer are either done in the browser or in iTerm2 — well, plus some time spent with PDF in Preview.app and some with emails in Mail.app). And most of my tools either ship with the operating system (OS X is a great operating system), or are FOSS. Things that hardly ever die. Of course the command line experience is infeasible for laymen, but my argument is, <strong>most of the time the things you need are already there, e.g., TextEdit.</strong> I feel bad about those folks who are constantly on the lookout for distraction-free writing apps, and pay a ridiculous amount for them — only to distract themselves. Just open TextEdit and type away (or if you&rsquo;re capable of it, Emacs or Vim or SublimeText or TextMate or BBEdit or whatever). That&rsquo;s the most productive thing to do. <strong>Publishing is not the top priority; writing is, and it&rsquo;s really simple.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 and Unicode]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/05/python-3-and-unicode/"/>
    <updated>2014-12-05T15:01:54-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/05/python-3-and-unicode</id>
    <content type="html"><![CDATA[<p>I never realized that in Python 3 Unicode is the default; in particular, <code>str</code> in Python 3 is practically equivalent to <code>unicode</code> in Python 2. This might be the <em>one thing</em> that convince me to migrate. <code>str.encode()</code>, <code>str.decode()</code>, <code>unicode.encode()</code>, <code>unicode.decode()</code>, etc. are so confusing that I&rsquo;m never 100% sure what I&rsquo;m doing (only-occasionally-used-but-unavoidable-and-worst-of-all-very-confusing &ldquo;features&rdquo; are nightmares).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opera-style Advanced Keyboard Shortcuts in Safari]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/30/opera-style-advanced-keyboard-shortcuts-in-safari/"/>
    <updated>2014-11-30T17:20:20-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/30/opera-style-advanced-keyboard-shortcuts-in-safari</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using the Chromuim Opera for a long time, after Chrome&rsquo;s design went unbearably ugly around v32 (IIRC Opera stable channel was on v19 when I switched, which was released on January 28, 2014). From then on, Opera&rsquo;s <a href="http://help.opera.com/opera/Mac/1583/en/fasterBrowsing.html#advanced">advanced keyboard shortcuts</a> has become an integral part of my browsing habit. In particular, the following are especially handy for me:</p>

<ul>
<li><code>1</code>: Cycle left through tabs;</li>
<li><code>2</code>: Cycle right through tabs;</li>
<li><code>/</code>: Find on page;</li>
<li><code>Z</code>: Go back one page;</li>
<li><code>X</code>: Go forward one page;</li>
<li><code>0</code>: Zoom in;</li>
<li><code>9</code>: Zoom out;</li>
<li><code>6</code>: Reset zoom to 100%.</li>
</ul>


<p>Lately, with the Yosemite release, Safari has become a much more competitive browser. I won&rsquo;t say why, and I admit that it has major missing features that still prevents it from becoming my default — but I have to say I’m gradually moving more of more of my browsing, especially reading, to Safari. It would be nice if I could carry my power user shortcuts with me. Fortunately, this is possible. Just modify the plist in the following way:</p>

<figure class='code'><figcaption><span>safari-advanced-keyboard-shortcuts.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>defaults write com.apple.Safari NSUserKeyEquivalents <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">&quot;Actual Size&quot;=&quot;6&quot;;</span>
</span><span class='line'><span class="s1">&quot;Back&quot;=&quot;z&quot;;</span>
</span><span class='line'><span class="s1">&quot;Find...&quot;=&quot;/&quot;;</span>
</span><span class='line'><span class="s1">&quot;Forward&quot;=&quot;x&quot;;</span>
</span><span class='line'><span class="s1">&quot;Show Previous Tab&quot;=&quot;1&quot;;</span>
</span><span class='line'><span class="s1">&quot;Show Next Tab&quot;=&quot;2&quot;;</span>
</span><span class='line'><span class="s1">&quot;Zoom In&quot;=&quot;0&quot;;</span>
</span><span class='line'><span class="s1">&quot;Zoom Out&quot;=&quot;9&quot;;</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relaunch Safari. You are all set! Enjoy the ultrafast single key navigating experience. To reset,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults delete com.apple.Safari NSUserKeyEquivalents
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong><em>2014/12/22 Update:</em></strong></p>

<p>There&rsquo;s one caveat to this approach — unlike in Opera, where the default layman shortcuts (e.g., ⌘F) are still available when advanced keyboard shorts are enabled, in Safari they are simply overwritten. This is annoying when the web page or web app binds certain keys, especially <code>/</code> to its own search bar (a notable example being google.com). In that case I have to admit defeat and click on the menu bar item, which takes a hundred times as long as a single <code>/</code> keystroke.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Diceware]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/28/going-diceware/"/>
    <updated>2014-11-28T19:05:59-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/28/going-diceware</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m officially going <a href="http://world.std.com/~reinhold/diceware.html">Diceware</a>. I published my simple C implementation of diceware on <a href="https://github.com/zmwangx/diceware">GitHub</a>.</p>

<p>I&rsquo;ve been using 1Password for a couple years now, and I&rsquo;ve always been a bit worried about my master password. It&rsquo;s a ~30 byte monster with uppercase, lowercase letters, numbers, and special symbols. By any measure it is very safe. The problem is there are (extremely) personal things in there. I assembled several unrelated things that I (secretly) hold dearest to my heart, obfuscated them with rules not found in best64, and mixed with semi-gibberish. My daily login password is a combo similar in nature, with less obfuscation to facilitate typing. People who dig really deep into my identity might be able to compromise it (or not); I&rsquo;m afraid that I&rsquo;m more predictable than I thought I was. I know, the worry is pretty much unwarranted, as I’m not likely the target of a focused attack — I’m neither rich nor equipped with sensitive information or power, and for wide-range exploits, 99.9% of people are lower-hanging fruits. Even for a targeted attack, <a href="http://xkcd.com/538/">xkcd 538: Security</a> broke a crypto nerd’s imagination with a $5 wrench. However, a geek is a geek, you can’t block a geek’s imagination.</p>

<p>Therefore, after worrying for so long, today I’m going Diceware. Eight diceware words give you at least 100 bits of true entropy. Unfortunately I don’t have a die, and don’t bother to get one. (Amazon Prime: get it Monday? No. Target, six miles away? No.) So I read my random bits from <code>/dev/urandom</code>. The C implementation is <a href="https://github.com/zmwangx/diceware">here</a>. By publishing this I’m announcing to the world that I’m using diceware. But I’m not afraid, since I’m now protected by true entropy that’s not compromised by publishing the scheme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Given Infinite Time]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/28/given-infinite-time/"/>
    <updated>2014-11-28T00:18:19-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/28/given-infinite-time</id>
    <content type="html"><![CDATA[<p>Given infinite time. There&rsquo;s so much I can do <em>given infinite time</em>. I don&rsquo;t think I&rsquo;ll ever be bored. But sadly the time assigned to each human being is finite. Actually it&rsquo;s epsilon, epsilon approaching zero. Sadly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Original Images in Day One Journal]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/26/original-images-in-day-one-journal/"/>
    <updated>2014-11-26T00:22:16-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/26/original-images-in-day-one-journal</id>
    <content type="html"><![CDATA[<p><strong>TL; DR:</strong> Jump to the paragraph beginning with “workaround”.</p>

<hr />

<p>I started a Day One journal two days ago. I&rsquo;ve heard good things about Day One, but after using it for a dozen entries, I&rsquo;m not that satisfied. For one thing, the editor is pretty horrible — keybindings aside, I can’t even find and replace?! And the overview doesn’t look very pretty if you are a heavy Markdown user (i.e., you have a lot of markups, e.g., italics and inline links) — the markups are displayed as is. Moreover, I can’t even <code>#</code> my title: it kills the bold font rendering in the bird’s-eye view. What a let down. Anyway, it’s better than nothing, and I hope it will help me keep on track. (I used to manage a Markdown journal in an encrypted sparse bundle, and it was a pain in the ass — mentally. Maybe some GUI sugar is necessary, although Day One is certainly not as pretty as advertised.) Also a private journal means more privacy — I certainly don’t want to publish everything I write on this public blog.</p>

<p>Too much irrelevant talking. Onto one of the most annoying “features”, and the subject of this post. Images are automatically JPEG-compressed when imported into Day One. See <a href="https://dayone.zendesk.com/hc/en-us/articles/200145875-Are-photos-resized-when-imported-into-Day-One-">this support article</a>, which says:</p>

<blockquote><p>Every photo imported into Day One is converted to JPEG format and resized to a maximum resolution of 2100 x 2100 pixels. The aspect ratio is maintained. We resize photos for more efficient sync and storage. At this size the average photo is about 700KB which means you can store:
* Dropbox: 2,500+ photos using the free 2GB account
* iCloud: 6,000+ photos using the free 5GB account</p></blockquote>

<p>What the heck. Dude, who cares about storage these days? And transfer rate? I have a gigabit Ethernet. I certainly have much more than 2GB in my Dropbox. Even for those underpriviledged folks with only 2GB, remember, Day One allows <em>only one photo per entry</em>. That’s 2,500+ entries. At any rate, this should be an opt-in rather than an uncustomizable “feature”. I’m about to submit a ticket, but I doubt the outcome (I’m sure many people have submitted tickets about the plain text format even when password-protected, but so far, no response).</p>

<p>With photos, most of the time JPEG compression works pretty well (but people surely want to keep photos in highest quality). However, I’m a techie guy, and my images are often screenshots or precision images, where JPEG compression totally ruins the sharpness.</p>

<p>Workaround? Simple (yet a bit annoying). Day One lets you show the photo in Finder. So just go ahead and replace that compressed image with the original using <code>cp</code> or <code>mv</code>. I shouldn’t have needed to do this, but every piece of software comes with some annoyances. Overall Day One’s pretty good — at least it does what it was designed for, albeit not perfectly.</p>

<hr />

<p>By the way, here is my support ticket:</p>

<blockquote><p>I understand that Day One does JPEG compression to every imported photo, as written in the support article “Are photos resized when imported into Day One?” <a href="http://goo.gl/Rzi017">http://goo.gl/Rzi017</a> . Yet I beg an option. The reason is that the benefits outlined in the support article are virtually non-existent:</p>

<ul>
<li><p>“More efficient sync and storage”: these days transfer rates are really high with SSDs and gigabit Ethernet, so reducing a few hundred KBs won’t help me the slightest;</p></li>
<li><p>“Dropbox: 2,500+ photos using the free 2GB account”: I have much more than 2GB in my Dropbox; even if I only have 2GB, Day One allows only one photo per entry, and that means 2,500+ entries with photos, which is more than enough for most users, I suppose. By the way, Dropbox storage shouldn’t be your concern; people will buy more when they need more.</p></li>
</ul>


<p>And some of the bad things about JPEG compression:</p>

<ul>
<li><p>JPEG compression usually works pretty well with photos, but when I import high precision images, the sharpness is totally ruined;</p></li>
<li><p>People want to keep their photos in highest quality, which is defeated by forced compression.</p></li>
</ul>


<p>I know an ugly workaround, which is simply replace the compressed image with the original in the filesystem. But I would love to see an option to import images as originals (in fact, compression should be an opt-in). Really, transfer rates and storage grow so rapidly that they are not people’s primary concerns anymore. (For your information, OneDrive recently rolled out truly unlimited storage to Office 365 subscribers. Online storage is that cheap.) Thanks.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Got 16 Gigs of RAM]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/25/i-got-16-gigs-of-ram/"/>
    <updated>2014-11-25T16:28:30-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/25/i-got-16-gigs-of-ram</id>
    <content type="html"><![CDATA[<p>Today I upgraded the RAM of my MacBook Pro mid-2012 to 2x8GB. I purchased the <a href="http://smile.amazon.com/dp/B008LTBJFW">Crucial 16GB Kit (8GBx2) DDR3/DDR3L 1600 MHz (PC3-12800) CL11 SODIMM 204-Pin 1.35V/1.5V Memory for Mac CT2K8G3S160BM</a> from Amazon, which cose me $146.64 after tax. I followed the <a href="http://support.apple.com/en-us/HT201165">official guide</a> as well as the <a href="https://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Unibody+Mid+2012+RAM+Replacement/10374">iFixit guide</a>. To finish the job I needed a Phillips #00 screwdriver and a spudger, so I purchased the <a href="https://www.ifixit.com/Store/Tools/Spudger/IF145-002">spudger</a> and the <a href="https://www.ifixit.com/Store/Tools/54-Bit-Driver-Kit/IF145-022-1">54 bit driver kit</a> from iFixit.</p>

<p>The actual process was pretty simple. I had a little bit of hard time pulling out the bottom module and pushing in the top module, but overall it was smooth. The only stupid thing I did was that I forgot to push the battery connector back in before I closed the case; I only realized this when I was screwing in the eighth screw (that was a close one!), and had to unscrew everything again.</p>

<p>After I replaced the RAM modules, booting was just normal. And now I&rsquo;ve got 16 gigs of RAM!</p>

<p><img src="http://i.imgur.com/PGhdEGr.png" alt="" /></p>

<p>Want to run multiple memory hoggers <em>along with a Windows VM</em> (with 4GB of RAM)? No problem.</p>

<p><img src="http://i.imgur.com/czDcVaK.png" alt="" /></p>

<p>By the way, Yosemite is indeed really aggressive at RAM usage. I reserve my opinion on whether there&rsquo;s a memory leak. But so far the performance has been fine, even with 8GB of RAM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Abandoned MathJax and Fell Back to PDF]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/24/why-i-abandoned-mathjax-and-fell-back-to-pdf/"/>
    <updated>2014-11-24T20:54:36-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/24/why-i-abandoned-mathjax-and-fell-back-to-pdf</id>
    <content type="html"><![CDATA[<p>Recently I wrote an expository article, <a href="http://zmwangx.github.io/pdf/20141119-convolution-of-irreducible-characters.pdf"><em>Convolution of irreducible characters</em></a>, and posted it <a href="http://zmwangx.github.io/blog/2014/11/19/convolution-of-irreducible-characters/">here</a>. At first I intended to use MathJax, but in the end I fell back to good ol&#8217; PDF. Here&rsquo;s why.</p>

<p>In short, I&rsquo;m a mathematician. I write math <em>articles</em>, not just standalone expressions or formulas. I use AMSLaTeX to its fullest (not really, but at least I use numbering and the <code>amsthm</code> package to its fullest). HTML simply wasn&rsquo;t designed for this. Here are two influential markup languages designed for totally different use cases, and bridging them is painful. I tried to use <code>pandoc</code>, but it doesn&rsquo;t support <code>\input</code>, doesn&rsquo;t support <code>\def</code>, and swallows <code>\begin{theorem} \end{theorem}</code>, among other things. I tried to use <code>htlatex</code>; even the MathML output is suboptimal, with many math symbols translated to non-math (apart from totally human-unreadable), and it uses its custom CSS files that don&rsquo;t play well with everything else. I tried other things. In the end I gave up. Maybe I don&rsquo;t know enough about MathJax, but I certainly don&rsquo;t want to write a translator myself. Leave LaTeX alone. Distribute as PDF. MathJax may be great for Wikis (like Wikipedia) and for math lite blogs, but it&rsquo;s no replacement for real, beefy LaTeX. It&rsquo;s not for mathematicians who want to distribute real articles.</p>

<p>By the way, Terry Tao and others use <a href="http://lucatrevisan.wordpress.com/latex-to-wordpress/">Luca&rsquo;s LaTeX to WordPress, aka LaTeX2WP</a> for math blogging. From Terry&rsquo;s experience it works fairly well. I don&rsquo;t know if <code>amsthm</code> and <code>\def</code> are in the feature set, though. Anyway, since WordPress handles LaTeX as pre-compiled images (which is also the default on Wikipedia, and which looks poor in general and plays horribly with scaling), LaTeX2WP won&rsquo;t help MathJax users the slightest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone Photography Frustration]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/24/iphone-photography-frustration/"/>
    <updated>2014-11-24T12:42:25-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/24/iphone-photography-frustration</id>
    <content type="html"><![CDATA[<p><strong>TL; DR:</strong> Jump to the paragraph “In the end…”</p>

<hr />

<p>I&rsquo;m not a photo-savvy guy. I&rsquo;ve never taken a single selfie in my life, and my iPhone Photos app witnesses about twenty photos a year — fifteen of which are accidental screenshots. Okay, a little bit of exaggeration. The iPhone, aka iCamera, especially the 6 Plus model, is sort of a waste in my possession. However, my grandparents came to visit me on campus yesterday, and my grandma <em>loves</em> photos. So I took one with them, using my phone (which is obviously better than my grandma’s digital camera). The lighting was wrong, but I was able to fix that in five seconds — clicked “Edit”, clicked on the little sun icon (whatever it is called), clicked on “Light”, slided the slidebar all the way to the right, and all of a sudden it looked perfect. (This is the first time I ever clicked those, but I got it nicely done in five seconds — very intuitive, deeply impressed.) From a layman’s perspective, the builtin edit feature of the Photos app is really smart. Later I tried to reproduce the same edit with iPhoto, but I had to manually wrestle with exposure, highlights, shadows, brightness, contrast, etc., and I just never got it right. Call me a moron if you feel like it, but I’ve already given you the context at the beginning of this article, so you can’t blame me. (For your reference, I do ’shop some images for fun and profit from time to time, but I never deal with actual unedited photos, so I never have to worry about exposure and stuff.)</p>

<p>So far so good. The frustation began when I try to import the photo to my Mac. I’m certainly not a mobile guy who keeps everything on his phone or the cloud. I have the photo import feature of Dropbox turned on, so as I plugged in my phone the photo already appearred in the Camera Upload folder. Wait what, two copies? Two copies that looked exactly the same, albeit one is about 0.1 MB larger than the other? Not cool. Pulled up Image Capture; Apple’s own software should do the trick, I guess. Nope, same thing. Googled, found this article on support.apple.com: <a href="http://support.apple.com/en-us/HT203612"><em>iOS: Edited photos show original photo after import or in other apps</em></a>. Okay sure, they know this. Let&rsquo;s listen to what they have to say.</p>

<blockquote><p>Apple uses Extensible Metadata Platform (XMP), a standard created by Adobe, for nondestructive photo editing. XMP allows you to undo edits and to revert back to an original photo without the loss of quality. Displaying the edited photo requires OS X v10.9 or later and software that can read XMP. The following applications support XMP:</p>

<ul>
<li>iPhoto 9.5 or later</li>
<li>iPhoto for iOS</li>
<li>Aperture 3 or later</li>
<li>Adobe Lightroom</li>
<li>Adobe Photoshop Elements</li>
</ul>


<p>Other photo-management applications and some iOS apps may also display XMP.</p></blockquote>

<p>Adobe Lightroom, oh well. I don’t yet have Adobe CC installed — Photoshop is certainly a powerhouse (plus Illustrator, InDesign, etc. are nice to have at times), but Pixelmator works fine for me most of the time, and I’m happy to go to a library iMac or Mac Pro when I do need the power; $29.99/$19.99 is just too much if I use it twice a month. I theorize that I can indefinitely extend the free trial by running CC in a VM, reverting to a clean snapshot and regenerating the MAC address from time to time, but that’s only a theory — I haven’t got the incentive to test it out. As for iPhoto, I know it’s pretty lame from past experience, and I was very much baffled by the ugly and unintuitive UI, so normally I don’t even want to waste disk space on it; but since it’s only official solution other than expensive Adobe products and Aperture, I decided to install it. 1.7 GB gone. <em>So does the wasted 1.7 GB do the trick? Sadly, no.</em> Still the same thing in iPhoto 9.6, which is clearly “iPhoto 9.5 or later”. Totally baffled.</p>

<p>In the end, I came up with an ugly solution. Just email or iMessage the photo to yourself from the phone. If you use email though, be sure to use the builtin Mail, or you would likely lose Exif data (I sent from Mailbox and lost Exif; I then sent from Mail and didn’t). This is really annoying since setting up accounts in the builtin Mail app is not fun — Google 2FA is not supported, and I have to generate an app-specific password. Compare to Mailbox, where <em>I signed into Dropbox on the new phone and within five seconds all of my ten email accounts are ready to use</em>. The loss of Exif data is probably related to <a href="http://stackoverflow.com/questions/20763814">this thread on SO</a>, but I didn’t delve into it since I’m not a Cocoa Touch dev. What’s more confusing, sending the photo via different applications result in different filesizes. The one sent from Mail (I chose original size when I sent it) was a 2 MB JPEG; the one sent from Mailbox was a 4.5 MB JPEG (without the right Exif); and the one sent via iMessage and later opened from the Messages app on Yosemite could be saved as a 10 MB lossless PNG (Exif was there). I went with the 2 MB one in the end.</p>

<p>I don’t know if iCloud Photo Library will solve the problem in the end. From my perspective, <em>Apple should train Preview and QuickLook to recognize their XMP technology.</em> Seriously, they talk about continuity, and I expect to enjoy my enhanced photos on my Mac without going through all the hessle and confusion. Photo enhancing is already such a breeze, thank you; now make sharing and archiving easy, at least within the Apple ecosystem. (Although I’m not familiar with photography and image editing in general, considering how tech-savvy I am, I bet most users can’t even figure out one annoying solution.)</p>

<p>By the way, Continuity and Handoff only work intermittently for me, and AirDrop between my iPhone (6 Plus) and MacBook Pro (mid-2012, model 9,2) doesn’t work at all. Continuity and Handoff sometimes turn up when they are unexpected (and serve as kinda nice surprises), but when I try to nail them, they remain elusive. Not a big deal for me, but certainly not the most pleasant thing ever. I bet these have to do with the fact that my Mac is connected to Ethernet and sharing the Ethernet connection to my iPhone; these days they expect everyone to be on Wi-Fi (and ironically they messed up big in Yosemite), but Wi-Fi simply can’t beat the speed and stability of Ethernet. I didn’t bother to test whether the features work when my devices are connected to the same Wi-Fi network; even if they do, that’s not my production setup, so they’re still useless to me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dropbot for Geeks®]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/20/dropbot-for-geeks(r)/"/>
    <updated>2014-11-20T09:48:15-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/20/dropbot-for-geeks(r)</id>
    <content type="html"><![CDATA[<p>I propose the following cloud storage and syncing service model of the future. I call it <strong>Dropbot for Geeks®</strong>, and it totally rules. It&rsquo;s designed for geeks who are tired of the highly limited, miserably unproductive traditional services (based on clicking around). It has the following features:</p>

<ul>
<li><p>Standard Unix file system commands exposed as an API, e.g., <code>cat</code>, <code>cd</code>, <code>cp</code>, <code>du</code>, <code>df</code>, <code>file</code>, <code>find</code>, <code>head</code>, <code>ln</code>, <code>ls</code>, <code>mkdir</code>, <code>mv</code>, <code>pwd</code>, <code>rm</code>, <code>rmdir</code>, <code>tail</code>, <code>touch</code>, etc.</p></li>
<li><p>A rudimentary shell emulator through the web interface exposing the commands above.</p></li>
<li><p>Secure shell access to the file system, also exposing the commands above. Provide two-factor auth for SSH. Clearly, <code>scp</code> should also be supported.</p></li>
<li><p>Checksums. Expose, for instance, <code>md5sum</code> or <code>sha1sum</code>, in the API. Provide checksums on download pages, probably on demand.</p></li>
<li><p>Programmable selective syncing, down to per file level.</p></li>
<li><p>Scriptability. Allow clients to run custom scheduled jobs or daemons with the API above. To prevent the service from becoming full-featured IaaS, though, clients might be limited in CPU time, memory, or command selection. This bullet point is arguable.</p></li>
</ul>


<hr />

<p>With the level of command line integration illustrated above, we&rsquo;ll finally get rid of clicking around and not being able to automate chores. Navgating the remote file system will be a breeze — click, click, click, click, click (sometimes click should be replaced by double click, which is even more painful) just to navigate to a directory will be made a thing of the past. <code>ln</code>, in particular, saves disk space for duplicates — Dropbot for Geeks does <em>not</em> want to charge you extra for multiple copies of the same file in different directories. (To facilitate syncing hardlinks, clients should be able to specify hardlinked files in a config file. Or maybe some better mechanism. This might be hard.) At last, checksums are a must. I’ve had traumatic experiences like having downloaded an eight-part RAR, 1 GiB each, only to find that it wouldn’t unRAR. Without checksums, it was impossible to find which part was corrupted. As a result, I had to re-download everything — a nightmare. I never want to experience similar problems again. Hence the precious checksums.</p>

<p>Dropbot for Geeks looks like a pretty good (well, not really, but at least pretty cool®) model. Maybe I should patent it before anyone else? Then if some similar service surfaces in the future, I can <a href="http://arstechnica.com/tech-policy/2014/11/jury-apple-must-pay-23-6m-for-old-pager-patents/">sue their ass off and enjoy some hot cash</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convolution of Irreducible Characters]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/19/convolution-of-irreducible-characters/"/>
    <updated>2014-11-19T20:40:37-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/19/convolution-of-irreducible-characters</id>
    <content type="html"><![CDATA[<p><strong><em>TL; DR:</em> The actual PDF write-up is <a href="http://zmwangx.github.io/pdf/20141119-convolution-of-irreducible-characters.pdf">here</a>.</strong></p>

<hr />

<p>Yesterday I was trying to establish the formula for orthogonal primitive central idempotents of a group ring. It is possible to establish the result through the convolution of irreducible characters. However, I stuck quite a while on trying to work out the convolutions themselves. For a formidable and unenlightening proof using &ldquo;matrix entry functions&rdquo; (i.e., fix a basis, induce a matrix representation, and explicitly expand everything in matrix elements), see <a href="http://drexel28.wordpress.com/2011/03/02/representation-theory-using-orthogonality-relations-to-compute-convolutions-of-characters-and-matrix-entry-functions/">this post</a> (in fact, this is just one in a series of posts that lead up to the result). That&rsquo;s a really sad proof.</p>

<p>It turns out that I really should have been working the other way round &mdash; first establish the orthogonal idempotents (the proof of which is really simple and elegant, I was just trapped in a single thread of thought), then use that to compute the convolution of irreducible characters.</p>

<p>I feel like this is worth presenting (as the only proof I saw online is the really sad one above), so I TeX&#8217;ed it up. I tried to convert to MathJax HTML but eventually gave up (that&rsquo;s the story for another post). So, the write-up is in good ol&#8217; PDF, available <a href="http://zmwangx.github.io/pdf/20141119-convolution-of-irreducible-characters.pdf">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-encoding Everything for iPhone 6 Plus]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus/"/>
    <updated>2014-11-11T13:31:25-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/11/re-encoding-everything-for-iphone-6-plus</id>
    <content type="html"><![CDATA[<p>AT&amp;T finally delivered my iPhone 6 Plus (silver, 64 GB) after about fifty days since preorder… The 1080p Retina display is simply stunning. However, it turns out that my old videos don’t work so well on 6 Plus’s giant screen. My old mobile video collection was optimized for my 16 GB 4S, targeting the small screen and highly limited storage — you guessed it, they were resized to 960x540, and they looked great. But they’re not up to the task any more. 960x540 videos aren’t at all sharp on the stunning screen of 6 Plus, which is more than capable of handling 4x pixels. Therefore, I have no choice but to feed it more pixels. I’m left in a weird situation, where my 1080p desktop (or even HDTV) quality videos should fit the screen just fine, but H.264 profile stands in the way. iPhone 6 and 6 Plus are only capable of High Profile level 4.2, so anything encoded in level 5.1, for instance, needs to be re-encoded. Also there are still MPEG-2 and MPEG-4 videos out there (MPEG-4 should be obsolete by now, I assume, but some people still use it; and MPEG-2 is de facto in TV broadcasts), which have to be transcoded. Okay, it’s a daunting task to re-encode a fairly big collection, but I have to do it sooner or later. Presumably this weekend. I’ll also report whether 720p videos look sharp on the screen later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Average Phone Plan in the U.S. Costs Ten Time as Much as That in the U.K.]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/10/average-phone-plan-in-the-u-dot-s-costs-ten-time-as-much-as-that-in-the-u-dot-k/"/>
    <updated>2014-11-10T11:11:46-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/10/average-phone-plan-in-the-u-dot-s-costs-ten-time-as-much-as-that-in-the-u-dot-k</id>
    <content type="html"><![CDATA[<p>To quote <a href="http://blogs.opera.com/news/2014/11/mobile-data-anyway/">Opera News</a>,</p>

<blockquote><p>According to research by the International Telecommunication Union, the average phone plan with 500MB of data costs $85 in the United States, compared to $24.10 in China and $8.80 in the United Kingdom.</p></blockquote>

<p>Holy shit!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interstellar]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/07/interstellar/"/>
    <updated>2014-11-07T23:56:31-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/07/interstellar</id>
    <content type="html"><![CDATA[<p>Today (I mean November 7, 2014 — it’s technically November 8 at the time of writing) I saw <a href="https://en.wikipedia.org/wiki/Interstellar_%28film%29"><em>Interstellar</em></a> (IMAX digital) at AMC Mercado 20. I rarely go to movie theaters, less on the release day (film formats of <em>Interstellar</em> were released on November 5, and digital formats followed on November 7). However, reviews of it were positive (from the physics community), and I really need a way to release stress these days — I wasn’t in the right condition for months. So I figured I’d just spend an afternoon in front of the big screen.</p>

<p>I’ve heard good things about IMAX 70mm film, like no trailers, among other things. But I didn’t bother the extra seven miles’ drive to Hackworth IMAX Dome, so I landed on IMAX digital. Still a pretty stunning experience, although I ended up watching forty minutes worth of trailers before the real thing (arrived fifteen minutes early). In hindsight maybe I’d be better off spending some extra time on the road.</p>

<p>Speaking of the movie itself, they tried to make it as plausible as possible from a physics viewpoint, by involving <a href="https://en.wikipedia.org/wiki/Kip_Thorne">Kip Thorne</a> of Caltech. (There’s even a book out, <em>The Science of Interstellar</em>.) For instance, the wormhole isn’t portrayed as a hole (I mean, imagine a ring in empty space, as you would picture in your mind when you hear the word “hole” out of nothing; that’s not how it looks like here, and there’s a nice explanation). Some of the physics still doesn’t work out quite well, though, like Cooper’s not crushed at the singularity… Also there are communications from within the horizon and breakdown of causality, explained in the movie as happening in four dimension slices of some five dimensional spacetime where time could be a physical dimension. Obviously these are needed to get the sci-fi story going, so no one should be blamed.</p>

<p>I was there for the sci-fi and physics, but a nice surprise was that I was also touched by the humanity elements of story, I mean, family and stuff.</p>

<p>The downside: Cooper’s accent was a bit hard on me ☹</p>
]]></content>
  </entry>
  
</feed>
