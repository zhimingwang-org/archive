<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[dl? cmplnts?]]></title>
  <link href="http://zmwangx.github.io/atom.xml" rel="self"/>
  <link href="http://zmwangx.github.io/"/>
  <updated>2015-02-17T19:35:18-08:00</updated>
  <id>http://zmwangx.github.io/</id>
  <author>
    <name><![CDATA[Zhiming Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Microsoft Is Getting Cool (but Not Its Website)]]></title>
    <link href="http://zmwangx.github.io/blog/2015/02/17/microsoft-is-getting-cool-but-not-its-website/"/>
    <updated>2015-02-17T18:57:19-08:00</updated>
    <id>http://zmwangx.github.io/blog/2015/02/17/microsoft-is-getting-cool-but-not-its-website</id>
    <content type="html"><![CDATA[<p>Microsoft is getting kind of cool. For instance, open sourcing .NET last year caused quite a buzz. Ars has a good piece about this: <a href="http://arstechnica.com/information-technology/2015/02/microsofts-continuing-efforts-to-be-cool/">Microsoft’s continuing efforts to be cool</a>.</p>

<p>Three weeks ago Microsoft made another minor but totally unexpected move: they integrated AgileBits&#8217; <code>onepassword-app-extension</code> (<a href="https://github.com/AgileBits/onepassword-app-extension">GitHub</a>) into the 5.0 release of the OneDrive iOS app. I didn&rsquo;t realize this until I read <a href="https://blog.onedrive.com/onedrive_secure_password/">yesterday&rsquo;s blog post on the OneDrive Blog</a>. This is really amazing when you put it in context: I mean, take a look at <a href="https://blog.agilebits.com/1password-apps/">Apps that love 1Password</a>, i.e., apps that have integrated that extension. Out of the ninety apps listed to date, there are only a dozen apps that I&rsquo;ve heard of, and the only brands bigger than 1Password are Microsoft, Tumblr, Uber (infamous), and Walmart (what?). Microsoft embracing third party is surely an interesting phenomenon.</p>

<p>Meanwhile,</p>

<ul>
<li>Microsoft still won&rsquo;t let us use our password managers to its fullest (of course we can&rsquo;t blame it on the OneDrive folks): 16 characters max in this day and age (screenshot taken today)? Hmm. And I remember Microsoft recently said password length isn&rsquo;t the main source of vulnerability of its customers. WTF. Who cares about <em>your</em> stupid customers. I just want to protect <em>my own</em> data, and make sure that in case of a breach on <em>your</em> side, I won&rsquo;t face the same loss as your technologically illiterate customers. But that&rsquo;s not currently possible with Microsoft.</li>
</ul>


<p><img src="http://i.imgur.com/CNv76zw.png" alt="" /></p>

<ul>
<li>Microsoft&rsquo;s UI design is still shit, <a href="http://zmwangx.github.io/blog/2015/01/21/web-design-microsoft-vs-apple/">as well as their website</a>; I mean, seriously:</li>
</ul>


<p><img src="http://i.imgur.com/wu66zZc.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitor Progress of Your Unix Pipes With Pv]]></title>
    <link href="http://zmwangx.github.io/blog/2015/02/10/monitor-progress-of-your-unix-pipes-with-pv/"/>
    <updated>2015-02-10T02:18:30-08:00</updated>
    <id>http://zmwangx.github.io/blog/2015/02/10/monitor-progress-of-your-unix-pipes-with-pv</id>
    <content type="html"><![CDATA[<p>Recently I found a very useful utility called <code>pv</code> (for &ldquo;pipe viewer&rdquo;). <a href="http://www.ivarch.com/programs/pv.shtml">Here</a> is its home page, and it can be easily installed with <code>brew</code>. According to its man page,</p>

<blockquote><p><code>pv</code> shows the progress of data through a pipeline by giving information such as time elapsed, percentage completed (with progress bar), current throughput rate, total data transferred, and ETA.</p></blockquote>

<p>For more info, see its home page (linked above) and <a href="http://linux.die.net/man/1/pv">man page</a>.</p>

<p>Why is it useful? Well, pretty obvious if you are in the right audience. For me, one particularly important use case is with <code>openssl sha1</code>. I deal with videos on a daily basis, and back up all of them to OneDrive (ever since OneDrive went unlimited). To ensure integrity of transfer (in future downloads), I append the first seven digits of each video to its filename. This should be more than enough to reveal any error in transfer except for active attacks. One additional advantage is that I can now have multiple versions of a same show, event, or whatever and don&rsquo;t have to worry about naming conflicts (and don&rsquo;t have to artificially say <code>-ver1</code>, <code>-ver2</code>, etc.). This little merit turns out to be huge and saves me a lot of trouble, since naming things is intrinsically hard:</p>

<blockquote><p>There are only three hard things concurrency, in computer science: cache invalidation, naming things, and off-by-one errors.</p></blockquote>

<p>(I learned this beefed up version of two hard things only recently.) Well, too much digression. So SHA-1 sum is useful. (By the way, I learned in my crypto class that SHA-1 is broken as a collision-resistant hash function — not HMAC, which doesn&rsquo;t assume collision-resistance — and SHA-256 should be used instead. However, I&rsquo;m not protecting against active attacks — I won&rsquo;t be able to without a shared secret key anyway — so the faster SHA-1 is good for my purpose.) But at the same time, SHA-1 is slow. Maybe what&rsquo;s actually slow is my HDD. Whatever the bottleneck, generating a SHA-1 digest for a 10 GB video file isn&rsquo;t fun at all; it&rsquo;s even more of a torture when there&rsquo;s no progress bar and ETA. But hopelessly waiting has become a thing of the past with the advent (well, discovery in my case) of <code>pv</code>. Now I have nice and informative progress bars, which reduces the anxiety of waiting by an order of magnitude.</p>

<p>For the record, here&rsquo;s the current version of my ruby script that attaches the first seven digits of the SHA-1 digests of the given files to their filenames:</p>

<figure class='code'><figcaption><span>7sha1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;fileutils&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">rename</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>  <span class="n">num_items</span> <span class="o">=</span> <span class="n">items</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="n">num_done</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">items</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">printf</span><span class="p">(</span><span class="vg">$stderr</span><span class="p">,</span> <span class="s2">&quot;%d/%d: %s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">num_done</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">num_items</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">path</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">!</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">extname</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">extname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">basename</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">extname</span><span class="p">)</span>
</span><span class='line'>      <span class="n">dirname</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sha1sum</span> <span class="o">=</span> <span class="sb">`pv &#39;</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="sb">&#39; | openssl sha1`</span>
</span><span class='line'>      <span class="n">new_basename</span> <span class="o">=</span> <span class="n">basename</span> <span class="o">+</span> <span class="s2">&quot;__&quot;</span> <span class="o">+</span> <span class="n">sha1sum</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span>
</span><span class='line'>      <span class="n">new_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">dirname</span><span class="p">,</span> <span class="n">new_basename</span> <span class="o">+</span> <span class="n">extname</span><span class="p">)</span>
</span><span class='line'>      <span class="no">FileUtils</span><span class="o">.</span><span class="n">mv</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">new_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">: directory ignored&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">num_done</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">rename</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You might ask why I used ruby (littered with bash) when it&rsquo;s obviously a job for bash or perl. Well, the reason is that I first wrote this thing in ruby as a <a href="https://gist.github.com/zmwangx/d6406fb8bf51ac768770">Dropzone 3 action</a>. I&rsquo;m lazy, so I just borrowed that script and modified its printout for shell use.</p>

<hr />

<p>By the way, I also found a project called <code>cv</code> (Coreutils Viewer), which is <a href="https://github.com/Xfennec/cv">officially described as</a></p>

<blockquote><p>&hellip; a Tiny, Dirty, Linux-Only C command that looks for coreutils basic commands (cp, mv, dd, tar, gzip/gunzip, cat, etc.) currently running on your system and displays the percentage of copied data.</p></blockquote>

<p>I&rsquo;ll look into it when I have time, but it from its description, it seems to be limited to coreutils, and OS X support might not be too awesome (at this point).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Design: Microsoft vs Apple]]></title>
    <link href="http://zmwangx.github.io/blog/2015/01/21/web-design-microsoft-vs-apple/"/>
    <updated>2015-01-21T16:30:51-08:00</updated>
    <id>http://zmwangx.github.io/blog/2015/01/21/web-design-microsoft-vs-apple</id>
    <content type="html"><![CDATA[<p>I just had a look at Ars&rsquo;s live blog on today&rsquo;s Windows 10 Event to acquire a sense of where Windows is heading. There&rsquo;s not much to report. Safari rip-off (Microsoft&rsquo;s new Spartan — wait, is this name also inspired by Safari? — features reading mode and offline reading list, Safari&rsquo;s killer features) aside, the focus seems to be virtual assistant, PC-tablet-phone integration, and gaming, none of which I&rsquo;m interested in. The hologram thing does look cool, but putting the hype aside, I doubt if it will be really useful for the masses (except probably in gaming, one of my most despised applications of computing). I&rsquo;m not a visionary so maybe I&rsquo;m underestimating this.</p>

<p>(Another interesting development is &ldquo;Windows as a Service&rdquo; — WaaS? Microsoft isn&rsquo;t communiating it effectively. If it means paid subscription, am I ever going to subscribe to an OS? No. If it instead means free system updates for the lifetime of a device, then this WaaS thing is just a vacuous buzz phrase — Apple has already been doing it for two years. Longer if you count the cheap upgrades. However, if free system updates is indeed the case, then what about VMs? Not sure.)</p>

<p>The only thing I would like to see Apple copy from Microsoft is the unlimited OneDrive — come on, we already paid enough for our hardware, why can&rsquo;t we have unlimited cloud storage? I would even pay $10 per month for that — Microsoft is offering Office 365 along with unlimited cloud storage, all for just $10, so it certainly won&rsquo;t hurt Apple. The current iCloud pricing is ridiculous.</p>

<p>All the discussions above are not the main point of this post though. The point is, I went to the Windows website to learn more about Windows 10, and just can&rsquo;t believe my eyes in how awful it is designed. Just look at the font and the layout of <a href="http://windows.microsoft.com/en-us/windows-10/about">http://windows.microsoft.com/en-us/windows-10/about</a> (full web page screenshot courtesy of <a href="http://web-capture.net">web-capture.net</a>). And compare that to <a href="http://www.apple.com/osx/">http://www.apple.com/osx/</a> (scroll past the Windows screenshot). Holy crap, I even booted my Windows 8.1 VM just to make sure I&rsquo;m not lacking the necessary fonts available on Windows.</p>

<p>Why Microsoft&rsquo;s web design is so shitty is always beyond my grasp. For OS X, a potential customer would be eager to set his hands on it just by looking at its beautifully-crafted homepage and a few screenshots there. For Windows it&rsquo;s exactly the opposite. I mean, apart from metro apps (worst and ugliest desktop experience ever), modern Windows actually looks pretty good. But their shitty advertising totally ruins it. I guess it doesn&rsquo;t matter much for Microsoft, for all design-savvy folks who are not stuck on Windows are already using OS X, and most of their customers just need a commodity OS.</p>

<p><img src="http://i.imgur.com/0eIt4SR.png" alt="" />
<img src="http://i.imgur.com/piUO0xY.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fonts: Why Chinese Web Design Is Hard]]></title>
    <link href="http://zmwangx.github.io/blog/2015/01/10/fonts-why-chinese-web-design-is-hard/"/>
    <updated>2015-01-10T09:30:02-08:00</updated>
    <id>http://zmwangx.github.io/blog/2015/01/10/fonts-why-chinese-web-design-is-hard</id>
    <content type="html"><![CDATA[<p>For years I&rsquo;ve been complaining about Chinese websites&#8217; horrendous designs. Yesterday I tried to translate one of my simple project websites to Chinese, and finally realized that web design for the Chinese language is no simple task — much harder than for English. The problem is fonts. This might not be the only problem (and cannot take blame for all the horrendous designs), but it certainly seems to be a roadblock.</p>

<p>The problem with fonts boils down to the fact that the Chinese writing system has too many glyphs. I still remember learning things about the GB 2312 charset when I was twelve — there are 3755 Level 1 characters (more commonly seen), 3008 Level 2 characters, and other symbols and foreign glyphs. Designing more than six thousand Chinese characters is so much harder than designing 26 letters. I&rsquo;m not sure if many glyphs are auto-generated from parts, but that would certainly degrade the quality. The result? Availability of digital fonts suffers. There are simply not so many choices of Chinese fonts. Chinese writing is beautiful, but I&rsquo;ve yet to see a font for screens (let alone the web) that conveys that beauty. This might be subjective, but I have the impression that fonts generally look worse on screen than in print, and more so for Chinese fonts (Retina doesn&rsquo;t help much). For the record, I checked Apple&rsquo;s font usage at the moment, and they are using a tailored font named &ldquo;PingHei&rdquo; (&ldquo;平黑&rdquo;, I guess; see screenshot at the end); I&rsquo;m not at all impressed. Compare that to the English counterpart (also at the end) — not on the same level. (I won&rsquo;t talk about Microsoft since it doesn&rsquo;t feature a design department, or that department is brain dead. Well, I&rsquo;m a little opinionated.)</p>

<p>Another problem triggered by the vast number of glyphs is that font files are large. I looked at a dozen OTF fonts with SC or TC glyphs, and none seems to be below 10 MB. That&rsquo;s clearly a no go on the web — not until everyone has a gigabit connection, I suppose. I tried to Google for Chinese webfonts and had little success, so I&rsquo;m not sure if woff helps. I&rsquo;ve heard that Apple is able to pack a reduced set of PingHei glyphs into woffs less than 1 MB (keep in mind that PingHei being sans serif is simpler than serif fonts like Songti); that&rsquo;s pretty remarkable. I don&rsquo;t know much about font technologies so I can&rsquo;t comment more on this matter, but from my observation all Chinese websites (with the exception of apple.com/cn, I guess) rely on locally installed fonts, and most don&rsquo;t even have a list of fallbacks, i.e., typefaces simply aren&rsquo;t part of their designs. Even if they do have a list of fallbacks, they won&rsquo;t be able to guarantee uniform experience across the board (as far as I know, the lowest common denominator of Chinese fonts across all platforms seem to be zero). Apple has taught us that design must be integrated and perfected (well, Apple wasn&rsquo;t the first to do design, but they did bring it to the digital world and to the masses). Any fragmented design is doomed to fail.</p>

<p><img src="http://i.imgur.com/MPmtSJI.png" alt="" /></p>

<p><img src="http://i.imgur.com/hBpdv0B.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X System Ruby Encoding Annoyance]]></title>
    <link href="http://zmwangx.github.io/blog/2015/01/01/os-x-system-ruby-encoding-annoyance/"/>
    <updated>2015-01-01T22:49:39-08:00</updated>
    <id>http://zmwangx.github.io/blog/2015/01/01/os-x-system-ruby-encoding-annoyance</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using RVM (with fairly up-to-date Rubies) and pry since my day one with Ruby (well, almost), so it actually surprises me today when I found out by chance how poorly the system Ruby behaves when it comes to encoding.</p>

<p>The major annoyance with the current system Ruby (2.0.0p481) is that it can&rsquo;t convert <code>UTF8-MAC</code> to <code>UTF-8</code> (namely, NFD to NFC, as far as I can tell), at least not with Korean characters. Consider the following script:</p>

<figure class='code'><figcaption><span>utf8-mac.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># coding: utf-8</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;hex_string&#39;</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;에이핑크&quot;</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">to_hex_string</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">str</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&quot;UTF-8&quot;</span><span class="p">,</span> <span class="s2">&quot;UTF8-MAC&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_hex_string</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are what I get with the system Ruby and the latested brewed Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; /usr/bin/ruby --version
</span><span class='line'>ruby 2.0.0p481 <span class="o">(</span>2014-05-08 revision 45883<span class="o">)</span> <span class="o">[</span>universal.x86_64-darwin14<span class="o">]</span>
</span><span class='line'>&gt; /usr/local/bin/ruby --version
</span><span class='line'>ruby 2.2.0p0 <span class="o">(</span>2014-12-25 revision 49005<span class="o">)</span> <span class="o">[</span>x86_64-darwin14<span class="o">]</span>
</span><span class='line'>&gt; /usr/bin/ruby utf8-mac.rb
</span><span class='line'>e1 <span class="m">84</span> 8b e1 <span class="m">85</span> a6 e1 <span class="m">84</span> 8b e1 <span class="m">85</span> b5 e1 <span class="m">84</span> <span class="m">91</span> e1 <span class="m">85</span> b5 e1 <span class="m">86</span> bc e1 <span class="m">84</span> 8f e1 <span class="m">85</span> b3
</span><span class='line'>e1 <span class="m">84</span> 8b e1 <span class="m">85</span> a6 e1 <span class="m">84</span> 8b e1 <span class="m">85</span> b5 e1 <span class="m">84</span> <span class="m">91</span> e1 <span class="m">85</span> b5 e1 <span class="m">86</span> bc e1 <span class="m">84</span> 8f e1 <span class="m">85</span> b3
</span><span class='line'>&gt; /usr/local/bin/ruby utf8-mac.rb
</span><span class='line'>e1 <span class="m">84</span> 8b e1 <span class="m">85</span> a6 e1 <span class="m">84</span> 8b e1 <span class="m">85</span> b5 e1 <span class="m">84</span> <span class="m">91</span> e1 <span class="m">85</span> b5 e1 <span class="m">86</span> bc e1 <span class="m">84</span> 8f e1 <span class="m">85</span> b3
</span><span class='line'>ec <span class="m">97</span> <span class="m">90</span> ec 9d b4 ed <span class="m">95</span> <span class="m">91</span> ed <span class="m">81</span> ac
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, in the case of the system Ruby, NFD is left untouched. This leads to problems with, for instance, Google Translate. One obvious solution is to outsource the task to <code>iconv</code>, but I have the impression that outsourcing language features to shell commands is a generally despised practice.</p>

<p>There&rsquo;s one more surprise. While <code>pry</code> with latest Rubies tend to handle Unicode very well (unlike <code>irb</code>), I tried <code>pry</code> with the current system Ruby, and it doesn&rsquo;t work; due to this annoying limitation, I couldn&rsquo;t even test the above problem interactively, and had to resort to a script. Maybe the problem can be resolved by compiling Ruby with <code>readline</code> or whatever; I didn&rsquo;t bother. The bottom line is, the system Ruby is not very pleasant for men in the 21st century — good Unicode support ought to be a must. (By the way, NFD in HFS+ is maddening. It breaks Terminal, iTerm, Google Translate, scp with Linux hosts, and the list goes on.)</p>

<p>P.S. In Dropzone 3 custom actions you can select a custom Ruby with the <code>RubyPath</code> meta field, e.g.,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># RubyPath: /usr/local/bin/ruby</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mpv Launcher]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/23/mpv-launcher/"/>
    <updated>2014-12-23T00:51:05-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/23/mpv-launcher</id>
    <content type="html"><![CDATA[<p><a href="http://mpv.io"><code>mpv</code></a> is a nice simplistic video player (fork of MPlayer and mplayer2). The CLI is flawless (and you can run as many instances as you want), but when it comes to the OS X application bundle, there&rsquo;s one major annoyance. Each app bundle could only have one running instance (unless <code>open -n</code>’ed, which is not how sane people use app bundles), and one instance of <code>mpv</code> only supports one video. So, say I&rsquo;m playing one video with the app bundle, and unsuspectingly opens another in Finder (which is associated to <code>mpv.app</code> by default), then the latter video immediately takes over, and the position in the first video is lost. That happens <em>a lot</em>.</p>

<p>Today I finally gave this issue some serious thought (I&rsquo;ve been on a bug report/enhancement request spree these days so it&rsquo;s natural for me to start thinking about enhancements). Turns out that there&rsquo;s a pretty simple workaround. I created an automator app <code>mpv-launcher.app</code> that does one thing: &ldquo;Run Shell Script&rdquo; (pass input as arguments)</p>

<pre><code>daemonize /usr/local/bin/mpv "$@"
</code></pre>

<p>in the shell of your choice (for me the shell of choice is <code>zsh</code> since the env would be readily available from my <code>zshenv</code>). <code>daemonize</code>, as the name suggests, daemonizes the process so that the process doesn&rsquo;t block; this way, <code>mpv-launcher.app</code> immediately quits after launching, making multiple &ldquo;instances&rdquo; possible. (<code>daemonize</code> can be installed via <code>brew install daemonize</code>; note that you need to specify the full path of the command to daemonize, which in my case is <code>/usr/local/bin/mpv</code>). And there you go. Associate your video files to <code>mpv-launcher.app</code>. Launch as many instances as you want. Enjoy.</p>

<p>By the way, I also filed an <a href="https://github.com/mpv-player/mpv/issues/1377">enhancement request</a> with <code>mpv-player/mpv</code>. We&rsquo;ll see what the developers can do. Hopefully the app bundle will support multiple videos out of box in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10k Images on Imgur]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/22/10k-images-on-imgur/"/>
    <updated>2014-12-22T12:42:16-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/22/10k-images-on-imgur</id>
    <content type="html"><![CDATA[<p>I happened to check my imgur account just now (haven&rsquo;t been to the web interface for ages), and you know what, I have uploaded 10,744 images since I created the account in February this year! (I&rsquo;ve been using imgur for longer than that; previously I uploaded images anonymously.) Most of the 10k images were uploaded via scripts using the API. This again demonstrates the importance of a good API — without the imgur API I wouldn&rsquo;t have been able to upload hundreds of images with a few keystrokes all in a snap, and getting links would be a huge pain in the ass. There are myriad image hosting services out there, but imgur rules &lsquo;em all, thanks to its decent API (and also its good CDN and direct image links, of course).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Suggestion: Dropzone 3]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/19/app-suggestion-dropzone-3/"/>
    <updated>2014-12-19T14:08:57-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/19/app-suggestion-dropzone-3</id>
    <content type="html"><![CDATA[<p>I recently tried and purchased <a href="https://aptonic.com/dropzone3/">Dropzone 3</a>. See a list of features on the linked official website. In short, Dropzone 3 provides an intermediate zone for drag-n-drop. You can use it as a stash (called &ldquo;Drop Bar&rdquo; — stacking is available), use it as a shortcut by putting frequently used folders and applications there, or trigger actions by dropping. There are a dozen builtin actions and <a href="https://aptonic.com/dropzone3/actions/">an additional list of readily available actions</a>, covering common web drives, SNS and file sharing sites. <strong>Better yet, you can develop your custom actions with the easy-to-use <a href="https://github.com/aptonic/dropzone3-actions/blob/master/README.md#dzalerttitle-message">Ruby API</a>.</strong> For instance, I wrote a simple Google Translate action, <code>Google Translate.dzbundle</code> (<a href="https://gist.github.com/zmwangx/b27f106a8ba47468a43d">link</a>), based on <a href="https://github.com/soimort/translate-shell">translate-shell</a>. (You know, it&rsquo;s Ruby, so calling external commands and concatenating strings feel at home, as if you are coding in Perl or directly in shell; unlike Python, where you at least need to <code>import subprocess</code> then <code>subprocess.check_output</code> to get the output of an external command, and have to use a bunch of stupid <code>+</code>&rsquo;s to get your goddamn message to print.)</p>

<p>Although I use the terminal for most tasks, drag-n-drop is still useful and convenient at times, not to mention the custom actions. (And the stock drag-n-drop is kinda hit-and-miss, especially for people like me who are mostly working with windows maximized — except terminal windows.) After using Dropzone 3 for a while, I found it well worth $4.99.</p>

<p>Wait, I didn&rsquo;t mention the pricing? Dropzone 3 is only <a href="https://itunes.apple.com/us/app/dropzone-3/id695406827?ls=1&amp;mt=12">$4.99 on MAS</a>, so get it while supplies last. (Somehow the license is $10 on the developer&rsquo;s online store, so definitely buy from MAS and change to the <a href="https://aptonic.com/dropzone3/sandboxing.php">unsandboxed version</a> later — de-sandboxing is free.) There&rsquo;s also a 15-day free trial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Google Chrome Comic — a Classic]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/14/the-google-chrome-comic-a-classic/"/>
    <updated>2014-12-14T17:42:55-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/14/the-google-chrome-comic-a-classic</id>
    <content type="html"><![CDATA[<p>I was cleaning up my Opera bookmarks just now — I&rsquo;m semi-officially leaving Opera for Safari. Of course, Safari still can&rsquo;t handle everything (e.g., Adblock Plus is still not so good on Safari, YouTubeCenter lags behind and I don&rsquo;t bother to compile myself — yes, I have a certificate, and some power user features simply don&rsquo;t exist), so I&rsquo;m still going to Opera/Opera beta/Chrome/Firefox for certain tasks. But Safari is very nice. For the first time.</p>

<p>I started out as a Chrome user (well, don&rsquo;t want to recall the IE days), branched out to the Chromium Opera, and now ended up in Safari. Not sure about the future. When I look back, something nostalgic pops up in mind — <a href="http://www.google.com/googlebooks/chrome/">the Google Chrome Comic</a>. I enjoyed it more than once, but I never seemed to have archived it. So here it is, combined into <a href="http://zmwangx.github.io/pdf/2008-chrome-comic.pdf">one PDF</a>. In fact, you can create the PDF yourself:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>seq 0 39 | parallel wget -q http://www.google.com/googlebooks/chrome/images/big/{}.jpg
</span><span class='line'>convert $(ls -v *.jpg) 2008-chrome-comic.pdf</span></code></pre></td></tr></table></div></figure>


<p>Here I was a bit lazy and used a GNU <code>ls</code> feature: <code>-v</code> for natural sorting of numbers (doesn&rsquo;t work for BSD <code>ls</code>).</p>

<p>And here&rsquo;s page 1 of the comic as a teaser:</p>

<p><img src="http://i.imgur.com/W5pJTjl.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speeding Up Emacs With Emacsclient]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/14/speeding-up-emacs-with-emacsclient/"/>
    <updated>2014-12-14T10:06:02-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/14/speeding-up-emacs-with-emacsclient</id>
    <content type="html"><![CDATA[<p>Emacs is notorious for its loading time. For me, this is especially annoying when I&rsquo;m editing LaTeX files — AUCTeX takes about five seconds to load, and once I exit Emacs (especially after a quick edit), all that work is wasted, and next time I want to do some quick editing with that same LaTeX file — sorry, another five seconds.</p>

<p>This problem can be solved by &ldquo;using that same Emacs&rdquo;, i.e., running Emacs in server mode, then connecting to the server via <code>emacsclient</code>. Below is my script, which I call <code>emc</code>, to make <code>emacsclient</code> more user-friendly. <code>emc</code> opens a file (given as <code>$1</code>) on the server, launching one on its way if none is detected. Note that I used <code>-cqta=</code> for <code>emacsclient</code>. The <code>-c</code> option is <code>--create-frame</code>, i.e., create a new frame (in the current tty, for instance) instead of using the existing frame (in another tty, for instance); this allows for multiple frames accross different ttys. The <code>-q</code> option is for <code>--quiet</code>, suppressing messages like &ldquo;Waiting for Emacs&hellip;&rdquo; The <code>-t</code> option is for <code>--tty</code>, or equivalently, the familiar <code>-nw</code> option of <code>emacs</code>. The <code>-a=</code> options is <code>--alternate-editor=</code>; according to the manpage, <code>-a, --alternate-editor=EDITOR</code> has the following effect:</p>

<blockquote><p>if the Emacs server is not running, run the specified editor instead. This can also be specified via the `ALTERNATE_EDITOR&#8217; environment variable. If the value of EDITOR is the empty string,  run `emacs &ndash;daemon&#8217; to start Emacs in daemon mode, and try to connect to it.</p></blockquote>

<p>Note that <code>emacsclient</code> requires a filename, so my script prompts for one if <code>$1</code> is empty.</p>

<figure class='code'><figcaption><span>emc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> -n <span class="nv">$1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nv">file</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">[[</span> -z <span class="k">${</span><span class="nv">file</span><span class="k">}</span> <span class="o">]]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>        <span class="nb">read</span> -p <span class="s1">&#39;filename: &#39;</span> file
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>emacsclient -cqta<span class="o">=</span> <span class="s2">&quot;${file}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that using <code>emacsclient</code> has the additional benefit that the same buffer is simultaneously updated accross different ttys (See screenshot, where I opened the current post in two different ttys). This way, you won&rsquo;t face the nasty &ldquo;file changed on disk&rdquo; problem when you accidentally edited the same file in another tty session.</p>

<p><img src="http://i.imgur.com/9KxEWKq.png" alt="screen shot of multiple copies of the same buffer" /></p>

<p>By the way, remember to re-configure your other programs that uses an external editor. For instance, change <code>$EDITOR</code> to <code>emacsclient -cqta=</code> in your <code>env</code>, and <code>core.editor</code> to <code>emacsclient -cqta=</code> in your <code>~/.gitconfig</code>.</p>

<p><em>Note</em>: if you use <code>emacsclient</code> to edit git commit messages in Git Commit Mode, remember to use <code>C-c C-c</code> (<code>git-commit-commit</code>) to save the commit message rather than using <code>server-edit</code> or <code>C-x C-c</code> to exit Emacs. Otherwise, the <code>COMMIT_EDITMSG</code> buffer will persist in the Emacs server, and you&rsquo;ll be prompted to revert buffer the next time you edit another commit message, which is pretty annoying.</p>

<p>I just started using <code>emacsclient</code>, so the above script might be buggy in certain edge cases. I&rsquo;ll report when I run into issues.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Mac-like Evernote]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/13/the-mac-like-evernote/"/>
    <updated>2014-12-13T21:47:31-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/13/the-mac-like-evernote</id>
    <content type="html"><![CDATA[<p>Once in a while (maybe a year, maybe several months — not set in stone), I give big name free services not in use a chance to convince me. Evernote is one such service. The interface used to look very cheap and cluttered. I hated it. However, this time I&rsquo;m sold. Now everything Evernote, from its Mac app to its iOS app to its web design to its physical products, looks distinctively Mac-like. (I use Mac-like to refer to Apple&rsquo;s design philosophy, including iOS. Well, I guess the Android and Windows apps aren&rsquo;t Mac-like.) I mean, just look at the screenshots:</p>

<p><img src="http://i.imgur.com/AZelofm.png" alt="Web UI, beta" />
<img src="http://i.imgur.com/tZuWBlY.png" alt="Evernote Market, Pfeiffer Collection" />
<img src="http://i.imgur.com/R4QF8OM.png" alt="Mac app" /></p>

<p>Bright, simplistic, elegant, clutter-free. Mac-like. The Mac app takes advantage of the translucent material of Yosemite, and it looks gorgeous. The iOS app also feels great on a full HD Retina screen; I didn&rsquo;t bother to take a screenshot. Now it&rsquo;s much likely that I&rsquo;ll put it into good use — cluttered and cheap-looking interfaces give me nightmares and actually hinders my productivity, and now they are gone.</p>

<p>No one can argue that Apple products make great screenshots. They are also much more intuitive, functional, and productive than most Windows folks are willing to believe. I hope our world is more Mac-like.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OmniFocus: Change Sync Behavior, Mac and iOS]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/10/omnifocus-change-sync-behavior-mac-and-ios/"/>
    <updated>2014-12-10T22:45:34-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/10/omnifocus-change-sync-behavior-mac-and-ios</id>
    <content type="html"><![CDATA[<p>On OS X, the following URIs are relevant:</p>

<ul>
<li><a href="omnifocus:///change-preference?MaximumTimeBetweenSync=30">omnifocus:///change-preference?MaximumTimeBetweenSync=30</a></li>
<li><a href="omnifocus:///change-preference?TimeFromFirstEditToSync=2">omnifocus:///change-preference?TimeFromFirstEditToSync=2</a></li>
</ul>


<p>What they do are self-evident.</p>

<p>On iOS, use the following URIs instead:</p>

<ul>
<li><a href="x-omnifocus-debug:set-default:MaximumTimeBetweenSync:60">x-omnifocus-debug:set-default:MaximumTimeBetweenSync:60</a></li>
<li><a href="x-omnifocus-debug:set-default:TimeFromFirstEditToSync:2">x-omnifocus-debug:set-default:TimeFromFirstEditToSync:2</a></li>
</ul>


<p>Source: <a href="http://www.macstories.net/links/change-default-sync-times-of-omnifocus-for-mac-and-ios/">Change Default Sync Times of OmniFocus For Mac and iOS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distraction Free Writing]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/05/distraction-free-writing/"/>
    <updated>2014-12-05T21:09:10-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/05/distraction-free-writing</id>
    <content type="html"><![CDATA[<p>This is not the first time that a distraction free writing app is featured on the Mac App Store. This time the candidate is <a href="https://itunes.apple.com/us/app/desk/id915839505?mt=12">Desk</a>. The official website is <a href="http://desk.pm">here</a>, but licensing is MAS-exclusive. The icon looks like this:</p>

<p><img src="http://i.imgur.com/OprXSEU.png" alt="" /></p>

<p>Skeuomorphism, oh man. And this is the only screenshot I can find on the official website:</p>

<p><img src="http://i.imgur.com/WBaYzho.png" alt="" /></p>

<p>I can find a few other screenshots on MAS, but you know how shitty MAS screenshots are, plus the screenshots of this app only focus on specific UI elements. The official website also features an intro video (which provides no information at all) and a brief feature list with no further details, all on one page. The MAS description is somewhat more comprehensive, but again, &ldquo;WordPress integration&rdquo; and the like are not so informative. So, after a certain amount of research, I have to say I know little about this app. To do the app justice, there&rsquo;s an <a href="http://blog.desk.pm">accompanying blog</a>, with all kinds of noise though — like what a good blog should be, no complaint about that. So I guess anyone who wants to know more about this app should go digging there. Not me, so I didn&rsquo;t read.</p>

<p>Strangely enough, reception is great, although the price tag is currently set at $30 — definitely a premium price. John Gruber <a href="http://daringfireball.net/linked/2014/11/22/desk">has a piece</a>, but I think &ldquo;My thanks to Johb Saddington for sponsoring this weeks&#8217; DF RSS feed to promote Desk, his blogging app for the Mac&rdquo; kind of defeats credability. MAS featuring is also a good sign (although not always). Out of the 55 MAS ratings at the time of writing (9:42 PM, Friday, December 5, 2014), 45 are five stars.</p>

<p>That brings home my curiosity about &ldquo;distraction free writing apps&rdquo; in general. <em>Why would anyone pay $30 for a &ldquo;distraction free writing app&rdquo; (which basically justifies any lack of feature — &ldquo;we deliberately give you no choice for anything so you can focus on writing!&rdquo;), <strong>without even a trial</strong>?</em> MAS is such a bad model for utility and productivity software since you can&rsquo;t just look at five screenshots (seriously?) and decide &ldquo;this is for me!&rdquo; Yet I have the impression that more developers prefer this model nowadays, especially in this focused-writing business, another example being IA Writer. Sure it makes licensing and combating piracy simple, but again, I need to feel it to decide if it&rsquo;s the right tool for me, especially for a feature-deprived focused-writing app. (This is a general thought — in this case I don&rsquo;t need to feel it to tell that it&rsquo;s not for me.)</p>

<p>More specifically, let&rsquo;s think about distraction free writing. What does IA Writer, or Desk, or other apps offer that&rsquo;s not already available to you with your OS? They support Markdown syntax highlighting, or even WYSYWYG (but only the very simple kind of WYSYWYG limited by the Markdown feature set), sure. They support some select-and-click type of formatting (by the way, Desk&rsquo;s formatting tools look a lot like those found on medium.com), which is good for some who are not competent enough to type simple markups, I guess. Desk supports drag-and-drop of media (although I&rsquo;m sure it&rsquo;s limited to certain platforms and not portable at all — I always upload images to Imgur and embed the Imgur links, which is super simple for me since I have several homemade scripts to take care of that). So are these features essential? Not at all. For the general public, plain Markdown without rendering should be more than enough, since Markdown was designed to be human-readable as plain text in the first place. Markdown only gets ugly when you have a lot of inline hyperlinks, or worse still, plain HTML tags, but that&rsquo;s not what I would expect from the general public. The technical population who do probably need the rendering, on the other hand, aren&rsquo;t the target audience of these apps; certain needs of the technical folks are hardly ever addressed by these feature-deprived focused-writing apps — e.g., where are my keybindings (full-featured, not just C-k, C-y, C-p, C-n, C-b, C-f, M-del, etc.; in particular, what about M-d, M-b, etc.)? What about custom Markdown engine? What about Jekyll integration (no need for that, actually — I&rsquo;m happy with tty)? So, to sum up, for the target audience, realtime rendering isn&rsquo;t necessary, although I guess people with technophobia hate to see markups like <code>**</code> so no rendering will kill them. Second point, select-and-click type of formatting, is already dismissed. Third point, drag-and-drop of media might be useful for some people, but not all. After all, Desk uses a typewriter as its icon, and there&rsquo;s no way you could throw photos into your typewriter. It&rsquo;s about writing, and most of the time writing is enough.</p>

<p>I have dismissed the &ldquo;additional features&rdquo; of focused-writing apps as non-essential. And I can argue that they are actually sources of distraction — as soon as you have WYSYWYG and formatting and mouse, you could, in principle, begin to fiddle. But when I say &ldquo;additional features&rdquo;, you might ask, &ldquo;additional&rdquo; compared to what? Okay here&rsquo;s the magic. The magic is designed by Apple in California®, and it&rsquo;s present on every single Mac running OS X. It&rsquo;s called TextEdit.app. Distraction free? How can you be more distraction free than this:</p>

<p><img src="http://i.imgur.com/z3LEu0U.png" alt="" /></p>

<p>It&rsquo;s either text or blank. Nothing else. It&rsquo;s more than capable of handling plain text, our best friend (and computer&rsquo;s best friend — the universal interface). You can customize the font once and for all, or you can even live with the factory setting. That&rsquo;s better than having a font you don&rsquo;t like forced upon you, as many of those focused-writing apps do. You can even auto save to iCloud if you&rsquo;d like to. Of course there&rsquo;s no one click publishing or timeline management or whatever, but you could leave that to a publishing app (like Desk, when used as a publishing app). Better yet, you can use Jekyll or Octopress or whatever command line solution, where everything is at your fingertip, a few keystrokes away. No limitation whatsoever. But that&rsquo;s out of question for most people. (The easy-to-use command line interface, and not needing to worry about hosting myself, are two of the primary reasons that brought me to Octopress on GitHub Pages, rather than wordpress.com or self-hosted wordpress.org).</p>

<p>Of course I&rsquo;m not saying TextEdit is good enough as a text editor (it is good enough for most people, though), or it is my text editor of choice. My text editor has always been Emacs, which can be distraction free when I need it to be (I&rsquo;ve hidden everything I feel like to hide), and which can be an almost feature-complete operating system when I need it to be. Apart from a slightly frustrating loading time, there&rsquo;s no such bullshit as &ldquo;we deliberately left no feature and no choice to you so you won&rsquo;t fiddle.&rdquo; Mostly importantly, it is extensible — I can start writing Elisp right away, and every single line of code I write can potentially save me thousands of keystrokes in the future; I don&rsquo;t need to submit a feature request to the developer and wait forever (usually power users&#8217; feature requests are ignored, unless the software was built for power users to begin with or mainly popular within power users). Plus Emacs is free (both as in beer and in speech), rather than being proprietary and costing $30. At any rate, when I&rsquo;m writing in Emacs, most of the time I&rsquo;m just furiously typing away — no distraction whatsoever. That&rsquo;s the ideal state of writing, and I feel really good at those moments. That&rsquo;s the main charm of writing, at least to me.</p>

<p><img src="http://i.imgur.com/2Jx9Mpv.png" alt="" /></p>

<p>The whole command line experience is awesome (most of what I do with the computer are either done in the browser or in iTerm2 — well, plus some time spent with PDF in Preview.app and some with emails in Mail.app). And most of my tools either ship with the operating system (OS X is a great operating system), or are FOSS. Things that hardly ever die. Of course the command line experience is infeasible for laymen, but my argument is, <strong>most of the time the things you need are already there, e.g., TextEdit.</strong> I feel bad about those folks who are constantly on the lookout for distraction-free writing apps, and pay a ridiculous amount for them — only to distract themselves. Just open TextEdit and type away (or if you&rsquo;re capable of it, Emacs or Vim or SublimeText or TextMate or BBEdit or whatever). That&rsquo;s the most productive thing to do. <strong>Publishing is not the top priority; writing is, and it&rsquo;s really simple.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 3 and Unicode]]></title>
    <link href="http://zmwangx.github.io/blog/2014/12/05/python-3-and-unicode/"/>
    <updated>2014-12-05T15:01:54-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/12/05/python-3-and-unicode</id>
    <content type="html"><![CDATA[<p>I never realized that in Python 3 Unicode is the default; in particular, <code>str</code> in Python 3 is practically equivalent to <code>unicode</code> in Python 2. This might be the <em>one thing</em> that convince me to migrate. <code>str.encode()</code>, <code>str.decode()</code>, <code>unicode.encode()</code>, <code>unicode.decode()</code>, etc. are so confusing that I&rsquo;m never 100% sure what I&rsquo;m doing (only-occasionally-used-but-unavoidable-and-worst-of-all-very-confusing &ldquo;features&rdquo; are nightmares).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opera-style Advanced Keyboard Shortcuts in Safari]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/30/opera-style-advanced-keyboard-shortcuts-in-safari/"/>
    <updated>2014-11-30T17:20:20-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/30/opera-style-advanced-keyboard-shortcuts-in-safari</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using the Chromuim Opera for a long time, after Chrome&rsquo;s design went unbearably ugly around v32 (IIRC Opera stable channel was on v19 when I switched, which was released on January 28, 2014). From then on, Opera&rsquo;s <a href="http://help.opera.com/opera/Mac/1583/en/fasterBrowsing.html#advanced">advanced keyboard shortcuts</a> has become an integral part of my browsing habit. In particular, the following are especially handy for me:</p>

<ul>
<li><code>1</code>: Cycle left through tabs;</li>
<li><code>2</code>: Cycle right through tabs;</li>
<li><code>/</code>: Find on page;</li>
<li><code>Z</code>: Go back one page;</li>
<li><code>X</code>: Go forward one page;</li>
<li><code>0</code>: Zoom in;</li>
<li><code>9</code>: Zoom out;</li>
<li><code>6</code>: Reset zoom to 100%.</li>
</ul>


<p>Lately, with the Yosemite release, Safari has become a much more competitive browser. I won&rsquo;t say why, and I admit that it has major missing features that still prevents it from becoming my default — but I have to say I’m gradually moving more of more of my browsing, especially reading, to Safari. It would be nice if I could carry my power user shortcuts with me. Fortunately, this is possible. Just modify the plist in the following way:</p>

<figure class='code'><figcaption><span>safari-advanced-keyboard-shortcuts.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>defaults write com.apple.Safari NSUserKeyEquivalents <span class="s1">&#39;{</span>
</span><span class='line'><span class="s1">&quot;Actual Size&quot;=&quot;6&quot;;</span>
</span><span class='line'><span class="s1">&quot;Back&quot;=&quot;z&quot;;</span>
</span><span class='line'><span class="s1">&quot;Find...&quot;=&quot;/&quot;;</span>
</span><span class='line'><span class="s1">&quot;Forward&quot;=&quot;x&quot;;</span>
</span><span class='line'><span class="s1">&quot;Show Previous Tab&quot;=&quot;1&quot;;</span>
</span><span class='line'><span class="s1">&quot;Show Next Tab&quot;=&quot;2&quot;;</span>
</span><span class='line'><span class="s1">&quot;Zoom In&quot;=&quot;0&quot;;</span>
</span><span class='line'><span class="s1">&quot;Zoom Out&quot;=&quot;9&quot;;</span>
</span><span class='line'><span class="s1">}&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relaunch Safari. You are all set! Enjoy the ultrafast single key navigating experience. To reset,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>defaults delete com.apple.Safari NSUserKeyEquivalents
</span></code></pre></td></tr></table></div></figure>


<hr />

<p><strong><em>2014/12/22 Update:</em></strong></p>

<p>There&rsquo;s one caveat to this approach — unlike in Opera, where the default layman shortcuts (e.g., ⌘F) are still available when advanced keyboard shorts are enabled, in Safari they are simply overwritten. This is annoying when the web page or web app binds certain keys, especially <code>/</code> to its own search bar (a notable example being google.com). In that case I have to admit defeat and click on the menu bar item, which takes a hundred times as long as a single <code>/</code> keystroke.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Diceware]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/28/going-diceware/"/>
    <updated>2014-11-28T19:05:59-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/28/going-diceware</id>
    <content type="html"><![CDATA[<p>Today I&rsquo;m officially going <a href="http://world.std.com/~reinhold/diceware.html">Diceware</a>. I published my simple C implementation of diceware on <a href="https://github.com/zmwangx/diceware">GitHub</a>.</p>

<p>I&rsquo;ve been using 1Password for a couple years now, and I&rsquo;ve always been a bit worried about my master password. It&rsquo;s a ~30 byte monster with uppercase, lowercase letters, numbers, and special symbols. By any measure it is very safe. The problem is there are (extremely) personal things in there. I assembled several unrelated things that I (secretly) hold dearest to my heart, obfuscated them with rules not found in best64, and mixed with semi-gibberish. My daily login password is a combo similar in nature, with less obfuscation to facilitate typing. People who dig really deep into my identity might be able to compromise it (or not); I&rsquo;m afraid that I&rsquo;m more predictable than I thought I was. I know, the worry is pretty much unwarranted, as I’m not likely the target of a focused attack — I’m neither rich nor equipped with sensitive information or power, and for wide-range exploits, 99.9% of people are lower-hanging fruits. Even for a targeted attack, <a href="http://xkcd.com/538/">xkcd 538: Security</a> broke a crypto nerd’s imagination with a $5 wrench. However, a geek is a geek, you can’t block a geek’s imagination.</p>

<p>Therefore, after worrying for so long, today I’m going Diceware. Eight diceware words give you at least 100 bits of true entropy. Unfortunately I don’t have a die, and don’t bother to get one. (Amazon Prime: get it Monday? No. Target, six miles away? No.) So I read my random bits from <code>/dev/urandom</code>. The C implementation is <a href="https://github.com/zmwangx/diceware">here</a>. By publishing this I’m announcing to the world that I’m using diceware. But I’m not afraid, since I’m now protected by true entropy that’s not compromised by publishing the scheme.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Given Infinite Time]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/28/given-infinite-time/"/>
    <updated>2014-11-28T00:18:19-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/28/given-infinite-time</id>
    <content type="html"><![CDATA[<p>Given infinite time. There&rsquo;s so much I can do <em>given infinite time</em>. I don&rsquo;t think I&rsquo;ll ever be bored. But sadly the time assigned to each human being is finite. Actually it&rsquo;s epsilon, epsilon approaching zero. Sadly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Original Images in Day One Journal]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/26/original-images-in-day-one-journal/"/>
    <updated>2014-11-26T00:22:16-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/26/original-images-in-day-one-journal</id>
    <content type="html"><![CDATA[<p><strong>TL; DR:</strong> Jump to the paragraph beginning with “workaround”.</p>

<hr />

<p>I started a Day One journal two days ago. I&rsquo;ve heard good things about Day One, but after using it for a dozen entries, I&rsquo;m not that satisfied. For one thing, the editor is pretty horrible — keybindings aside, I can’t even find and replace?! And the overview doesn’t look very pretty if you are a heavy Markdown user (i.e., you have a lot of markups, e.g., italics and inline links) — the markups are displayed as is. Moreover, I can’t even <code>#</code> my title: it kills the bold font rendering in the bird’s-eye view. What a let down. Anyway, it’s better than nothing, and I hope it will help me keep on track. (I used to manage a Markdown journal in an encrypted sparse bundle, and it was a pain in the ass — mentally. Maybe some GUI sugar is necessary, although Day One is certainly not as pretty as advertised.) Also a private journal means more privacy — I certainly don’t want to publish everything I write on this public blog.</p>

<p>Too much irrelevant talking. Onto one of the most annoying “features”, and the subject of this post. Images are automatically JPEG-compressed when imported into Day One. See <a href="https://dayone.zendesk.com/hc/en-us/articles/200145875-Are-photos-resized-when-imported-into-Day-One-">this support article</a>, which says:</p>

<blockquote><p>Every photo imported into Day One is converted to JPEG format and resized to a maximum resolution of 2100 x 2100 pixels. The aspect ratio is maintained. We resize photos for more efficient sync and storage. At this size the average photo is about 700KB which means you can store:
* Dropbox: 2,500+ photos using the free 2GB account
* iCloud: 6,000+ photos using the free 5GB account</p></blockquote>

<p>What the heck. Dude, who cares about storage these days? And transfer rate? I have a gigabit Ethernet. I certainly have much more than 2GB in my Dropbox. Even for those underpriviledged folks with only 2GB, remember, Day One allows <em>only one photo per entry</em>. That’s 2,500+ entries. At any rate, this should be an opt-in rather than an uncustomizable “feature”. I’m about to submit a ticket, but I doubt the outcome (I’m sure many people have submitted tickets about the plain text format even when password-protected, but so far, no response).</p>

<p>With photos, most of the time JPEG compression works pretty well (but people surely want to keep photos in highest quality). However, I’m a techie guy, and my images are often screenshots or precision images, where JPEG compression totally ruins the sharpness.</p>

<p>Workaround? Simple (yet a bit annoying). Day One lets you show the photo in Finder. So just go ahead and replace that compressed image with the original using <code>cp</code> or <code>mv</code>. I shouldn’t have needed to do this, but every piece of software comes with some annoyances. Overall Day One’s pretty good — at least it does what it was designed for, albeit not perfectly.</p>

<hr />

<p>By the way, here is my support ticket:</p>

<blockquote><p>I understand that Day One does JPEG compression to every imported photo, as written in the support article “Are photos resized when imported into Day One?” <a href="http://goo.gl/Rzi017">http://goo.gl/Rzi017</a> . Yet I beg an option. The reason is that the benefits outlined in the support article are virtually non-existent:</p>

<ul>
<li><p>“More efficient sync and storage”: these days transfer rates are really high with SSDs and gigabit Ethernet, so reducing a few hundred KBs won’t help me the slightest;</p></li>
<li><p>“Dropbox: 2,500+ photos using the free 2GB account”: I have much more than 2GB in my Dropbox; even if I only have 2GB, Day One allows only one photo per entry, and that means 2,500+ entries with photos, which is more than enough for most users, I suppose. By the way, Dropbox storage shouldn’t be your concern; people will buy more when they need more.</p></li>
</ul>


<p>And some of the bad things about JPEG compression:</p>

<ul>
<li><p>JPEG compression usually works pretty well with photos, but when I import high precision images, the sharpness is totally ruined;</p></li>
<li><p>People want to keep their photos in highest quality, which is defeated by forced compression.</p></li>
</ul>


<p>I know an ugly workaround, which is simply replace the compressed image with the original in the filesystem. But I would love to see an option to import images as originals (in fact, compression should be an opt-in). Really, transfer rates and storage grow so rapidly that they are not people’s primary concerns anymore. (For your information, OneDrive recently rolled out truly unlimited storage to Office 365 subscribers. Online storage is that cheap.) Thanks.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Got 16 Gigs of RAM]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/25/i-got-16-gigs-of-ram/"/>
    <updated>2014-11-25T16:28:30-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/25/i-got-16-gigs-of-ram</id>
    <content type="html"><![CDATA[<p>Today I upgraded the RAM of my MacBook Pro mid-2012 to 2x8GB. I purchased the <a href="http://smile.amazon.com/dp/B008LTBJFW">Crucial 16GB Kit (8GBx2) DDR3/DDR3L 1600 MHz (PC3-12800) CL11 SODIMM 204-Pin 1.35V/1.5V Memory for Mac CT2K8G3S160BM</a> from Amazon, which cose me $146.64 after tax. I followed the <a href="http://support.apple.com/en-us/HT201165">official guide</a> as well as the <a href="https://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Unibody+Mid+2012+RAM+Replacement/10374">iFixit guide</a>. To finish the job I needed a Phillips #00 screwdriver and a spudger, so I purchased the <a href="https://www.ifixit.com/Store/Tools/Spudger/IF145-002">spudger</a> and the <a href="https://www.ifixit.com/Store/Tools/54-Bit-Driver-Kit/IF145-022-1">54 bit driver kit</a> from iFixit.</p>

<p>The actual process was pretty simple. I had a little bit of hard time pulling out the bottom module and pushing in the top module, but overall it was smooth. The only stupid thing I did was that I forgot to push the battery connector back in before I closed the case; I only realized this when I was screwing in the eighth screw (that was a close one!), and had to unscrew everything again.</p>

<p>After I replaced the RAM modules, booting was just normal. And now I&rsquo;ve got 16 gigs of RAM!</p>

<p><img src="http://i.imgur.com/PGhdEGr.png" alt="" /></p>

<p>Want to run multiple memory hoggers <em>along with a Windows VM</em> (with 4GB of RAM)? No problem.</p>

<p><img src="http://i.imgur.com/czDcVaK.png" alt="" /></p>

<p>By the way, Yosemite is indeed really aggressive at RAM usage. I reserve my opinion on whether there&rsquo;s a memory leak. But so far the performance has been fine, even with 8GB of RAM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I Abandoned MathJax and Fell Back to PDF]]></title>
    <link href="http://zmwangx.github.io/blog/2014/11/24/why-i-abandoned-mathjax-and-fell-back-to-pdf/"/>
    <updated>2014-11-24T20:54:36-08:00</updated>
    <id>http://zmwangx.github.io/blog/2014/11/24/why-i-abandoned-mathjax-and-fell-back-to-pdf</id>
    <content type="html"><![CDATA[<p>Recently I wrote an expository article, <a href="http://zmwangx.github.io/pdf/20141119-convolution-of-irreducible-characters.pdf"><em>Convolution of irreducible characters</em></a>, and posted it <a href="http://zmwangx.github.io/blog/2014/11/19/convolution-of-irreducible-characters/">here</a>. At first I intended to use MathJax, but in the end I fell back to good ol&#8217; PDF. Here&rsquo;s why.</p>

<p>In short, I&rsquo;m a mathematician. I write math <em>articles</em>, not just standalone expressions or formulas. I use AMSLaTeX to its fullest (not really, but at least I use numbering and the <code>amsthm</code> package to its fullest). HTML simply wasn&rsquo;t designed for this. Here are two influential markup languages designed for totally different use cases, and bridging them is painful. I tried to use <code>pandoc</code>, but it doesn&rsquo;t support <code>\input</code>, doesn&rsquo;t support <code>\def</code>, and swallows <code>\begin{theorem} \end{theorem}</code>, among other things. I tried to use <code>htlatex</code>; even the MathML output is suboptimal, with many math symbols translated to non-math (apart from totally human-unreadable), and it uses its custom CSS files that don&rsquo;t play well with everything else. I tried other things. In the end I gave up. Maybe I don&rsquo;t know enough about MathJax, but I certainly don&rsquo;t want to write a translator myself. Leave LaTeX alone. Distribute as PDF. MathJax may be great for Wikis (like Wikipedia) and for math lite blogs, but it&rsquo;s no replacement for real, beefy LaTeX. It&rsquo;s not for mathematicians who want to distribute real articles.</p>

<p>By the way, Terry Tao and others use <a href="http://lucatrevisan.wordpress.com/latex-to-wordpress/">Luca&rsquo;s LaTeX to WordPress, aka LaTeX2WP</a> for math blogging. From Terry&rsquo;s experience it works fairly well. I don&rsquo;t know if <code>amsthm</code> and <code>\def</code> are in the feature set, though. Anyway, since WordPress handles LaTeX as pre-compiled images (which is also the default on Wikipedia, and which looks poor in general and plays horribly with scaling), LaTeX2WP won&rsquo;t help MathJax users the slightest.</p>
]]></content>
  </entry>
  
</feed>
